// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/omkar273/codegeeky/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/omkar273/codegeeky/ent/cart"
	"github.com/omkar273/codegeeky/ent/cartlineitems"
	"github.com/omkar273/codegeeky/ent/category"
	"github.com/omkar273/codegeeky/ent/discount"
	"github.com/omkar273/codegeeky/ent/fileupload"
	"github.com/omkar273/codegeeky/ent/internship"
	"github.com/omkar273/codegeeky/ent/internshipbatch"
	"github.com/omkar273/codegeeky/ent/internshipenrollment"
	"github.com/omkar273/codegeeky/ent/order"
	"github.com/omkar273/codegeeky/ent/payment"
	"github.com/omkar273/codegeeky/ent/paymentattempt"
	"github.com/omkar273/codegeeky/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Cart is the client for interacting with the Cart builders.
	Cart *CartClient
	// CartLineItems is the client for interacting with the CartLineItems builders.
	CartLineItems *CartLineItemsClient
	// Category is the client for interacting with the Category builders.
	Category *CategoryClient
	// Discount is the client for interacting with the Discount builders.
	Discount *DiscountClient
	// FileUpload is the client for interacting with the FileUpload builders.
	FileUpload *FileUploadClient
	// Internship is the client for interacting with the Internship builders.
	Internship *InternshipClient
	// InternshipBatch is the client for interacting with the InternshipBatch builders.
	InternshipBatch *InternshipBatchClient
	// InternshipEnrollment is the client for interacting with the InternshipEnrollment builders.
	InternshipEnrollment *InternshipEnrollmentClient
	// Order is the client for interacting with the Order builders.
	Order *OrderClient
	// Payment is the client for interacting with the Payment builders.
	Payment *PaymentClient
	// PaymentAttempt is the client for interacting with the PaymentAttempt builders.
	PaymentAttempt *PaymentAttemptClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Cart = NewCartClient(c.config)
	c.CartLineItems = NewCartLineItemsClient(c.config)
	c.Category = NewCategoryClient(c.config)
	c.Discount = NewDiscountClient(c.config)
	c.FileUpload = NewFileUploadClient(c.config)
	c.Internship = NewInternshipClient(c.config)
	c.InternshipBatch = NewInternshipBatchClient(c.config)
	c.InternshipEnrollment = NewInternshipEnrollmentClient(c.config)
	c.Order = NewOrderClient(c.config)
	c.Payment = NewPaymentClient(c.config)
	c.PaymentAttempt = NewPaymentAttemptClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Cart:                 NewCartClient(cfg),
		CartLineItems:        NewCartLineItemsClient(cfg),
		Category:             NewCategoryClient(cfg),
		Discount:             NewDiscountClient(cfg),
		FileUpload:           NewFileUploadClient(cfg),
		Internship:           NewInternshipClient(cfg),
		InternshipBatch:      NewInternshipBatchClient(cfg),
		InternshipEnrollment: NewInternshipEnrollmentClient(cfg),
		Order:                NewOrderClient(cfg),
		Payment:              NewPaymentClient(cfg),
		PaymentAttempt:       NewPaymentAttemptClient(cfg),
		User:                 NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Cart:                 NewCartClient(cfg),
		CartLineItems:        NewCartLineItemsClient(cfg),
		Category:             NewCategoryClient(cfg),
		Discount:             NewDiscountClient(cfg),
		FileUpload:           NewFileUploadClient(cfg),
		Internship:           NewInternshipClient(cfg),
		InternshipBatch:      NewInternshipBatchClient(cfg),
		InternshipEnrollment: NewInternshipEnrollmentClient(cfg),
		Order:                NewOrderClient(cfg),
		Payment:              NewPaymentClient(cfg),
		PaymentAttempt:       NewPaymentAttemptClient(cfg),
		User:                 NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Cart.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Cart, c.CartLineItems, c.Category, c.Discount, c.FileUpload, c.Internship,
		c.InternshipBatch, c.InternshipEnrollment, c.Order, c.Payment,
		c.PaymentAttempt, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Cart, c.CartLineItems, c.Category, c.Discount, c.FileUpload, c.Internship,
		c.InternshipBatch, c.InternshipEnrollment, c.Order, c.Payment,
		c.PaymentAttempt, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CartMutation:
		return c.Cart.mutate(ctx, m)
	case *CartLineItemsMutation:
		return c.CartLineItems.mutate(ctx, m)
	case *CategoryMutation:
		return c.Category.mutate(ctx, m)
	case *DiscountMutation:
		return c.Discount.mutate(ctx, m)
	case *FileUploadMutation:
		return c.FileUpload.mutate(ctx, m)
	case *InternshipMutation:
		return c.Internship.mutate(ctx, m)
	case *InternshipBatchMutation:
		return c.InternshipBatch.mutate(ctx, m)
	case *InternshipEnrollmentMutation:
		return c.InternshipEnrollment.mutate(ctx, m)
	case *OrderMutation:
		return c.Order.mutate(ctx, m)
	case *PaymentMutation:
		return c.Payment.mutate(ctx, m)
	case *PaymentAttemptMutation:
		return c.PaymentAttempt.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// CartClient is a client for the Cart schema.
type CartClient struct {
	config
}

// NewCartClient returns a client for the Cart from the given config.
func NewCartClient(c config) *CartClient {
	return &CartClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cart.Hooks(f(g(h())))`.
func (c *CartClient) Use(hooks ...Hook) {
	c.hooks.Cart = append(c.hooks.Cart, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cart.Intercept(f(g(h())))`.
func (c *CartClient) Intercept(interceptors ...Interceptor) {
	c.inters.Cart = append(c.inters.Cart, interceptors...)
}

// Create returns a builder for creating a Cart entity.
func (c *CartClient) Create() *CartCreate {
	mutation := newCartMutation(c.config, OpCreate)
	return &CartCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Cart entities.
func (c *CartClient) CreateBulk(builders ...*CartCreate) *CartCreateBulk {
	return &CartCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CartClient) MapCreateBulk(slice any, setFunc func(*CartCreate, int)) *CartCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CartCreateBulk{err: fmt.Errorf("calling to CartClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CartCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CartCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Cart.
func (c *CartClient) Update() *CartUpdate {
	mutation := newCartMutation(c.config, OpUpdate)
	return &CartUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CartClient) UpdateOne(ca *Cart) *CartUpdateOne {
	mutation := newCartMutation(c.config, OpUpdateOne, withCart(ca))
	return &CartUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CartClient) UpdateOneID(id string) *CartUpdateOne {
	mutation := newCartMutation(c.config, OpUpdateOne, withCartID(id))
	return &CartUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Cart.
func (c *CartClient) Delete() *CartDelete {
	mutation := newCartMutation(c.config, OpDelete)
	return &CartDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CartClient) DeleteOne(ca *Cart) *CartDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CartClient) DeleteOneID(id string) *CartDeleteOne {
	builder := c.Delete().Where(cart.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CartDeleteOne{builder}
}

// Query returns a query builder for Cart.
func (c *CartClient) Query() *CartQuery {
	return &CartQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCart},
		inters: c.Interceptors(),
	}
}

// Get returns a Cart entity by its id.
func (c *CartClient) Get(ctx context.Context, id string) (*Cart, error) {
	return c.Query().Where(cart.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CartClient) GetX(ctx context.Context, id string) *Cart {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLineItems queries the line_items edge of a Cart.
func (c *CartClient) QueryLineItems(ca *Cart) *CartLineItemsQuery {
	query := (&CartLineItemsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cart.Table, cart.FieldID, id),
			sqlgraph.To(cartlineitems.Table, cartlineitems.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, cart.LineItemsTable, cart.LineItemsColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Cart.
func (c *CartClient) QueryUser(ca *Cart) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cart.Table, cart.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cart.UserTable, cart.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CartClient) Hooks() []Hook {
	return c.hooks.Cart
}

// Interceptors returns the client interceptors.
func (c *CartClient) Interceptors() []Interceptor {
	return c.inters.Cart
}

func (c *CartClient) mutate(ctx context.Context, m *CartMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CartCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CartUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CartUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CartDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Cart mutation op: %q", m.Op())
	}
}

// CartLineItemsClient is a client for the CartLineItems schema.
type CartLineItemsClient struct {
	config
}

// NewCartLineItemsClient returns a client for the CartLineItems from the given config.
func NewCartLineItemsClient(c config) *CartLineItemsClient {
	return &CartLineItemsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cartlineitems.Hooks(f(g(h())))`.
func (c *CartLineItemsClient) Use(hooks ...Hook) {
	c.hooks.CartLineItems = append(c.hooks.CartLineItems, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cartlineitems.Intercept(f(g(h())))`.
func (c *CartLineItemsClient) Intercept(interceptors ...Interceptor) {
	c.inters.CartLineItems = append(c.inters.CartLineItems, interceptors...)
}

// Create returns a builder for creating a CartLineItems entity.
func (c *CartLineItemsClient) Create() *CartLineItemsCreate {
	mutation := newCartLineItemsMutation(c.config, OpCreate)
	return &CartLineItemsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CartLineItems entities.
func (c *CartLineItemsClient) CreateBulk(builders ...*CartLineItemsCreate) *CartLineItemsCreateBulk {
	return &CartLineItemsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CartLineItemsClient) MapCreateBulk(slice any, setFunc func(*CartLineItemsCreate, int)) *CartLineItemsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CartLineItemsCreateBulk{err: fmt.Errorf("calling to CartLineItemsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CartLineItemsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CartLineItemsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CartLineItems.
func (c *CartLineItemsClient) Update() *CartLineItemsUpdate {
	mutation := newCartLineItemsMutation(c.config, OpUpdate)
	return &CartLineItemsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CartLineItemsClient) UpdateOne(cli *CartLineItems) *CartLineItemsUpdateOne {
	mutation := newCartLineItemsMutation(c.config, OpUpdateOne, withCartLineItems(cli))
	return &CartLineItemsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CartLineItemsClient) UpdateOneID(id string) *CartLineItemsUpdateOne {
	mutation := newCartLineItemsMutation(c.config, OpUpdateOne, withCartLineItemsID(id))
	return &CartLineItemsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CartLineItems.
func (c *CartLineItemsClient) Delete() *CartLineItemsDelete {
	mutation := newCartLineItemsMutation(c.config, OpDelete)
	return &CartLineItemsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CartLineItemsClient) DeleteOne(cli *CartLineItems) *CartLineItemsDeleteOne {
	return c.DeleteOneID(cli.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CartLineItemsClient) DeleteOneID(id string) *CartLineItemsDeleteOne {
	builder := c.Delete().Where(cartlineitems.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CartLineItemsDeleteOne{builder}
}

// Query returns a query builder for CartLineItems.
func (c *CartLineItemsClient) Query() *CartLineItemsQuery {
	return &CartLineItemsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCartLineItems},
		inters: c.Interceptors(),
	}
}

// Get returns a CartLineItems entity by its id.
func (c *CartLineItemsClient) Get(ctx context.Context, id string) (*CartLineItems, error) {
	return c.Query().Where(cartlineitems.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CartLineItemsClient) GetX(ctx context.Context, id string) *CartLineItems {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCart queries the cart edge of a CartLineItems.
func (c *CartLineItemsClient) QueryCart(cli *CartLineItems) *CartQuery {
	query := (&CartClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cli.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cartlineitems.Table, cartlineitems.FieldID, id),
			sqlgraph.To(cart.Table, cart.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cartlineitems.CartTable, cartlineitems.CartColumn),
		)
		fromV = sqlgraph.Neighbors(cli.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CartLineItemsClient) Hooks() []Hook {
	return c.hooks.CartLineItems
}

// Interceptors returns the client interceptors.
func (c *CartLineItemsClient) Interceptors() []Interceptor {
	return c.inters.CartLineItems
}

func (c *CartLineItemsClient) mutate(ctx context.Context, m *CartLineItemsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CartLineItemsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CartLineItemsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CartLineItemsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CartLineItemsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CartLineItems mutation op: %q", m.Op())
	}
}

// CategoryClient is a client for the Category schema.
type CategoryClient struct {
	config
}

// NewCategoryClient returns a client for the Category from the given config.
func NewCategoryClient(c config) *CategoryClient {
	return &CategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `category.Hooks(f(g(h())))`.
func (c *CategoryClient) Use(hooks ...Hook) {
	c.hooks.Category = append(c.hooks.Category, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `category.Intercept(f(g(h())))`.
func (c *CategoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.Category = append(c.inters.Category, interceptors...)
}

// Create returns a builder for creating a Category entity.
func (c *CategoryClient) Create() *CategoryCreate {
	mutation := newCategoryMutation(c.config, OpCreate)
	return &CategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Category entities.
func (c *CategoryClient) CreateBulk(builders ...*CategoryCreate) *CategoryCreateBulk {
	return &CategoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CategoryClient) MapCreateBulk(slice any, setFunc func(*CategoryCreate, int)) *CategoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CategoryCreateBulk{err: fmt.Errorf("calling to CategoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CategoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Category.
func (c *CategoryClient) Update() *CategoryUpdate {
	mutation := newCategoryMutation(c.config, OpUpdate)
	return &CategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CategoryClient) UpdateOne(ca *Category) *CategoryUpdateOne {
	mutation := newCategoryMutation(c.config, OpUpdateOne, withCategory(ca))
	return &CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CategoryClient) UpdateOneID(id string) *CategoryUpdateOne {
	mutation := newCategoryMutation(c.config, OpUpdateOne, withCategoryID(id))
	return &CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Category.
func (c *CategoryClient) Delete() *CategoryDelete {
	mutation := newCategoryMutation(c.config, OpDelete)
	return &CategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CategoryClient) DeleteOne(ca *Category) *CategoryDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CategoryClient) DeleteOneID(id string) *CategoryDeleteOne {
	builder := c.Delete().Where(category.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CategoryDeleteOne{builder}
}

// Query returns a query builder for Category.
func (c *CategoryClient) Query() *CategoryQuery {
	return &CategoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCategory},
		inters: c.Interceptors(),
	}
}

// Get returns a Category entity by its id.
func (c *CategoryClient) Get(ctx context.Context, id string) (*Category, error) {
	return c.Query().Where(category.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CategoryClient) GetX(ctx context.Context, id string) *Category {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInternships queries the internships edge of a Category.
func (c *CategoryClient) QueryInternships(ca *Category) *InternshipQuery {
	query := (&InternshipClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(category.Table, category.FieldID, id),
			sqlgraph.To(internship.Table, internship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, category.InternshipsTable, category.InternshipsColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CategoryClient) Hooks() []Hook {
	return c.hooks.Category
}

// Interceptors returns the client interceptors.
func (c *CategoryClient) Interceptors() []Interceptor {
	return c.inters.Category
}

func (c *CategoryClient) mutate(ctx context.Context, m *CategoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CategoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CategoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Category mutation op: %q", m.Op())
	}
}

// DiscountClient is a client for the Discount schema.
type DiscountClient struct {
	config
}

// NewDiscountClient returns a client for the Discount from the given config.
func NewDiscountClient(c config) *DiscountClient {
	return &DiscountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `discount.Hooks(f(g(h())))`.
func (c *DiscountClient) Use(hooks ...Hook) {
	c.hooks.Discount = append(c.hooks.Discount, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `discount.Intercept(f(g(h())))`.
func (c *DiscountClient) Intercept(interceptors ...Interceptor) {
	c.inters.Discount = append(c.inters.Discount, interceptors...)
}

// Create returns a builder for creating a Discount entity.
func (c *DiscountClient) Create() *DiscountCreate {
	mutation := newDiscountMutation(c.config, OpCreate)
	return &DiscountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Discount entities.
func (c *DiscountClient) CreateBulk(builders ...*DiscountCreate) *DiscountCreateBulk {
	return &DiscountCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DiscountClient) MapCreateBulk(slice any, setFunc func(*DiscountCreate, int)) *DiscountCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DiscountCreateBulk{err: fmt.Errorf("calling to DiscountClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DiscountCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DiscountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Discount.
func (c *DiscountClient) Update() *DiscountUpdate {
	mutation := newDiscountMutation(c.config, OpUpdate)
	return &DiscountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DiscountClient) UpdateOne(d *Discount) *DiscountUpdateOne {
	mutation := newDiscountMutation(c.config, OpUpdateOne, withDiscount(d))
	return &DiscountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DiscountClient) UpdateOneID(id string) *DiscountUpdateOne {
	mutation := newDiscountMutation(c.config, OpUpdateOne, withDiscountID(id))
	return &DiscountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Discount.
func (c *DiscountClient) Delete() *DiscountDelete {
	mutation := newDiscountMutation(c.config, OpDelete)
	return &DiscountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DiscountClient) DeleteOne(d *Discount) *DiscountDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DiscountClient) DeleteOneID(id string) *DiscountDeleteOne {
	builder := c.Delete().Where(discount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DiscountDeleteOne{builder}
}

// Query returns a query builder for Discount.
func (c *DiscountClient) Query() *DiscountQuery {
	return &DiscountQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDiscount},
		inters: c.Interceptors(),
	}
}

// Get returns a Discount entity by its id.
func (c *DiscountClient) Get(ctx context.Context, id string) (*Discount, error) {
	return c.Query().Where(discount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DiscountClient) GetX(ctx context.Context, id string) *Discount {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DiscountClient) Hooks() []Hook {
	return c.hooks.Discount
}

// Interceptors returns the client interceptors.
func (c *DiscountClient) Interceptors() []Interceptor {
	return c.inters.Discount
}

func (c *DiscountClient) mutate(ctx context.Context, m *DiscountMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DiscountCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DiscountUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DiscountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DiscountDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Discount mutation op: %q", m.Op())
	}
}

// FileUploadClient is a client for the FileUpload schema.
type FileUploadClient struct {
	config
}

// NewFileUploadClient returns a client for the FileUpload from the given config.
func NewFileUploadClient(c config) *FileUploadClient {
	return &FileUploadClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fileupload.Hooks(f(g(h())))`.
func (c *FileUploadClient) Use(hooks ...Hook) {
	c.hooks.FileUpload = append(c.hooks.FileUpload, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `fileupload.Intercept(f(g(h())))`.
func (c *FileUploadClient) Intercept(interceptors ...Interceptor) {
	c.inters.FileUpload = append(c.inters.FileUpload, interceptors...)
}

// Create returns a builder for creating a FileUpload entity.
func (c *FileUploadClient) Create() *FileUploadCreate {
	mutation := newFileUploadMutation(c.config, OpCreate)
	return &FileUploadCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FileUpload entities.
func (c *FileUploadClient) CreateBulk(builders ...*FileUploadCreate) *FileUploadCreateBulk {
	return &FileUploadCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FileUploadClient) MapCreateBulk(slice any, setFunc func(*FileUploadCreate, int)) *FileUploadCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FileUploadCreateBulk{err: fmt.Errorf("calling to FileUploadClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FileUploadCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FileUploadCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FileUpload.
func (c *FileUploadClient) Update() *FileUploadUpdate {
	mutation := newFileUploadMutation(c.config, OpUpdate)
	return &FileUploadUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FileUploadClient) UpdateOne(fu *FileUpload) *FileUploadUpdateOne {
	mutation := newFileUploadMutation(c.config, OpUpdateOne, withFileUpload(fu))
	return &FileUploadUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FileUploadClient) UpdateOneID(id string) *FileUploadUpdateOne {
	mutation := newFileUploadMutation(c.config, OpUpdateOne, withFileUploadID(id))
	return &FileUploadUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FileUpload.
func (c *FileUploadClient) Delete() *FileUploadDelete {
	mutation := newFileUploadMutation(c.config, OpDelete)
	return &FileUploadDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FileUploadClient) DeleteOne(fu *FileUpload) *FileUploadDeleteOne {
	return c.DeleteOneID(fu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FileUploadClient) DeleteOneID(id string) *FileUploadDeleteOne {
	builder := c.Delete().Where(fileupload.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FileUploadDeleteOne{builder}
}

// Query returns a query builder for FileUpload.
func (c *FileUploadClient) Query() *FileUploadQuery {
	return &FileUploadQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFileUpload},
		inters: c.Interceptors(),
	}
}

// Get returns a FileUpload entity by its id.
func (c *FileUploadClient) Get(ctx context.Context, id string) (*FileUpload, error) {
	return c.Query().Where(fileupload.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FileUploadClient) GetX(ctx context.Context, id string) *FileUpload {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FileUploadClient) Hooks() []Hook {
	return c.hooks.FileUpload
}

// Interceptors returns the client interceptors.
func (c *FileUploadClient) Interceptors() []Interceptor {
	return c.inters.FileUpload
}

func (c *FileUploadClient) mutate(ctx context.Context, m *FileUploadMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FileUploadCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FileUploadUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FileUploadUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FileUploadDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FileUpload mutation op: %q", m.Op())
	}
}

// InternshipClient is a client for the Internship schema.
type InternshipClient struct {
	config
}

// NewInternshipClient returns a client for the Internship from the given config.
func NewInternshipClient(c config) *InternshipClient {
	return &InternshipClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `internship.Hooks(f(g(h())))`.
func (c *InternshipClient) Use(hooks ...Hook) {
	c.hooks.Internship = append(c.hooks.Internship, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `internship.Intercept(f(g(h())))`.
func (c *InternshipClient) Intercept(interceptors ...Interceptor) {
	c.inters.Internship = append(c.inters.Internship, interceptors...)
}

// Create returns a builder for creating a Internship entity.
func (c *InternshipClient) Create() *InternshipCreate {
	mutation := newInternshipMutation(c.config, OpCreate)
	return &InternshipCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Internship entities.
func (c *InternshipClient) CreateBulk(builders ...*InternshipCreate) *InternshipCreateBulk {
	return &InternshipCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *InternshipClient) MapCreateBulk(slice any, setFunc func(*InternshipCreate, int)) *InternshipCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &InternshipCreateBulk{err: fmt.Errorf("calling to InternshipClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*InternshipCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &InternshipCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Internship.
func (c *InternshipClient) Update() *InternshipUpdate {
	mutation := newInternshipMutation(c.config, OpUpdate)
	return &InternshipUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InternshipClient) UpdateOne(i *Internship) *InternshipUpdateOne {
	mutation := newInternshipMutation(c.config, OpUpdateOne, withInternship(i))
	return &InternshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InternshipClient) UpdateOneID(id string) *InternshipUpdateOne {
	mutation := newInternshipMutation(c.config, OpUpdateOne, withInternshipID(id))
	return &InternshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Internship.
func (c *InternshipClient) Delete() *InternshipDelete {
	mutation := newInternshipMutation(c.config, OpDelete)
	return &InternshipDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InternshipClient) DeleteOne(i *Internship) *InternshipDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InternshipClient) DeleteOneID(id string) *InternshipDeleteOne {
	builder := c.Delete().Where(internship.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InternshipDeleteOne{builder}
}

// Query returns a query builder for Internship.
func (c *InternshipClient) Query() *InternshipQuery {
	return &InternshipQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInternship},
		inters: c.Interceptors(),
	}
}

// Get returns a Internship entity by its id.
func (c *InternshipClient) Get(ctx context.Context, id string) (*Internship, error) {
	return c.Query().Where(internship.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InternshipClient) GetX(ctx context.Context, id string) *Internship {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCategories queries the categories edge of a Internship.
func (c *InternshipClient) QueryCategories(i *Internship) *CategoryQuery {
	query := (&CategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(internship.Table, internship.FieldID, id),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, internship.CategoriesTable, internship.CategoriesColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InternshipClient) Hooks() []Hook {
	return c.hooks.Internship
}

// Interceptors returns the client interceptors.
func (c *InternshipClient) Interceptors() []Interceptor {
	return c.inters.Internship
}

func (c *InternshipClient) mutate(ctx context.Context, m *InternshipMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InternshipCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InternshipUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InternshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InternshipDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Internship mutation op: %q", m.Op())
	}
}

// InternshipBatchClient is a client for the InternshipBatch schema.
type InternshipBatchClient struct {
	config
}

// NewInternshipBatchClient returns a client for the InternshipBatch from the given config.
func NewInternshipBatchClient(c config) *InternshipBatchClient {
	return &InternshipBatchClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `internshipbatch.Hooks(f(g(h())))`.
func (c *InternshipBatchClient) Use(hooks ...Hook) {
	c.hooks.InternshipBatch = append(c.hooks.InternshipBatch, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `internshipbatch.Intercept(f(g(h())))`.
func (c *InternshipBatchClient) Intercept(interceptors ...Interceptor) {
	c.inters.InternshipBatch = append(c.inters.InternshipBatch, interceptors...)
}

// Create returns a builder for creating a InternshipBatch entity.
func (c *InternshipBatchClient) Create() *InternshipBatchCreate {
	mutation := newInternshipBatchMutation(c.config, OpCreate)
	return &InternshipBatchCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InternshipBatch entities.
func (c *InternshipBatchClient) CreateBulk(builders ...*InternshipBatchCreate) *InternshipBatchCreateBulk {
	return &InternshipBatchCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *InternshipBatchClient) MapCreateBulk(slice any, setFunc func(*InternshipBatchCreate, int)) *InternshipBatchCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &InternshipBatchCreateBulk{err: fmt.Errorf("calling to InternshipBatchClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*InternshipBatchCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &InternshipBatchCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InternshipBatch.
func (c *InternshipBatchClient) Update() *InternshipBatchUpdate {
	mutation := newInternshipBatchMutation(c.config, OpUpdate)
	return &InternshipBatchUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InternshipBatchClient) UpdateOne(ib *InternshipBatch) *InternshipBatchUpdateOne {
	mutation := newInternshipBatchMutation(c.config, OpUpdateOne, withInternshipBatch(ib))
	return &InternshipBatchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InternshipBatchClient) UpdateOneID(id string) *InternshipBatchUpdateOne {
	mutation := newInternshipBatchMutation(c.config, OpUpdateOne, withInternshipBatchID(id))
	return &InternshipBatchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InternshipBatch.
func (c *InternshipBatchClient) Delete() *InternshipBatchDelete {
	mutation := newInternshipBatchMutation(c.config, OpDelete)
	return &InternshipBatchDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InternshipBatchClient) DeleteOne(ib *InternshipBatch) *InternshipBatchDeleteOne {
	return c.DeleteOneID(ib.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InternshipBatchClient) DeleteOneID(id string) *InternshipBatchDeleteOne {
	builder := c.Delete().Where(internshipbatch.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InternshipBatchDeleteOne{builder}
}

// Query returns a query builder for InternshipBatch.
func (c *InternshipBatchClient) Query() *InternshipBatchQuery {
	return &InternshipBatchQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInternshipBatch},
		inters: c.Interceptors(),
	}
}

// Get returns a InternshipBatch entity by its id.
func (c *InternshipBatchClient) Get(ctx context.Context, id string) (*InternshipBatch, error) {
	return c.Query().Where(internshipbatch.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InternshipBatchClient) GetX(ctx context.Context, id string) *InternshipBatch {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *InternshipBatchClient) Hooks() []Hook {
	return c.hooks.InternshipBatch
}

// Interceptors returns the client interceptors.
func (c *InternshipBatchClient) Interceptors() []Interceptor {
	return c.inters.InternshipBatch
}

func (c *InternshipBatchClient) mutate(ctx context.Context, m *InternshipBatchMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InternshipBatchCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InternshipBatchUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InternshipBatchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InternshipBatchDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown InternshipBatch mutation op: %q", m.Op())
	}
}

// InternshipEnrollmentClient is a client for the InternshipEnrollment schema.
type InternshipEnrollmentClient struct {
	config
}

// NewInternshipEnrollmentClient returns a client for the InternshipEnrollment from the given config.
func NewInternshipEnrollmentClient(c config) *InternshipEnrollmentClient {
	return &InternshipEnrollmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `internshipenrollment.Hooks(f(g(h())))`.
func (c *InternshipEnrollmentClient) Use(hooks ...Hook) {
	c.hooks.InternshipEnrollment = append(c.hooks.InternshipEnrollment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `internshipenrollment.Intercept(f(g(h())))`.
func (c *InternshipEnrollmentClient) Intercept(interceptors ...Interceptor) {
	c.inters.InternshipEnrollment = append(c.inters.InternshipEnrollment, interceptors...)
}

// Create returns a builder for creating a InternshipEnrollment entity.
func (c *InternshipEnrollmentClient) Create() *InternshipEnrollmentCreate {
	mutation := newInternshipEnrollmentMutation(c.config, OpCreate)
	return &InternshipEnrollmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InternshipEnrollment entities.
func (c *InternshipEnrollmentClient) CreateBulk(builders ...*InternshipEnrollmentCreate) *InternshipEnrollmentCreateBulk {
	return &InternshipEnrollmentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *InternshipEnrollmentClient) MapCreateBulk(slice any, setFunc func(*InternshipEnrollmentCreate, int)) *InternshipEnrollmentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &InternshipEnrollmentCreateBulk{err: fmt.Errorf("calling to InternshipEnrollmentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*InternshipEnrollmentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &InternshipEnrollmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InternshipEnrollment.
func (c *InternshipEnrollmentClient) Update() *InternshipEnrollmentUpdate {
	mutation := newInternshipEnrollmentMutation(c.config, OpUpdate)
	return &InternshipEnrollmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InternshipEnrollmentClient) UpdateOne(ie *InternshipEnrollment) *InternshipEnrollmentUpdateOne {
	mutation := newInternshipEnrollmentMutation(c.config, OpUpdateOne, withInternshipEnrollment(ie))
	return &InternshipEnrollmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InternshipEnrollmentClient) UpdateOneID(id string) *InternshipEnrollmentUpdateOne {
	mutation := newInternshipEnrollmentMutation(c.config, OpUpdateOne, withInternshipEnrollmentID(id))
	return &InternshipEnrollmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InternshipEnrollment.
func (c *InternshipEnrollmentClient) Delete() *InternshipEnrollmentDelete {
	mutation := newInternshipEnrollmentMutation(c.config, OpDelete)
	return &InternshipEnrollmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InternshipEnrollmentClient) DeleteOne(ie *InternshipEnrollment) *InternshipEnrollmentDeleteOne {
	return c.DeleteOneID(ie.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InternshipEnrollmentClient) DeleteOneID(id string) *InternshipEnrollmentDeleteOne {
	builder := c.Delete().Where(internshipenrollment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InternshipEnrollmentDeleteOne{builder}
}

// Query returns a query builder for InternshipEnrollment.
func (c *InternshipEnrollmentClient) Query() *InternshipEnrollmentQuery {
	return &InternshipEnrollmentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInternshipEnrollment},
		inters: c.Interceptors(),
	}
}

// Get returns a InternshipEnrollment entity by its id.
func (c *InternshipEnrollmentClient) Get(ctx context.Context, id string) (*InternshipEnrollment, error) {
	return c.Query().Where(internshipenrollment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InternshipEnrollmentClient) GetX(ctx context.Context, id string) *InternshipEnrollment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *InternshipEnrollmentClient) Hooks() []Hook {
	return c.hooks.InternshipEnrollment
}

// Interceptors returns the client interceptors.
func (c *InternshipEnrollmentClient) Interceptors() []Interceptor {
	return c.inters.InternshipEnrollment
}

func (c *InternshipEnrollmentClient) mutate(ctx context.Context, m *InternshipEnrollmentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InternshipEnrollmentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InternshipEnrollmentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InternshipEnrollmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InternshipEnrollmentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown InternshipEnrollment mutation op: %q", m.Op())
	}
}

// OrderClient is a client for the Order schema.
type OrderClient struct {
	config
}

// NewOrderClient returns a client for the Order from the given config.
func NewOrderClient(c config) *OrderClient {
	return &OrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `order.Hooks(f(g(h())))`.
func (c *OrderClient) Use(hooks ...Hook) {
	c.hooks.Order = append(c.hooks.Order, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `order.Intercept(f(g(h())))`.
func (c *OrderClient) Intercept(interceptors ...Interceptor) {
	c.inters.Order = append(c.inters.Order, interceptors...)
}

// Create returns a builder for creating a Order entity.
func (c *OrderClient) Create() *OrderCreate {
	mutation := newOrderMutation(c.config, OpCreate)
	return &OrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Order entities.
func (c *OrderClient) CreateBulk(builders ...*OrderCreate) *OrderCreateBulk {
	return &OrderCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrderClient) MapCreateBulk(slice any, setFunc func(*OrderCreate, int)) *OrderCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrderCreateBulk{err: fmt.Errorf("calling to OrderClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrderCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Order.
func (c *OrderClient) Update() *OrderUpdate {
	mutation := newOrderMutation(c.config, OpUpdate)
	return &OrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderClient) UpdateOne(o *Order) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrder(o))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderClient) UpdateOneID(id int) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrderID(id))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Order.
func (c *OrderClient) Delete() *OrderDelete {
	mutation := newOrderMutation(c.config, OpDelete)
	return &OrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderClient) DeleteOne(o *Order) *OrderDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderClient) DeleteOneID(id int) *OrderDeleteOne {
	builder := c.Delete().Where(order.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderDeleteOne{builder}
}

// Query returns a query builder for Order.
func (c *OrderClient) Query() *OrderQuery {
	return &OrderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrder},
		inters: c.Interceptors(),
	}
}

// Get returns a Order entity by its id.
func (c *OrderClient) Get(ctx context.Context, id int) (*Order, error) {
	return c.Query().Where(order.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderClient) GetX(ctx context.Context, id int) *Order {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderClient) Hooks() []Hook {
	return c.hooks.Order
}

// Interceptors returns the client interceptors.
func (c *OrderClient) Interceptors() []Interceptor {
	return c.inters.Order
}

func (c *OrderClient) mutate(ctx context.Context, m *OrderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Order mutation op: %q", m.Op())
	}
}

// PaymentClient is a client for the Payment schema.
type PaymentClient struct {
	config
}

// NewPaymentClient returns a client for the Payment from the given config.
func NewPaymentClient(c config) *PaymentClient {
	return &PaymentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `payment.Hooks(f(g(h())))`.
func (c *PaymentClient) Use(hooks ...Hook) {
	c.hooks.Payment = append(c.hooks.Payment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `payment.Intercept(f(g(h())))`.
func (c *PaymentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Payment = append(c.inters.Payment, interceptors...)
}

// Create returns a builder for creating a Payment entity.
func (c *PaymentClient) Create() *PaymentCreate {
	mutation := newPaymentMutation(c.config, OpCreate)
	return &PaymentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Payment entities.
func (c *PaymentClient) CreateBulk(builders ...*PaymentCreate) *PaymentCreateBulk {
	return &PaymentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PaymentClient) MapCreateBulk(slice any, setFunc func(*PaymentCreate, int)) *PaymentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PaymentCreateBulk{err: fmt.Errorf("calling to PaymentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PaymentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PaymentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Payment.
func (c *PaymentClient) Update() *PaymentUpdate {
	mutation := newPaymentMutation(c.config, OpUpdate)
	return &PaymentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentClient) UpdateOne(pa *Payment) *PaymentUpdateOne {
	mutation := newPaymentMutation(c.config, OpUpdateOne, withPayment(pa))
	return &PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentClient) UpdateOneID(id string) *PaymentUpdateOne {
	mutation := newPaymentMutation(c.config, OpUpdateOne, withPaymentID(id))
	return &PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Payment.
func (c *PaymentClient) Delete() *PaymentDelete {
	mutation := newPaymentMutation(c.config, OpDelete)
	return &PaymentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaymentClient) DeleteOne(pa *Payment) *PaymentDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PaymentClient) DeleteOneID(id string) *PaymentDeleteOne {
	builder := c.Delete().Where(payment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentDeleteOne{builder}
}

// Query returns a query builder for Payment.
func (c *PaymentClient) Query() *PaymentQuery {
	return &PaymentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePayment},
		inters: c.Interceptors(),
	}
}

// Get returns a Payment entity by its id.
func (c *PaymentClient) Get(ctx context.Context, id string) (*Payment, error) {
	return c.Query().Where(payment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentClient) GetX(ctx context.Context, id string) *Payment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAttempts queries the attempts edge of a Payment.
func (c *PaymentClient) QueryAttempts(pa *Payment) *PaymentAttemptQuery {
	query := (&PaymentAttemptClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(payment.Table, payment.FieldID, id),
			sqlgraph.To(paymentattempt.Table, paymentattempt.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, payment.AttemptsTable, payment.AttemptsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PaymentClient) Hooks() []Hook {
	return c.hooks.Payment
}

// Interceptors returns the client interceptors.
func (c *PaymentClient) Interceptors() []Interceptor {
	return c.inters.Payment
}

func (c *PaymentClient) mutate(ctx context.Context, m *PaymentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PaymentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PaymentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PaymentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Payment mutation op: %q", m.Op())
	}
}

// PaymentAttemptClient is a client for the PaymentAttempt schema.
type PaymentAttemptClient struct {
	config
}

// NewPaymentAttemptClient returns a client for the PaymentAttempt from the given config.
func NewPaymentAttemptClient(c config) *PaymentAttemptClient {
	return &PaymentAttemptClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `paymentattempt.Hooks(f(g(h())))`.
func (c *PaymentAttemptClient) Use(hooks ...Hook) {
	c.hooks.PaymentAttempt = append(c.hooks.PaymentAttempt, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `paymentattempt.Intercept(f(g(h())))`.
func (c *PaymentAttemptClient) Intercept(interceptors ...Interceptor) {
	c.inters.PaymentAttempt = append(c.inters.PaymentAttempt, interceptors...)
}

// Create returns a builder for creating a PaymentAttempt entity.
func (c *PaymentAttemptClient) Create() *PaymentAttemptCreate {
	mutation := newPaymentAttemptMutation(c.config, OpCreate)
	return &PaymentAttemptCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PaymentAttempt entities.
func (c *PaymentAttemptClient) CreateBulk(builders ...*PaymentAttemptCreate) *PaymentAttemptCreateBulk {
	return &PaymentAttemptCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PaymentAttemptClient) MapCreateBulk(slice any, setFunc func(*PaymentAttemptCreate, int)) *PaymentAttemptCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PaymentAttemptCreateBulk{err: fmt.Errorf("calling to PaymentAttemptClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PaymentAttemptCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PaymentAttemptCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PaymentAttempt.
func (c *PaymentAttemptClient) Update() *PaymentAttemptUpdate {
	mutation := newPaymentAttemptMutation(c.config, OpUpdate)
	return &PaymentAttemptUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentAttemptClient) UpdateOne(pa *PaymentAttempt) *PaymentAttemptUpdateOne {
	mutation := newPaymentAttemptMutation(c.config, OpUpdateOne, withPaymentAttempt(pa))
	return &PaymentAttemptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentAttemptClient) UpdateOneID(id string) *PaymentAttemptUpdateOne {
	mutation := newPaymentAttemptMutation(c.config, OpUpdateOne, withPaymentAttemptID(id))
	return &PaymentAttemptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PaymentAttempt.
func (c *PaymentAttemptClient) Delete() *PaymentAttemptDelete {
	mutation := newPaymentAttemptMutation(c.config, OpDelete)
	return &PaymentAttemptDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaymentAttemptClient) DeleteOne(pa *PaymentAttempt) *PaymentAttemptDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PaymentAttemptClient) DeleteOneID(id string) *PaymentAttemptDeleteOne {
	builder := c.Delete().Where(paymentattempt.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentAttemptDeleteOne{builder}
}

// Query returns a query builder for PaymentAttempt.
func (c *PaymentAttemptClient) Query() *PaymentAttemptQuery {
	return &PaymentAttemptQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePaymentAttempt},
		inters: c.Interceptors(),
	}
}

// Get returns a PaymentAttempt entity by its id.
func (c *PaymentAttemptClient) Get(ctx context.Context, id string) (*PaymentAttempt, error) {
	return c.Query().Where(paymentattempt.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentAttemptClient) GetX(ctx context.Context, id string) *PaymentAttempt {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPayment queries the payment edge of a PaymentAttempt.
func (c *PaymentAttemptClient) QueryPayment(pa *PaymentAttempt) *PaymentQuery {
	query := (&PaymentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentattempt.Table, paymentattempt.FieldID, id),
			sqlgraph.To(payment.Table, payment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, paymentattempt.PaymentTable, paymentattempt.PaymentColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PaymentAttemptClient) Hooks() []Hook {
	return c.hooks.PaymentAttempt
}

// Interceptors returns the client interceptors.
func (c *PaymentAttemptClient) Interceptors() []Interceptor {
	return c.inters.PaymentAttempt
}

func (c *PaymentAttemptClient) mutate(ctx context.Context, m *PaymentAttemptMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PaymentAttemptCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PaymentAttemptUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PaymentAttemptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PaymentAttemptDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PaymentAttempt mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id string) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id string) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id string) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id string) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCarts queries the carts edge of a User.
func (c *UserClient) QueryCarts(u *User) *CartQuery {
	query := (&CartClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(cart.Table, cart.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CartsTable, user.CartsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Cart, CartLineItems, Category, Discount, FileUpload, Internship,
		InternshipBatch, InternshipEnrollment, Order, Payment, PaymentAttempt,
		User []ent.Hook
	}
	inters struct {
		Cart, CartLineItems, Category, Discount, FileUpload, Internship,
		InternshipBatch, InternshipEnrollment, Order, Payment, PaymentAttempt,
		User []ent.Interceptor
	}
)
