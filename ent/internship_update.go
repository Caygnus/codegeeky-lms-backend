// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/omkar273/codegeeky/ent/category"
	"github.com/omkar273/codegeeky/ent/internship"
	"github.com/omkar273/codegeeky/ent/predicate"
	"github.com/shopspring/decimal"
)

// InternshipUpdate is the builder for updating Internship entities.
type InternshipUpdate struct {
	config
	hooks    []Hook
	mutation *InternshipMutation
}

// Where appends a list predicates to the InternshipUpdate builder.
func (iu *InternshipUpdate) Where(ps ...predicate.Internship) *InternshipUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetTitle sets the "title" field.
func (iu *InternshipUpdate) SetTitle(s string) *InternshipUpdate {
	iu.mutation.SetTitle(s)
	return iu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (iu *InternshipUpdate) SetNillableTitle(s *string) *InternshipUpdate {
	if s != nil {
		iu.SetTitle(*s)
	}
	return iu
}

// SetDescription sets the "description" field.
func (iu *InternshipUpdate) SetDescription(s string) *InternshipUpdate {
	iu.mutation.SetDescription(s)
	return iu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iu *InternshipUpdate) SetNillableDescription(s *string) *InternshipUpdate {
	if s != nil {
		iu.SetDescription(*s)
	}
	return iu
}

// SetLookupKey sets the "lookup_key" field.
func (iu *InternshipUpdate) SetLookupKey(s string) *InternshipUpdate {
	iu.mutation.SetLookupKey(s)
	return iu
}

// SetNillableLookupKey sets the "lookup_key" field if the given value is not nil.
func (iu *InternshipUpdate) SetNillableLookupKey(s *string) *InternshipUpdate {
	if s != nil {
		iu.SetLookupKey(*s)
	}
	return iu
}

// SetSkills sets the "skills" field.
func (iu *InternshipUpdate) SetSkills(s []string) *InternshipUpdate {
	iu.mutation.SetSkills(s)
	return iu
}

// AppendSkills appends s to the "skills" field.
func (iu *InternshipUpdate) AppendSkills(s []string) *InternshipUpdate {
	iu.mutation.AppendSkills(s)
	return iu
}

// ClearSkills clears the value of the "skills" field.
func (iu *InternshipUpdate) ClearSkills() *InternshipUpdate {
	iu.mutation.ClearSkills()
	return iu
}

// SetLevel sets the "level" field.
func (iu *InternshipUpdate) SetLevel(s string) *InternshipUpdate {
	iu.mutation.SetLevel(s)
	return iu
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (iu *InternshipUpdate) SetNillableLevel(s *string) *InternshipUpdate {
	if s != nil {
		iu.SetLevel(*s)
	}
	return iu
}

// ClearLevel clears the value of the "level" field.
func (iu *InternshipUpdate) ClearLevel() *InternshipUpdate {
	iu.mutation.ClearLevel()
	return iu
}

// SetMode sets the "mode" field.
func (iu *InternshipUpdate) SetMode(s string) *InternshipUpdate {
	iu.mutation.SetMode(s)
	return iu
}

// SetNillableMode sets the "mode" field if the given value is not nil.
func (iu *InternshipUpdate) SetNillableMode(s *string) *InternshipUpdate {
	if s != nil {
		iu.SetMode(*s)
	}
	return iu
}

// SetDurationInWeeks sets the "duration_in_weeks" field.
func (iu *InternshipUpdate) SetDurationInWeeks(i int) *InternshipUpdate {
	iu.mutation.ResetDurationInWeeks()
	iu.mutation.SetDurationInWeeks(i)
	return iu
}

// SetNillableDurationInWeeks sets the "duration_in_weeks" field if the given value is not nil.
func (iu *InternshipUpdate) SetNillableDurationInWeeks(i *int) *InternshipUpdate {
	if i != nil {
		iu.SetDurationInWeeks(*i)
	}
	return iu
}

// AddDurationInWeeks adds i to the "duration_in_weeks" field.
func (iu *InternshipUpdate) AddDurationInWeeks(i int) *InternshipUpdate {
	iu.mutation.AddDurationInWeeks(i)
	return iu
}

// ClearDurationInWeeks clears the value of the "duration_in_weeks" field.
func (iu *InternshipUpdate) ClearDurationInWeeks() *InternshipUpdate {
	iu.mutation.ClearDurationInWeeks()
	return iu
}

// SetLearningOutcomes sets the "learning_outcomes" field.
func (iu *InternshipUpdate) SetLearningOutcomes(s []string) *InternshipUpdate {
	iu.mutation.SetLearningOutcomes(s)
	return iu
}

// AppendLearningOutcomes appends s to the "learning_outcomes" field.
func (iu *InternshipUpdate) AppendLearningOutcomes(s []string) *InternshipUpdate {
	iu.mutation.AppendLearningOutcomes(s)
	return iu
}

// ClearLearningOutcomes clears the value of the "learning_outcomes" field.
func (iu *InternshipUpdate) ClearLearningOutcomes() *InternshipUpdate {
	iu.mutation.ClearLearningOutcomes()
	return iu
}

// SetPrerequisites sets the "prerequisites" field.
func (iu *InternshipUpdate) SetPrerequisites(s []string) *InternshipUpdate {
	iu.mutation.SetPrerequisites(s)
	return iu
}

// AppendPrerequisites appends s to the "prerequisites" field.
func (iu *InternshipUpdate) AppendPrerequisites(s []string) *InternshipUpdate {
	iu.mutation.AppendPrerequisites(s)
	return iu
}

// ClearPrerequisites clears the value of the "prerequisites" field.
func (iu *InternshipUpdate) ClearPrerequisites() *InternshipUpdate {
	iu.mutation.ClearPrerequisites()
	return iu
}

// SetBenefits sets the "benefits" field.
func (iu *InternshipUpdate) SetBenefits(s []string) *InternshipUpdate {
	iu.mutation.SetBenefits(s)
	return iu
}

// AppendBenefits appends s to the "benefits" field.
func (iu *InternshipUpdate) AppendBenefits(s []string) *InternshipUpdate {
	iu.mutation.AppendBenefits(s)
	return iu
}

// ClearBenefits clears the value of the "benefits" field.
func (iu *InternshipUpdate) ClearBenefits() *InternshipUpdate {
	iu.mutation.ClearBenefits()
	return iu
}

// SetCurrency sets the "currency" field.
func (iu *InternshipUpdate) SetCurrency(s string) *InternshipUpdate {
	iu.mutation.SetCurrency(s)
	return iu
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (iu *InternshipUpdate) SetNillableCurrency(s *string) *InternshipUpdate {
	if s != nil {
		iu.SetCurrency(*s)
	}
	return iu
}

// ClearCurrency clears the value of the "currency" field.
func (iu *InternshipUpdate) ClearCurrency() *InternshipUpdate {
	iu.mutation.ClearCurrency()
	return iu
}

// SetPrice sets the "price" field.
func (iu *InternshipUpdate) SetPrice(d decimal.Decimal) *InternshipUpdate {
	iu.mutation.SetPrice(d)
	return iu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (iu *InternshipUpdate) SetNillablePrice(d *decimal.Decimal) *InternshipUpdate {
	if d != nil {
		iu.SetPrice(*d)
	}
	return iu
}

// ClearPrice clears the value of the "price" field.
func (iu *InternshipUpdate) ClearPrice() *InternshipUpdate {
	iu.mutation.ClearPrice()
	return iu
}

// SetFlatDiscount sets the "flat_discount" field.
func (iu *InternshipUpdate) SetFlatDiscount(d decimal.Decimal) *InternshipUpdate {
	iu.mutation.SetFlatDiscount(d)
	return iu
}

// SetNillableFlatDiscount sets the "flat_discount" field if the given value is not nil.
func (iu *InternshipUpdate) SetNillableFlatDiscount(d *decimal.Decimal) *InternshipUpdate {
	if d != nil {
		iu.SetFlatDiscount(*d)
	}
	return iu
}

// ClearFlatDiscount clears the value of the "flat_discount" field.
func (iu *InternshipUpdate) ClearFlatDiscount() *InternshipUpdate {
	iu.mutation.ClearFlatDiscount()
	return iu
}

// SetPercentageDiscount sets the "percentage_discount" field.
func (iu *InternshipUpdate) SetPercentageDiscount(d decimal.Decimal) *InternshipUpdate {
	iu.mutation.SetPercentageDiscount(d)
	return iu
}

// SetNillablePercentageDiscount sets the "percentage_discount" field if the given value is not nil.
func (iu *InternshipUpdate) SetNillablePercentageDiscount(d *decimal.Decimal) *InternshipUpdate {
	if d != nil {
		iu.SetPercentageDiscount(*d)
	}
	return iu
}

// ClearPercentageDiscount clears the value of the "percentage_discount" field.
func (iu *InternshipUpdate) ClearPercentageDiscount() *InternshipUpdate {
	iu.mutation.ClearPercentageDiscount()
	return iu
}

// AddCategoryIDs adds the "categories" edge to the Category entity by IDs.
func (iu *InternshipUpdate) AddCategoryIDs(ids ...string) *InternshipUpdate {
	iu.mutation.AddCategoryIDs(ids...)
	return iu
}

// AddCategories adds the "categories" edges to the Category entity.
func (iu *InternshipUpdate) AddCategories(c ...*Category) *InternshipUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iu.AddCategoryIDs(ids...)
}

// Mutation returns the InternshipMutation object of the builder.
func (iu *InternshipUpdate) Mutation() *InternshipMutation {
	return iu.mutation
}

// ClearCategories clears all "categories" edges to the Category entity.
func (iu *InternshipUpdate) ClearCategories() *InternshipUpdate {
	iu.mutation.ClearCategories()
	return iu
}

// RemoveCategoryIDs removes the "categories" edge to Category entities by IDs.
func (iu *InternshipUpdate) RemoveCategoryIDs(ids ...string) *InternshipUpdate {
	iu.mutation.RemoveCategoryIDs(ids...)
	return iu
}

// RemoveCategories removes "categories" edges to Category entities.
func (iu *InternshipUpdate) RemoveCategories(c ...*Category) *InternshipUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iu.RemoveCategoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InternshipUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InternshipUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InternshipUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InternshipUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *InternshipUpdate) check() error {
	if v, ok := iu.mutation.Title(); ok {
		if err := internship.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Internship.title": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Description(); ok {
		if err := internship.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Internship.description": %w`, err)}
		}
	}
	if v, ok := iu.mutation.LookupKey(); ok {
		if err := internship.LookupKeyValidator(v); err != nil {
			return &ValidationError{Name: "lookup_key", err: fmt.Errorf(`ent: validator failed for field "Internship.lookup_key": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Mode(); ok {
		if err := internship.ModeValidator(v); err != nil {
			return &ValidationError{Name: "mode", err: fmt.Errorf(`ent: validator failed for field "Internship.mode": %w`, err)}
		}
	}
	return nil
}

func (iu *InternshipUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(internship.Table, internship.Columns, sqlgraph.NewFieldSpec(internship.FieldID, field.TypeString))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Title(); ok {
		_spec.SetField(internship.FieldTitle, field.TypeString, value)
	}
	if value, ok := iu.mutation.Description(); ok {
		_spec.SetField(internship.FieldDescription, field.TypeString, value)
	}
	if value, ok := iu.mutation.LookupKey(); ok {
		_spec.SetField(internship.FieldLookupKey, field.TypeString, value)
	}
	if value, ok := iu.mutation.Skills(); ok {
		_spec.SetField(internship.FieldSkills, field.TypeJSON, value)
	}
	if value, ok := iu.mutation.AppendedSkills(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internship.FieldSkills, value)
		})
	}
	if iu.mutation.SkillsCleared() {
		_spec.ClearField(internship.FieldSkills, field.TypeJSON)
	}
	if value, ok := iu.mutation.Level(); ok {
		_spec.SetField(internship.FieldLevel, field.TypeString, value)
	}
	if iu.mutation.LevelCleared() {
		_spec.ClearField(internship.FieldLevel, field.TypeString)
	}
	if value, ok := iu.mutation.Mode(); ok {
		_spec.SetField(internship.FieldMode, field.TypeString, value)
	}
	if value, ok := iu.mutation.DurationInWeeks(); ok {
		_spec.SetField(internship.FieldDurationInWeeks, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedDurationInWeeks(); ok {
		_spec.AddField(internship.FieldDurationInWeeks, field.TypeInt, value)
	}
	if iu.mutation.DurationInWeeksCleared() {
		_spec.ClearField(internship.FieldDurationInWeeks, field.TypeInt)
	}
	if value, ok := iu.mutation.LearningOutcomes(); ok {
		_spec.SetField(internship.FieldLearningOutcomes, field.TypeJSON, value)
	}
	if value, ok := iu.mutation.AppendedLearningOutcomes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internship.FieldLearningOutcomes, value)
		})
	}
	if iu.mutation.LearningOutcomesCleared() {
		_spec.ClearField(internship.FieldLearningOutcomes, field.TypeJSON)
	}
	if value, ok := iu.mutation.Prerequisites(); ok {
		_spec.SetField(internship.FieldPrerequisites, field.TypeJSON, value)
	}
	if value, ok := iu.mutation.AppendedPrerequisites(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internship.FieldPrerequisites, value)
		})
	}
	if iu.mutation.PrerequisitesCleared() {
		_spec.ClearField(internship.FieldPrerequisites, field.TypeJSON)
	}
	if value, ok := iu.mutation.Benefits(); ok {
		_spec.SetField(internship.FieldBenefits, field.TypeJSON, value)
	}
	if value, ok := iu.mutation.AppendedBenefits(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internship.FieldBenefits, value)
		})
	}
	if iu.mutation.BenefitsCleared() {
		_spec.ClearField(internship.FieldBenefits, field.TypeJSON)
	}
	if value, ok := iu.mutation.Currency(); ok {
		_spec.SetField(internship.FieldCurrency, field.TypeString, value)
	}
	if iu.mutation.CurrencyCleared() {
		_spec.ClearField(internship.FieldCurrency, field.TypeString)
	}
	if value, ok := iu.mutation.Price(); ok {
		_spec.SetField(internship.FieldPrice, field.TypeOther, value)
	}
	if iu.mutation.PriceCleared() {
		_spec.ClearField(internship.FieldPrice, field.TypeOther)
	}
	if value, ok := iu.mutation.FlatDiscount(); ok {
		_spec.SetField(internship.FieldFlatDiscount, field.TypeOther, value)
	}
	if iu.mutation.FlatDiscountCleared() {
		_spec.ClearField(internship.FieldFlatDiscount, field.TypeOther)
	}
	if value, ok := iu.mutation.PercentageDiscount(); ok {
		_spec.SetField(internship.FieldPercentageDiscount, field.TypeOther, value)
	}
	if iu.mutation.PercentageDiscountCleared() {
		_spec.ClearField(internship.FieldPercentageDiscount, field.TypeOther)
	}
	if iu.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internship.CategoriesTable,
			Columns: []string{internship.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !iu.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internship.CategoriesTable,
			Columns: []string{internship.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internship.CategoriesTable,
			Columns: []string{internship.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{internship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// InternshipUpdateOne is the builder for updating a single Internship entity.
type InternshipUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InternshipMutation
}

// SetTitle sets the "title" field.
func (iuo *InternshipUpdateOne) SetTitle(s string) *InternshipUpdateOne {
	iuo.mutation.SetTitle(s)
	return iuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (iuo *InternshipUpdateOne) SetNillableTitle(s *string) *InternshipUpdateOne {
	if s != nil {
		iuo.SetTitle(*s)
	}
	return iuo
}

// SetDescription sets the "description" field.
func (iuo *InternshipUpdateOne) SetDescription(s string) *InternshipUpdateOne {
	iuo.mutation.SetDescription(s)
	return iuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iuo *InternshipUpdateOne) SetNillableDescription(s *string) *InternshipUpdateOne {
	if s != nil {
		iuo.SetDescription(*s)
	}
	return iuo
}

// SetLookupKey sets the "lookup_key" field.
func (iuo *InternshipUpdateOne) SetLookupKey(s string) *InternshipUpdateOne {
	iuo.mutation.SetLookupKey(s)
	return iuo
}

// SetNillableLookupKey sets the "lookup_key" field if the given value is not nil.
func (iuo *InternshipUpdateOne) SetNillableLookupKey(s *string) *InternshipUpdateOne {
	if s != nil {
		iuo.SetLookupKey(*s)
	}
	return iuo
}

// SetSkills sets the "skills" field.
func (iuo *InternshipUpdateOne) SetSkills(s []string) *InternshipUpdateOne {
	iuo.mutation.SetSkills(s)
	return iuo
}

// AppendSkills appends s to the "skills" field.
func (iuo *InternshipUpdateOne) AppendSkills(s []string) *InternshipUpdateOne {
	iuo.mutation.AppendSkills(s)
	return iuo
}

// ClearSkills clears the value of the "skills" field.
func (iuo *InternshipUpdateOne) ClearSkills() *InternshipUpdateOne {
	iuo.mutation.ClearSkills()
	return iuo
}

// SetLevel sets the "level" field.
func (iuo *InternshipUpdateOne) SetLevel(s string) *InternshipUpdateOne {
	iuo.mutation.SetLevel(s)
	return iuo
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (iuo *InternshipUpdateOne) SetNillableLevel(s *string) *InternshipUpdateOne {
	if s != nil {
		iuo.SetLevel(*s)
	}
	return iuo
}

// ClearLevel clears the value of the "level" field.
func (iuo *InternshipUpdateOne) ClearLevel() *InternshipUpdateOne {
	iuo.mutation.ClearLevel()
	return iuo
}

// SetMode sets the "mode" field.
func (iuo *InternshipUpdateOne) SetMode(s string) *InternshipUpdateOne {
	iuo.mutation.SetMode(s)
	return iuo
}

// SetNillableMode sets the "mode" field if the given value is not nil.
func (iuo *InternshipUpdateOne) SetNillableMode(s *string) *InternshipUpdateOne {
	if s != nil {
		iuo.SetMode(*s)
	}
	return iuo
}

// SetDurationInWeeks sets the "duration_in_weeks" field.
func (iuo *InternshipUpdateOne) SetDurationInWeeks(i int) *InternshipUpdateOne {
	iuo.mutation.ResetDurationInWeeks()
	iuo.mutation.SetDurationInWeeks(i)
	return iuo
}

// SetNillableDurationInWeeks sets the "duration_in_weeks" field if the given value is not nil.
func (iuo *InternshipUpdateOne) SetNillableDurationInWeeks(i *int) *InternshipUpdateOne {
	if i != nil {
		iuo.SetDurationInWeeks(*i)
	}
	return iuo
}

// AddDurationInWeeks adds i to the "duration_in_weeks" field.
func (iuo *InternshipUpdateOne) AddDurationInWeeks(i int) *InternshipUpdateOne {
	iuo.mutation.AddDurationInWeeks(i)
	return iuo
}

// ClearDurationInWeeks clears the value of the "duration_in_weeks" field.
func (iuo *InternshipUpdateOne) ClearDurationInWeeks() *InternshipUpdateOne {
	iuo.mutation.ClearDurationInWeeks()
	return iuo
}

// SetLearningOutcomes sets the "learning_outcomes" field.
func (iuo *InternshipUpdateOne) SetLearningOutcomes(s []string) *InternshipUpdateOne {
	iuo.mutation.SetLearningOutcomes(s)
	return iuo
}

// AppendLearningOutcomes appends s to the "learning_outcomes" field.
func (iuo *InternshipUpdateOne) AppendLearningOutcomes(s []string) *InternshipUpdateOne {
	iuo.mutation.AppendLearningOutcomes(s)
	return iuo
}

// ClearLearningOutcomes clears the value of the "learning_outcomes" field.
func (iuo *InternshipUpdateOne) ClearLearningOutcomes() *InternshipUpdateOne {
	iuo.mutation.ClearLearningOutcomes()
	return iuo
}

// SetPrerequisites sets the "prerequisites" field.
func (iuo *InternshipUpdateOne) SetPrerequisites(s []string) *InternshipUpdateOne {
	iuo.mutation.SetPrerequisites(s)
	return iuo
}

// AppendPrerequisites appends s to the "prerequisites" field.
func (iuo *InternshipUpdateOne) AppendPrerequisites(s []string) *InternshipUpdateOne {
	iuo.mutation.AppendPrerequisites(s)
	return iuo
}

// ClearPrerequisites clears the value of the "prerequisites" field.
func (iuo *InternshipUpdateOne) ClearPrerequisites() *InternshipUpdateOne {
	iuo.mutation.ClearPrerequisites()
	return iuo
}

// SetBenefits sets the "benefits" field.
func (iuo *InternshipUpdateOne) SetBenefits(s []string) *InternshipUpdateOne {
	iuo.mutation.SetBenefits(s)
	return iuo
}

// AppendBenefits appends s to the "benefits" field.
func (iuo *InternshipUpdateOne) AppendBenefits(s []string) *InternshipUpdateOne {
	iuo.mutation.AppendBenefits(s)
	return iuo
}

// ClearBenefits clears the value of the "benefits" field.
func (iuo *InternshipUpdateOne) ClearBenefits() *InternshipUpdateOne {
	iuo.mutation.ClearBenefits()
	return iuo
}

// SetCurrency sets the "currency" field.
func (iuo *InternshipUpdateOne) SetCurrency(s string) *InternshipUpdateOne {
	iuo.mutation.SetCurrency(s)
	return iuo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (iuo *InternshipUpdateOne) SetNillableCurrency(s *string) *InternshipUpdateOne {
	if s != nil {
		iuo.SetCurrency(*s)
	}
	return iuo
}

// ClearCurrency clears the value of the "currency" field.
func (iuo *InternshipUpdateOne) ClearCurrency() *InternshipUpdateOne {
	iuo.mutation.ClearCurrency()
	return iuo
}

// SetPrice sets the "price" field.
func (iuo *InternshipUpdateOne) SetPrice(d decimal.Decimal) *InternshipUpdateOne {
	iuo.mutation.SetPrice(d)
	return iuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (iuo *InternshipUpdateOne) SetNillablePrice(d *decimal.Decimal) *InternshipUpdateOne {
	if d != nil {
		iuo.SetPrice(*d)
	}
	return iuo
}

// ClearPrice clears the value of the "price" field.
func (iuo *InternshipUpdateOne) ClearPrice() *InternshipUpdateOne {
	iuo.mutation.ClearPrice()
	return iuo
}

// SetFlatDiscount sets the "flat_discount" field.
func (iuo *InternshipUpdateOne) SetFlatDiscount(d decimal.Decimal) *InternshipUpdateOne {
	iuo.mutation.SetFlatDiscount(d)
	return iuo
}

// SetNillableFlatDiscount sets the "flat_discount" field if the given value is not nil.
func (iuo *InternshipUpdateOne) SetNillableFlatDiscount(d *decimal.Decimal) *InternshipUpdateOne {
	if d != nil {
		iuo.SetFlatDiscount(*d)
	}
	return iuo
}

// ClearFlatDiscount clears the value of the "flat_discount" field.
func (iuo *InternshipUpdateOne) ClearFlatDiscount() *InternshipUpdateOne {
	iuo.mutation.ClearFlatDiscount()
	return iuo
}

// SetPercentageDiscount sets the "percentage_discount" field.
func (iuo *InternshipUpdateOne) SetPercentageDiscount(d decimal.Decimal) *InternshipUpdateOne {
	iuo.mutation.SetPercentageDiscount(d)
	return iuo
}

// SetNillablePercentageDiscount sets the "percentage_discount" field if the given value is not nil.
func (iuo *InternshipUpdateOne) SetNillablePercentageDiscount(d *decimal.Decimal) *InternshipUpdateOne {
	if d != nil {
		iuo.SetPercentageDiscount(*d)
	}
	return iuo
}

// ClearPercentageDiscount clears the value of the "percentage_discount" field.
func (iuo *InternshipUpdateOne) ClearPercentageDiscount() *InternshipUpdateOne {
	iuo.mutation.ClearPercentageDiscount()
	return iuo
}

// AddCategoryIDs adds the "categories" edge to the Category entity by IDs.
func (iuo *InternshipUpdateOne) AddCategoryIDs(ids ...string) *InternshipUpdateOne {
	iuo.mutation.AddCategoryIDs(ids...)
	return iuo
}

// AddCategories adds the "categories" edges to the Category entity.
func (iuo *InternshipUpdateOne) AddCategories(c ...*Category) *InternshipUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iuo.AddCategoryIDs(ids...)
}

// Mutation returns the InternshipMutation object of the builder.
func (iuo *InternshipUpdateOne) Mutation() *InternshipMutation {
	return iuo.mutation
}

// ClearCategories clears all "categories" edges to the Category entity.
func (iuo *InternshipUpdateOne) ClearCategories() *InternshipUpdateOne {
	iuo.mutation.ClearCategories()
	return iuo
}

// RemoveCategoryIDs removes the "categories" edge to Category entities by IDs.
func (iuo *InternshipUpdateOne) RemoveCategoryIDs(ids ...string) *InternshipUpdateOne {
	iuo.mutation.RemoveCategoryIDs(ids...)
	return iuo
}

// RemoveCategories removes "categories" edges to Category entities.
func (iuo *InternshipUpdateOne) RemoveCategories(c ...*Category) *InternshipUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iuo.RemoveCategoryIDs(ids...)
}

// Where appends a list predicates to the InternshipUpdate builder.
func (iuo *InternshipUpdateOne) Where(ps ...predicate.Internship) *InternshipUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InternshipUpdateOne) Select(field string, fields ...string) *InternshipUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Internship entity.
func (iuo *InternshipUpdateOne) Save(ctx context.Context) (*Internship, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InternshipUpdateOne) SaveX(ctx context.Context) *Internship {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InternshipUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InternshipUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *InternshipUpdateOne) check() error {
	if v, ok := iuo.mutation.Title(); ok {
		if err := internship.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Internship.title": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Description(); ok {
		if err := internship.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Internship.description": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.LookupKey(); ok {
		if err := internship.LookupKeyValidator(v); err != nil {
			return &ValidationError{Name: "lookup_key", err: fmt.Errorf(`ent: validator failed for field "Internship.lookup_key": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Mode(); ok {
		if err := internship.ModeValidator(v); err != nil {
			return &ValidationError{Name: "mode", err: fmt.Errorf(`ent: validator failed for field "Internship.mode": %w`, err)}
		}
	}
	return nil
}

func (iuo *InternshipUpdateOne) sqlSave(ctx context.Context) (_node *Internship, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(internship.Table, internship.Columns, sqlgraph.NewFieldSpec(internship.FieldID, field.TypeString))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Internship.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, internship.FieldID)
		for _, f := range fields {
			if !internship.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != internship.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Title(); ok {
		_spec.SetField(internship.FieldTitle, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Description(); ok {
		_spec.SetField(internship.FieldDescription, field.TypeString, value)
	}
	if value, ok := iuo.mutation.LookupKey(); ok {
		_spec.SetField(internship.FieldLookupKey, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Skills(); ok {
		_spec.SetField(internship.FieldSkills, field.TypeJSON, value)
	}
	if value, ok := iuo.mutation.AppendedSkills(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internship.FieldSkills, value)
		})
	}
	if iuo.mutation.SkillsCleared() {
		_spec.ClearField(internship.FieldSkills, field.TypeJSON)
	}
	if value, ok := iuo.mutation.Level(); ok {
		_spec.SetField(internship.FieldLevel, field.TypeString, value)
	}
	if iuo.mutation.LevelCleared() {
		_spec.ClearField(internship.FieldLevel, field.TypeString)
	}
	if value, ok := iuo.mutation.Mode(); ok {
		_spec.SetField(internship.FieldMode, field.TypeString, value)
	}
	if value, ok := iuo.mutation.DurationInWeeks(); ok {
		_spec.SetField(internship.FieldDurationInWeeks, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedDurationInWeeks(); ok {
		_spec.AddField(internship.FieldDurationInWeeks, field.TypeInt, value)
	}
	if iuo.mutation.DurationInWeeksCleared() {
		_spec.ClearField(internship.FieldDurationInWeeks, field.TypeInt)
	}
	if value, ok := iuo.mutation.LearningOutcomes(); ok {
		_spec.SetField(internship.FieldLearningOutcomes, field.TypeJSON, value)
	}
	if value, ok := iuo.mutation.AppendedLearningOutcomes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internship.FieldLearningOutcomes, value)
		})
	}
	if iuo.mutation.LearningOutcomesCleared() {
		_spec.ClearField(internship.FieldLearningOutcomes, field.TypeJSON)
	}
	if value, ok := iuo.mutation.Prerequisites(); ok {
		_spec.SetField(internship.FieldPrerequisites, field.TypeJSON, value)
	}
	if value, ok := iuo.mutation.AppendedPrerequisites(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internship.FieldPrerequisites, value)
		})
	}
	if iuo.mutation.PrerequisitesCleared() {
		_spec.ClearField(internship.FieldPrerequisites, field.TypeJSON)
	}
	if value, ok := iuo.mutation.Benefits(); ok {
		_spec.SetField(internship.FieldBenefits, field.TypeJSON, value)
	}
	if value, ok := iuo.mutation.AppendedBenefits(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internship.FieldBenefits, value)
		})
	}
	if iuo.mutation.BenefitsCleared() {
		_spec.ClearField(internship.FieldBenefits, field.TypeJSON)
	}
	if value, ok := iuo.mutation.Currency(); ok {
		_spec.SetField(internship.FieldCurrency, field.TypeString, value)
	}
	if iuo.mutation.CurrencyCleared() {
		_spec.ClearField(internship.FieldCurrency, field.TypeString)
	}
	if value, ok := iuo.mutation.Price(); ok {
		_spec.SetField(internship.FieldPrice, field.TypeOther, value)
	}
	if iuo.mutation.PriceCleared() {
		_spec.ClearField(internship.FieldPrice, field.TypeOther)
	}
	if value, ok := iuo.mutation.FlatDiscount(); ok {
		_spec.SetField(internship.FieldFlatDiscount, field.TypeOther, value)
	}
	if iuo.mutation.FlatDiscountCleared() {
		_spec.ClearField(internship.FieldFlatDiscount, field.TypeOther)
	}
	if value, ok := iuo.mutation.PercentageDiscount(); ok {
		_spec.SetField(internship.FieldPercentageDiscount, field.TypeOther, value)
	}
	if iuo.mutation.PercentageDiscountCleared() {
		_spec.ClearField(internship.FieldPercentageDiscount, field.TypeOther)
	}
	if iuo.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internship.CategoriesTable,
			Columns: []string{internship.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !iuo.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internship.CategoriesTable,
			Columns: []string{internship.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internship.CategoriesTable,
			Columns: []string{internship.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Internship{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{internship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
