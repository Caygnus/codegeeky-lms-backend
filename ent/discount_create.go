// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/omkar273/codegeeky/ent/discount"
	"github.com/omkar273/codegeeky/internal/types"
	"github.com/shopspring/decimal"
)

// DiscountCreate is the builder for creating a Discount entity.
type DiscountCreate struct {
	config
	mutation *DiscountMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (dc *DiscountCreate) SetStatus(s string) *DiscountCreate {
	dc.mutation.SetStatus(s)
	return dc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dc *DiscountCreate) SetNillableStatus(s *string) *DiscountCreate {
	if s != nil {
		dc.SetStatus(*s)
	}
	return dc
}

// SetCreatedAt sets the "created_at" field.
func (dc *DiscountCreate) SetCreatedAt(t time.Time) *DiscountCreate {
	dc.mutation.SetCreatedAt(t)
	return dc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dc *DiscountCreate) SetNillableCreatedAt(t *time.Time) *DiscountCreate {
	if t != nil {
		dc.SetCreatedAt(*t)
	}
	return dc
}

// SetUpdatedAt sets the "updated_at" field.
func (dc *DiscountCreate) SetUpdatedAt(t time.Time) *DiscountCreate {
	dc.mutation.SetUpdatedAt(t)
	return dc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dc *DiscountCreate) SetNillableUpdatedAt(t *time.Time) *DiscountCreate {
	if t != nil {
		dc.SetUpdatedAt(*t)
	}
	return dc
}

// SetCreatedBy sets the "created_by" field.
func (dc *DiscountCreate) SetCreatedBy(s string) *DiscountCreate {
	dc.mutation.SetCreatedBy(s)
	return dc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (dc *DiscountCreate) SetNillableCreatedBy(s *string) *DiscountCreate {
	if s != nil {
		dc.SetCreatedBy(*s)
	}
	return dc
}

// SetUpdatedBy sets the "updated_by" field.
func (dc *DiscountCreate) SetUpdatedBy(s string) *DiscountCreate {
	dc.mutation.SetUpdatedBy(s)
	return dc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dc *DiscountCreate) SetNillableUpdatedBy(s *string) *DiscountCreate {
	if s != nil {
		dc.SetUpdatedBy(*s)
	}
	return dc
}

// SetCode sets the "code" field.
func (dc *DiscountCreate) SetCode(s string) *DiscountCreate {
	dc.mutation.SetCode(s)
	return dc
}

// SetDescription sets the "description" field.
func (dc *DiscountCreate) SetDescription(s string) *DiscountCreate {
	dc.mutation.SetDescription(s)
	return dc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dc *DiscountCreate) SetNillableDescription(s *string) *DiscountCreate {
	if s != nil {
		dc.SetDescription(*s)
	}
	return dc
}

// SetDiscountType sets the "discount_type" field.
func (dc *DiscountCreate) SetDiscountType(tt types.DiscountType) *DiscountCreate {
	dc.mutation.SetDiscountType(tt)
	return dc
}

// SetNillableDiscountType sets the "discount_type" field if the given value is not nil.
func (dc *DiscountCreate) SetNillableDiscountType(tt *types.DiscountType) *DiscountCreate {
	if tt != nil {
		dc.SetDiscountType(*tt)
	}
	return dc
}

// SetDiscountValue sets the "discount_value" field.
func (dc *DiscountCreate) SetDiscountValue(d decimal.Decimal) *DiscountCreate {
	dc.mutation.SetDiscountValue(d)
	return dc
}

// SetNillableDiscountValue sets the "discount_value" field if the given value is not nil.
func (dc *DiscountCreate) SetNillableDiscountValue(d *decimal.Decimal) *DiscountCreate {
	if d != nil {
		dc.SetDiscountValue(*d)
	}
	return dc
}

// SetValidFrom sets the "valid_from" field.
func (dc *DiscountCreate) SetValidFrom(t time.Time) *DiscountCreate {
	dc.mutation.SetValidFrom(t)
	return dc
}

// SetNillableValidFrom sets the "valid_from" field if the given value is not nil.
func (dc *DiscountCreate) SetNillableValidFrom(t *time.Time) *DiscountCreate {
	if t != nil {
		dc.SetValidFrom(*t)
	}
	return dc
}

// SetValidUntil sets the "valid_until" field.
func (dc *DiscountCreate) SetValidUntil(t time.Time) *DiscountCreate {
	dc.mutation.SetValidUntil(t)
	return dc
}

// SetNillableValidUntil sets the "valid_until" field if the given value is not nil.
func (dc *DiscountCreate) SetNillableValidUntil(t *time.Time) *DiscountCreate {
	if t != nil {
		dc.SetValidUntil(*t)
	}
	return dc
}

// SetIsActive sets the "is_active" field.
func (dc *DiscountCreate) SetIsActive(b bool) *DiscountCreate {
	dc.mutation.SetIsActive(b)
	return dc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (dc *DiscountCreate) SetNillableIsActive(b *bool) *DiscountCreate {
	if b != nil {
		dc.SetIsActive(*b)
	}
	return dc
}

// SetMaxUses sets the "max_uses" field.
func (dc *DiscountCreate) SetMaxUses(i int) *DiscountCreate {
	dc.mutation.SetMaxUses(i)
	return dc
}

// SetNillableMaxUses sets the "max_uses" field if the given value is not nil.
func (dc *DiscountCreate) SetNillableMaxUses(i *int) *DiscountCreate {
	if i != nil {
		dc.SetMaxUses(*i)
	}
	return dc
}

// SetMinOrderValue sets the "min_order_value" field.
func (dc *DiscountCreate) SetMinOrderValue(d decimal.Decimal) *DiscountCreate {
	dc.mutation.SetMinOrderValue(d)
	return dc
}

// SetNillableMinOrderValue sets the "min_order_value" field if the given value is not nil.
func (dc *DiscountCreate) SetNillableMinOrderValue(d *decimal.Decimal) *DiscountCreate {
	if d != nil {
		dc.SetMinOrderValue(*d)
	}
	return dc
}

// SetIsCombinable sets the "is_combinable" field.
func (dc *DiscountCreate) SetIsCombinable(b bool) *DiscountCreate {
	dc.mutation.SetIsCombinable(b)
	return dc
}

// SetNillableIsCombinable sets the "is_combinable" field if the given value is not nil.
func (dc *DiscountCreate) SetNillableIsCombinable(b *bool) *DiscountCreate {
	if b != nil {
		dc.SetIsCombinable(*b)
	}
	return dc
}

// SetMetadata sets the "metadata" field.
func (dc *DiscountCreate) SetMetadata(m map[string]string) *DiscountCreate {
	dc.mutation.SetMetadata(m)
	return dc
}

// SetID sets the "id" field.
func (dc *DiscountCreate) SetID(s string) *DiscountCreate {
	dc.mutation.SetID(s)
	return dc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dc *DiscountCreate) SetNillableID(s *string) *DiscountCreate {
	if s != nil {
		dc.SetID(*s)
	}
	return dc
}

// Mutation returns the DiscountMutation object of the builder.
func (dc *DiscountCreate) Mutation() *DiscountMutation {
	return dc.mutation
}

// Save creates the Discount in the database.
func (dc *DiscountCreate) Save(ctx context.Context) (*Discount, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DiscountCreate) SaveX(ctx context.Context) *Discount {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DiscountCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DiscountCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DiscountCreate) defaults() {
	if _, ok := dc.mutation.Status(); !ok {
		v := discount.DefaultStatus
		dc.mutation.SetStatus(v)
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		v := discount.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		v := discount.DefaultUpdatedAt()
		dc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dc.mutation.DiscountType(); !ok {
		v := discount.DefaultDiscountType
		dc.mutation.SetDiscountType(v)
	}
	if _, ok := dc.mutation.DiscountValue(); !ok {
		v := discount.DefaultDiscountValue
		dc.mutation.SetDiscountValue(v)
	}
	if _, ok := dc.mutation.ValidFrom(); !ok {
		v := discount.DefaultValidFrom()
		dc.mutation.SetValidFrom(v)
	}
	if _, ok := dc.mutation.IsActive(); !ok {
		v := discount.DefaultIsActive
		dc.mutation.SetIsActive(v)
	}
	if _, ok := dc.mutation.IsCombinable(); !ok {
		v := discount.DefaultIsCombinable
		dc.mutation.SetIsCombinable(v)
	}
	if _, ok := dc.mutation.Metadata(); !ok {
		v := discount.DefaultMetadata
		dc.mutation.SetMetadata(v)
	}
	if _, ok := dc.mutation.ID(); !ok {
		v := discount.DefaultID()
		dc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DiscountCreate) check() error {
	if _, ok := dc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Discount.status"`)}
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Discount.created_at"`)}
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Discount.updated_at"`)}
	}
	if _, ok := dc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Discount.code"`)}
	}
	if v, ok := dc.mutation.Code(); ok {
		if err := discount.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Discount.code": %w`, err)}
		}
	}
	if _, ok := dc.mutation.DiscountType(); !ok {
		return &ValidationError{Name: "discount_type", err: errors.New(`ent: missing required field "Discount.discount_type"`)}
	}
	if v, ok := dc.mutation.DiscountType(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "discount_type", err: fmt.Errorf(`ent: validator failed for field "Discount.discount_type": %w`, err)}
		}
	}
	if _, ok := dc.mutation.DiscountValue(); !ok {
		return &ValidationError{Name: "discount_value", err: errors.New(`ent: missing required field "Discount.discount_value"`)}
	}
	if _, ok := dc.mutation.ValidFrom(); !ok {
		return &ValidationError{Name: "valid_from", err: errors.New(`ent: missing required field "Discount.valid_from"`)}
	}
	if _, ok := dc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "Discount.is_active"`)}
	}
	if _, ok := dc.mutation.IsCombinable(); !ok {
		return &ValidationError{Name: "is_combinable", err: errors.New(`ent: missing required field "Discount.is_combinable"`)}
	}
	return nil
}

func (dc *DiscountCreate) sqlSave(ctx context.Context) (*Discount, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Discount.ID type: %T", _spec.ID.Value)
		}
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DiscountCreate) createSpec() (*Discount, *sqlgraph.CreateSpec) {
	var (
		_node = &Discount{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(discount.Table, sqlgraph.NewFieldSpec(discount.FieldID, field.TypeString))
	)
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.Status(); ok {
		_spec.SetField(discount.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.SetField(discount.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.SetField(discount.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := dc.mutation.CreatedBy(); ok {
		_spec.SetField(discount.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := dc.mutation.UpdatedBy(); ok {
		_spec.SetField(discount.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := dc.mutation.Code(); ok {
		_spec.SetField(discount.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := dc.mutation.Description(); ok {
		_spec.SetField(discount.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := dc.mutation.DiscountType(); ok {
		_spec.SetField(discount.FieldDiscountType, field.TypeString, value)
		_node.DiscountType = value
	}
	if value, ok := dc.mutation.DiscountValue(); ok {
		_spec.SetField(discount.FieldDiscountValue, field.TypeOther, value)
		_node.DiscountValue = value
	}
	if value, ok := dc.mutation.ValidFrom(); ok {
		_spec.SetField(discount.FieldValidFrom, field.TypeTime, value)
		_node.ValidFrom = value
	}
	if value, ok := dc.mutation.ValidUntil(); ok {
		_spec.SetField(discount.FieldValidUntil, field.TypeTime, value)
		_node.ValidUntil = &value
	}
	if value, ok := dc.mutation.IsActive(); ok {
		_spec.SetField(discount.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := dc.mutation.MaxUses(); ok {
		_spec.SetField(discount.FieldMaxUses, field.TypeInt, value)
		_node.MaxUses = &value
	}
	if value, ok := dc.mutation.MinOrderValue(); ok {
		_spec.SetField(discount.FieldMinOrderValue, field.TypeOther, value)
		_node.MinOrderValue = &value
	}
	if value, ok := dc.mutation.IsCombinable(); ok {
		_spec.SetField(discount.FieldIsCombinable, field.TypeBool, value)
		_node.IsCombinable = value
	}
	if value, ok := dc.mutation.Metadata(); ok {
		_spec.SetField(discount.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	return _node, _spec
}

// DiscountCreateBulk is the builder for creating many Discount entities in bulk.
type DiscountCreateBulk struct {
	config
	err      error
	builders []*DiscountCreate
}

// Save creates the Discount entities in the database.
func (dcb *DiscountCreateBulk) Save(ctx context.Context) ([]*Discount, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Discount, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DiscountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DiscountCreateBulk) SaveX(ctx context.Context) []*Discount {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DiscountCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DiscountCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
