// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/omkar273/codegeeky/ent/cart"
	"github.com/omkar273/codegeeky/ent/cartlineitems"
	"github.com/omkar273/codegeeky/ent/user"
	"github.com/shopspring/decimal"
)

// CartCreate is the builder for creating a Cart entity.
type CartCreate struct {
	config
	mutation *CartMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (cc *CartCreate) SetStatus(s string) *CartCreate {
	cc.mutation.SetStatus(s)
	return cc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cc *CartCreate) SetNillableStatus(s *string) *CartCreate {
	if s != nil {
		cc.SetStatus(*s)
	}
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *CartCreate) SetCreatedAt(t time.Time) *CartCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CartCreate) SetNillableCreatedAt(t *time.Time) *CartCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CartCreate) SetUpdatedAt(t time.Time) *CartCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CartCreate) SetNillableUpdatedAt(t *time.Time) *CartCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetCreatedBy sets the "created_by" field.
func (cc *CartCreate) SetCreatedBy(s string) *CartCreate {
	cc.mutation.SetCreatedBy(s)
	return cc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cc *CartCreate) SetNillableCreatedBy(s *string) *CartCreate {
	if s != nil {
		cc.SetCreatedBy(*s)
	}
	return cc
}

// SetUpdatedBy sets the "updated_by" field.
func (cc *CartCreate) SetUpdatedBy(s string) *CartCreate {
	cc.mutation.SetUpdatedBy(s)
	return cc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cc *CartCreate) SetNillableUpdatedBy(s *string) *CartCreate {
	if s != nil {
		cc.SetUpdatedBy(*s)
	}
	return cc
}

// SetMetadata sets the "metadata" field.
func (cc *CartCreate) SetMetadata(m map[string]string) *CartCreate {
	cc.mutation.SetMetadata(m)
	return cc
}

// SetUserID sets the "user_id" field.
func (cc *CartCreate) SetUserID(s string) *CartCreate {
	cc.mutation.SetUserID(s)
	return cc
}

// SetType sets the "type" field.
func (cc *CartCreate) SetType(s string) *CartCreate {
	cc.mutation.SetType(s)
	return cc
}

// SetSubtotal sets the "subtotal" field.
func (cc *CartCreate) SetSubtotal(d decimal.Decimal) *CartCreate {
	cc.mutation.SetSubtotal(d)
	return cc
}

// SetNillableSubtotal sets the "subtotal" field if the given value is not nil.
func (cc *CartCreate) SetNillableSubtotal(d *decimal.Decimal) *CartCreate {
	if d != nil {
		cc.SetSubtotal(*d)
	}
	return cc
}

// SetDiscountAmount sets the "discount_amount" field.
func (cc *CartCreate) SetDiscountAmount(d decimal.Decimal) *CartCreate {
	cc.mutation.SetDiscountAmount(d)
	return cc
}

// SetNillableDiscountAmount sets the "discount_amount" field if the given value is not nil.
func (cc *CartCreate) SetNillableDiscountAmount(d *decimal.Decimal) *CartCreate {
	if d != nil {
		cc.SetDiscountAmount(*d)
	}
	return cc
}

// SetTaxAmount sets the "tax_amount" field.
func (cc *CartCreate) SetTaxAmount(d decimal.Decimal) *CartCreate {
	cc.mutation.SetTaxAmount(d)
	return cc
}

// SetNillableTaxAmount sets the "tax_amount" field if the given value is not nil.
func (cc *CartCreate) SetNillableTaxAmount(d *decimal.Decimal) *CartCreate {
	if d != nil {
		cc.SetTaxAmount(*d)
	}
	return cc
}

// SetTotal sets the "total" field.
func (cc *CartCreate) SetTotal(d decimal.Decimal) *CartCreate {
	cc.mutation.SetTotal(d)
	return cc
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (cc *CartCreate) SetNillableTotal(d *decimal.Decimal) *CartCreate {
	if d != nil {
		cc.SetTotal(*d)
	}
	return cc
}

// SetExpiresAt sets the "expires_at" field.
func (cc *CartCreate) SetExpiresAt(t time.Time) *CartCreate {
	cc.mutation.SetExpiresAt(t)
	return cc
}

// SetID sets the "id" field.
func (cc *CartCreate) SetID(s string) *CartCreate {
	cc.mutation.SetID(s)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CartCreate) SetNillableID(s *string) *CartCreate {
	if s != nil {
		cc.SetID(*s)
	}
	return cc
}

// AddLineItemIDs adds the "line_items" edge to the CartLineItems entity by IDs.
func (cc *CartCreate) AddLineItemIDs(ids ...string) *CartCreate {
	cc.mutation.AddLineItemIDs(ids...)
	return cc
}

// AddLineItems adds the "line_items" edges to the CartLineItems entity.
func (cc *CartCreate) AddLineItems(c ...*CartLineItems) *CartCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddLineItemIDs(ids...)
}

// SetUser sets the "user" edge to the User entity.
func (cc *CartCreate) SetUser(u *User) *CartCreate {
	return cc.SetUserID(u.ID)
}

// Mutation returns the CartMutation object of the builder.
func (cc *CartCreate) Mutation() *CartMutation {
	return cc.mutation
}

// Save creates the Cart in the database.
func (cc *CartCreate) Save(ctx context.Context) (*Cart, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CartCreate) SaveX(ctx context.Context) *Cart {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CartCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CartCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CartCreate) defaults() {
	if _, ok := cc.mutation.Status(); !ok {
		v := cart.DefaultStatus
		cc.mutation.SetStatus(v)
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := cart.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := cart.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.Metadata(); !ok {
		v := cart.DefaultMetadata
		cc.mutation.SetMetadata(v)
	}
	if _, ok := cc.mutation.Subtotal(); !ok {
		v := cart.DefaultSubtotal
		cc.mutation.SetSubtotal(v)
	}
	if _, ok := cc.mutation.DiscountAmount(); !ok {
		v := cart.DefaultDiscountAmount
		cc.mutation.SetDiscountAmount(v)
	}
	if _, ok := cc.mutation.TaxAmount(); !ok {
		v := cart.DefaultTaxAmount
		cc.mutation.SetTaxAmount(v)
	}
	if _, ok := cc.mutation.Total(); !ok {
		v := cart.DefaultTotal
		cc.mutation.SetTotal(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		v := cart.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CartCreate) check() error {
	if _, ok := cc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Cart.status"`)}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Cart.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Cart.updated_at"`)}
	}
	if _, ok := cc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Cart.user_id"`)}
	}
	if v, ok := cc.mutation.UserID(); ok {
		if err := cart.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "Cart.user_id": %w`, err)}
		}
	}
	if _, ok := cc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Cart.type"`)}
	}
	if v, ok := cc.mutation.GetType(); ok {
		if err := cart.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Cart.type": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Subtotal(); !ok {
		return &ValidationError{Name: "subtotal", err: errors.New(`ent: missing required field "Cart.subtotal"`)}
	}
	if _, ok := cc.mutation.DiscountAmount(); !ok {
		return &ValidationError{Name: "discount_amount", err: errors.New(`ent: missing required field "Cart.discount_amount"`)}
	}
	if _, ok := cc.mutation.TaxAmount(); !ok {
		return &ValidationError{Name: "tax_amount", err: errors.New(`ent: missing required field "Cart.tax_amount"`)}
	}
	if _, ok := cc.mutation.Total(); !ok {
		return &ValidationError{Name: "total", err: errors.New(`ent: missing required field "Cart.total"`)}
	}
	if _, ok := cc.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "Cart.expires_at"`)}
	}
	if len(cc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Cart.user"`)}
	}
	return nil
}

func (cc *CartCreate) sqlSave(ctx context.Context) (*Cart, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Cart.ID type: %T", _spec.ID.Value)
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CartCreate) createSpec() (*Cart, *sqlgraph.CreateSpec) {
	var (
		_node = &Cart{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(cart.Table, sqlgraph.NewFieldSpec(cart.FieldID, field.TypeString))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.Status(); ok {
		_spec.SetField(cart.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(cart.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(cart.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.CreatedBy(); ok {
		_spec.SetField(cart.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := cc.mutation.UpdatedBy(); ok {
		_spec.SetField(cart.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := cc.mutation.Metadata(); ok {
		_spec.SetField(cart.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := cc.mutation.GetType(); ok {
		_spec.SetField(cart.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := cc.mutation.Subtotal(); ok {
		_spec.SetField(cart.FieldSubtotal, field.TypeOther, value)
		_node.Subtotal = value
	}
	if value, ok := cc.mutation.DiscountAmount(); ok {
		_spec.SetField(cart.FieldDiscountAmount, field.TypeOther, value)
		_node.DiscountAmount = value
	}
	if value, ok := cc.mutation.TaxAmount(); ok {
		_spec.SetField(cart.FieldTaxAmount, field.TypeOther, value)
		_node.TaxAmount = value
	}
	if value, ok := cc.mutation.Total(); ok {
		_spec.SetField(cart.FieldTotal, field.TypeOther, value)
		_node.Total = value
	}
	if value, ok := cc.mutation.ExpiresAt(); ok {
		_spec.SetField(cart.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if nodes := cc.mutation.LineItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cart.LineItemsTable,
			Columns: []string{cart.LineItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartlineitems.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cart.UserTable,
			Columns: []string{cart.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CartCreateBulk is the builder for creating many Cart entities in bulk.
type CartCreateBulk struct {
	config
	err      error
	builders []*CartCreate
}

// Save creates the Cart entities in the database.
func (ccb *CartCreateBulk) Save(ctx context.Context) ([]*Cart, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Cart, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CartMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CartCreateBulk) SaveX(ctx context.Context) []*Cart {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CartCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CartCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
