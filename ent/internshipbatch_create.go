// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/omkar273/codegeeky/ent/internshipbatch"
)

// InternshipBatchCreate is the builder for creating a InternshipBatch entity.
type InternshipBatchCreate struct {
	config
	mutation *InternshipBatchMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (ibc *InternshipBatchCreate) SetStatus(s string) *InternshipBatchCreate {
	ibc.mutation.SetStatus(s)
	return ibc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ibc *InternshipBatchCreate) SetNillableStatus(s *string) *InternshipBatchCreate {
	if s != nil {
		ibc.SetStatus(*s)
	}
	return ibc
}

// SetCreatedAt sets the "created_at" field.
func (ibc *InternshipBatchCreate) SetCreatedAt(t time.Time) *InternshipBatchCreate {
	ibc.mutation.SetCreatedAt(t)
	return ibc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ibc *InternshipBatchCreate) SetNillableCreatedAt(t *time.Time) *InternshipBatchCreate {
	if t != nil {
		ibc.SetCreatedAt(*t)
	}
	return ibc
}

// SetUpdatedAt sets the "updated_at" field.
func (ibc *InternshipBatchCreate) SetUpdatedAt(t time.Time) *InternshipBatchCreate {
	ibc.mutation.SetUpdatedAt(t)
	return ibc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ibc *InternshipBatchCreate) SetNillableUpdatedAt(t *time.Time) *InternshipBatchCreate {
	if t != nil {
		ibc.SetUpdatedAt(*t)
	}
	return ibc
}

// SetCreatedBy sets the "created_by" field.
func (ibc *InternshipBatchCreate) SetCreatedBy(s string) *InternshipBatchCreate {
	ibc.mutation.SetCreatedBy(s)
	return ibc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ibc *InternshipBatchCreate) SetNillableCreatedBy(s *string) *InternshipBatchCreate {
	if s != nil {
		ibc.SetCreatedBy(*s)
	}
	return ibc
}

// SetUpdatedBy sets the "updated_by" field.
func (ibc *InternshipBatchCreate) SetUpdatedBy(s string) *InternshipBatchCreate {
	ibc.mutation.SetUpdatedBy(s)
	return ibc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ibc *InternshipBatchCreate) SetNillableUpdatedBy(s *string) *InternshipBatchCreate {
	if s != nil {
		ibc.SetUpdatedBy(*s)
	}
	return ibc
}

// SetMetadata sets the "metadata" field.
func (ibc *InternshipBatchCreate) SetMetadata(m map[string]string) *InternshipBatchCreate {
	ibc.mutation.SetMetadata(m)
	return ibc
}

// SetInternshipID sets the "internship_id" field.
func (ibc *InternshipBatchCreate) SetInternshipID(s string) *InternshipBatchCreate {
	ibc.mutation.SetInternshipID(s)
	return ibc
}

// SetName sets the "name" field.
func (ibc *InternshipBatchCreate) SetName(s string) *InternshipBatchCreate {
	ibc.mutation.SetName(s)
	return ibc
}

// SetDescription sets the "description" field.
func (ibc *InternshipBatchCreate) SetDescription(s string) *InternshipBatchCreate {
	ibc.mutation.SetDescription(s)
	return ibc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ibc *InternshipBatchCreate) SetNillableDescription(s *string) *InternshipBatchCreate {
	if s != nil {
		ibc.SetDescription(*s)
	}
	return ibc
}

// SetStartDate sets the "start_date" field.
func (ibc *InternshipBatchCreate) SetStartDate(t time.Time) *InternshipBatchCreate {
	ibc.mutation.SetStartDate(t)
	return ibc
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (ibc *InternshipBatchCreate) SetNillableStartDate(t *time.Time) *InternshipBatchCreate {
	if t != nil {
		ibc.SetStartDate(*t)
	}
	return ibc
}

// SetEndDate sets the "end_date" field.
func (ibc *InternshipBatchCreate) SetEndDate(t time.Time) *InternshipBatchCreate {
	ibc.mutation.SetEndDate(t)
	return ibc
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (ibc *InternshipBatchCreate) SetNillableEndDate(t *time.Time) *InternshipBatchCreate {
	if t != nil {
		ibc.SetEndDate(*t)
	}
	return ibc
}

// SetBatchStatus sets the "batch_status" field.
func (ibc *InternshipBatchCreate) SetBatchStatus(s string) *InternshipBatchCreate {
	ibc.mutation.SetBatchStatus(s)
	return ibc
}

// SetNillableBatchStatus sets the "batch_status" field if the given value is not nil.
func (ibc *InternshipBatchCreate) SetNillableBatchStatus(s *string) *InternshipBatchCreate {
	if s != nil {
		ibc.SetBatchStatus(*s)
	}
	return ibc
}

// SetID sets the "id" field.
func (ibc *InternshipBatchCreate) SetID(s string) *InternshipBatchCreate {
	ibc.mutation.SetID(s)
	return ibc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ibc *InternshipBatchCreate) SetNillableID(s *string) *InternshipBatchCreate {
	if s != nil {
		ibc.SetID(*s)
	}
	return ibc
}

// Mutation returns the InternshipBatchMutation object of the builder.
func (ibc *InternshipBatchCreate) Mutation() *InternshipBatchMutation {
	return ibc.mutation
}

// Save creates the InternshipBatch in the database.
func (ibc *InternshipBatchCreate) Save(ctx context.Context) (*InternshipBatch, error) {
	ibc.defaults()
	return withHooks(ctx, ibc.sqlSave, ibc.mutation, ibc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ibc *InternshipBatchCreate) SaveX(ctx context.Context) *InternshipBatch {
	v, err := ibc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ibc *InternshipBatchCreate) Exec(ctx context.Context) error {
	_, err := ibc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ibc *InternshipBatchCreate) ExecX(ctx context.Context) {
	if err := ibc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ibc *InternshipBatchCreate) defaults() {
	if _, ok := ibc.mutation.Status(); !ok {
		v := internshipbatch.DefaultStatus
		ibc.mutation.SetStatus(v)
	}
	if _, ok := ibc.mutation.CreatedAt(); !ok {
		v := internshipbatch.DefaultCreatedAt()
		ibc.mutation.SetCreatedAt(v)
	}
	if _, ok := ibc.mutation.UpdatedAt(); !ok {
		v := internshipbatch.DefaultUpdatedAt()
		ibc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ibc.mutation.Metadata(); !ok {
		v := internshipbatch.DefaultMetadata
		ibc.mutation.SetMetadata(v)
	}
	if _, ok := ibc.mutation.BatchStatus(); !ok {
		v := internshipbatch.DefaultBatchStatus
		ibc.mutation.SetBatchStatus(v)
	}
	if _, ok := ibc.mutation.ID(); !ok {
		v := internshipbatch.DefaultID()
		ibc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ibc *InternshipBatchCreate) check() error {
	if _, ok := ibc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "InternshipBatch.status"`)}
	}
	if _, ok := ibc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "InternshipBatch.created_at"`)}
	}
	if _, ok := ibc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "InternshipBatch.updated_at"`)}
	}
	if _, ok := ibc.mutation.InternshipID(); !ok {
		return &ValidationError{Name: "internship_id", err: errors.New(`ent: missing required field "InternshipBatch.internship_id"`)}
	}
	if v, ok := ibc.mutation.InternshipID(); ok {
		if err := internshipbatch.InternshipIDValidator(v); err != nil {
			return &ValidationError{Name: "internship_id", err: fmt.Errorf(`ent: validator failed for field "InternshipBatch.internship_id": %w`, err)}
		}
	}
	if _, ok := ibc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "InternshipBatch.name"`)}
	}
	if v, ok := ibc.mutation.Name(); ok {
		if err := internshipbatch.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "InternshipBatch.name": %w`, err)}
		}
	}
	if _, ok := ibc.mutation.BatchStatus(); !ok {
		return &ValidationError{Name: "batch_status", err: errors.New(`ent: missing required field "InternshipBatch.batch_status"`)}
	}
	if v, ok := ibc.mutation.BatchStatus(); ok {
		if err := internshipbatch.BatchStatusValidator(v); err != nil {
			return &ValidationError{Name: "batch_status", err: fmt.Errorf(`ent: validator failed for field "InternshipBatch.batch_status": %w`, err)}
		}
	}
	return nil
}

func (ibc *InternshipBatchCreate) sqlSave(ctx context.Context) (*InternshipBatch, error) {
	if err := ibc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ibc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ibc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected InternshipBatch.ID type: %T", _spec.ID.Value)
		}
	}
	ibc.mutation.id = &_node.ID
	ibc.mutation.done = true
	return _node, nil
}

func (ibc *InternshipBatchCreate) createSpec() (*InternshipBatch, *sqlgraph.CreateSpec) {
	var (
		_node = &InternshipBatch{config: ibc.config}
		_spec = sqlgraph.NewCreateSpec(internshipbatch.Table, sqlgraph.NewFieldSpec(internshipbatch.FieldID, field.TypeString))
	)
	if id, ok := ibc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ibc.mutation.Status(); ok {
		_spec.SetField(internshipbatch.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := ibc.mutation.CreatedAt(); ok {
		_spec.SetField(internshipbatch.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ibc.mutation.UpdatedAt(); ok {
		_spec.SetField(internshipbatch.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ibc.mutation.CreatedBy(); ok {
		_spec.SetField(internshipbatch.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := ibc.mutation.UpdatedBy(); ok {
		_spec.SetField(internshipbatch.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := ibc.mutation.Metadata(); ok {
		_spec.SetField(internshipbatch.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := ibc.mutation.InternshipID(); ok {
		_spec.SetField(internshipbatch.FieldInternshipID, field.TypeString, value)
		_node.InternshipID = value
	}
	if value, ok := ibc.mutation.Name(); ok {
		_spec.SetField(internshipbatch.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ibc.mutation.Description(); ok {
		_spec.SetField(internshipbatch.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ibc.mutation.StartDate(); ok {
		_spec.SetField(internshipbatch.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := ibc.mutation.EndDate(); ok {
		_spec.SetField(internshipbatch.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := ibc.mutation.BatchStatus(); ok {
		_spec.SetField(internshipbatch.FieldBatchStatus, field.TypeString, value)
		_node.BatchStatus = value
	}
	return _node, _spec
}

// InternshipBatchCreateBulk is the builder for creating many InternshipBatch entities in bulk.
type InternshipBatchCreateBulk struct {
	config
	err      error
	builders []*InternshipBatchCreate
}

// Save creates the InternshipBatch entities in the database.
func (ibcb *InternshipBatchCreateBulk) Save(ctx context.Context) ([]*InternshipBatch, error) {
	if ibcb.err != nil {
		return nil, ibcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ibcb.builders))
	nodes := make([]*InternshipBatch, len(ibcb.builders))
	mutators := make([]Mutator, len(ibcb.builders))
	for i := range ibcb.builders {
		func(i int, root context.Context) {
			builder := ibcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InternshipBatchMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ibcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ibcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ibcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ibcb *InternshipBatchCreateBulk) SaveX(ctx context.Context) []*InternshipBatch {
	v, err := ibcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ibcb *InternshipBatchCreateBulk) Exec(ctx context.Context) error {
	_, err := ibcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ibcb *InternshipBatchCreateBulk) ExecX(ctx context.Context) {
	if err := ibcb.Exec(ctx); err != nil {
		panic(err)
	}
}
