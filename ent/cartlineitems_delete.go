// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/omkar273/codegeeky/ent/cartlineitems"
	"github.com/omkar273/codegeeky/ent/predicate"
)

// CartLineItemsDelete is the builder for deleting a CartLineItems entity.
type CartLineItemsDelete struct {
	config
	hooks    []Hook
	mutation *CartLineItemsMutation
}

// Where appends a list predicates to the CartLineItemsDelete builder.
func (clid *CartLineItemsDelete) Where(ps ...predicate.CartLineItems) *CartLineItemsDelete {
	clid.mutation.Where(ps...)
	return clid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (clid *CartLineItemsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, clid.sqlExec, clid.mutation, clid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (clid *CartLineItemsDelete) ExecX(ctx context.Context) int {
	n, err := clid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (clid *CartLineItemsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(cartlineitems.Table, sqlgraph.NewFieldSpec(cartlineitems.FieldID, field.TypeString))
	if ps := clid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, clid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	clid.mutation.done = true
	return affected, err
}

// CartLineItemsDeleteOne is the builder for deleting a single CartLineItems entity.
type CartLineItemsDeleteOne struct {
	clid *CartLineItemsDelete
}

// Where appends a list predicates to the CartLineItemsDelete builder.
func (clido *CartLineItemsDeleteOne) Where(ps ...predicate.CartLineItems) *CartLineItemsDeleteOne {
	clido.clid.mutation.Where(ps...)
	return clido
}

// Exec executes the deletion query.
func (clido *CartLineItemsDeleteOne) Exec(ctx context.Context) error {
	n, err := clido.clid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{cartlineitems.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (clido *CartLineItemsDeleteOne) ExecX(ctx context.Context) {
	if err := clido.Exec(ctx); err != nil {
		panic(err)
	}
}
