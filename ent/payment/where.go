// Code generated by ent, DO NOT EDIT.

package payment

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/omkar273/codegeeky/ent/predicate"
	"github.com/omkar273/codegeeky/internal/types"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Payment {
	return predicate.Payment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Payment {
	return predicate.Payment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Payment {
	return predicate.Payment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Payment {
	return predicate.Payment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Payment {
	return predicate.Payment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Payment {
	return predicate.Payment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Payment {
	return predicate.Payment(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Payment {
	return predicate.Payment(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Payment {
	return predicate.Payment(sql.FieldContainsFold(FieldID, id))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldUpdatedBy, v))
}

// IdempotencyKey applies equality check predicate on the "idempotency_key" field. It's identical to IdempotencyKeyEQ.
func IdempotencyKey(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldIdempotencyKey, v))
}

// DestinationType applies equality check predicate on the "destination_type" field. It's identical to DestinationTypeEQ.
func DestinationType(v types.PaymentDestinationType) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldEQ(FieldDestinationType, vc))
}

// DestinationID applies equality check predicate on the "destination_id" field. It's identical to DestinationIDEQ.
func DestinationID(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldDestinationID, v))
}

// PaymentMethodType applies equality check predicate on the "payment_method_type" field. It's identical to PaymentMethodTypeEQ.
func PaymentMethodType(v types.PaymentMethodType) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldEQ(FieldPaymentMethodType, vc))
}

// PaymentMethodID applies equality check predicate on the "payment_method_id" field. It's identical to PaymentMethodIDEQ.
func PaymentMethodID(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldPaymentMethodID, v))
}

// PaymentGatewayProvider applies equality check predicate on the "payment_gateway_provider" field. It's identical to PaymentGatewayProviderEQ.
func PaymentGatewayProvider(v types.PaymentGatewayProvider) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldEQ(FieldPaymentGatewayProvider, vc))
}

// GatewayPaymentID applies equality check predicate on the "gateway_payment_id" field. It's identical to GatewayPaymentIDEQ.
func GatewayPaymentID(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldGatewayPaymentID, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v decimal.Decimal) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldAmount, v))
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v types.Currency) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldEQ(FieldCurrency, vc))
}

// PaymentStatus applies equality check predicate on the "payment_status" field. It's identical to PaymentStatusEQ.
func PaymentStatus(v types.PaymentStatus) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldEQ(FieldPaymentStatus, vc))
}

// TrackAttempts applies equality check predicate on the "track_attempts" field. It's identical to TrackAttemptsEQ.
func TrackAttempts(v bool) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldTrackAttempts, v))
}

// SucceededAt applies equality check predicate on the "succeeded_at" field. It's identical to SucceededAtEQ.
func SucceededAt(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldSucceededAt, v))
}

// FailedAt applies equality check predicate on the "failed_at" field. It's identical to FailedAtEQ.
func FailedAt(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldFailedAt, v))
}

// RefundedAt applies equality check predicate on the "refunded_at" field. It's identical to RefundedAtEQ.
func RefundedAt(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldRefundedAt, v))
}

// ErrorMessage applies equality check predicate on the "error_message" field. It's identical to ErrorMessageEQ.
func ErrorMessage(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldErrorMessage, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Payment {
	return predicate.Payment(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Payment {
	return predicate.Payment(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Payment {
	return predicate.Payment(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Payment {
	return predicate.Payment(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Payment {
	return predicate.Payment(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Payment {
	return predicate.Payment(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Payment {
	return predicate.Payment(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Payment {
	return predicate.Payment(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Payment {
	return predicate.Payment(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Payment {
	return predicate.Payment(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Payment {
	return predicate.Payment(sql.FieldContainsFold(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.Payment {
	return predicate.Payment(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.Payment {
	return predicate.Payment(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.Payment {
	return predicate.Payment(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.Payment {
	return predicate.Payment(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.Payment {
	return predicate.Payment(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.Payment {
	return predicate.Payment(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.Payment {
	return predicate.Payment(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.Payment {
	return predicate.Payment(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.Payment {
	return predicate.Payment(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.Payment {
	return predicate.Payment(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Payment {
	return predicate.Payment(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Payment {
	return predicate.Payment(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.Payment {
	return predicate.Payment(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.Payment {
	return predicate.Payment(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.Payment {
	return predicate.Payment(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.Payment {
	return predicate.Payment(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.Payment {
	return predicate.Payment(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.Payment {
	return predicate.Payment(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.Payment {
	return predicate.Payment(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.Payment {
	return predicate.Payment(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.Payment {
	return predicate.Payment(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.Payment {
	return predicate.Payment(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.Payment {
	return predicate.Payment(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.Payment {
	return predicate.Payment(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.Payment {
	return predicate.Payment(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.Payment {
	return predicate.Payment(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// IdempotencyKeyEQ applies the EQ predicate on the "idempotency_key" field.
func IdempotencyKeyEQ(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldIdempotencyKey, v))
}

// IdempotencyKeyNEQ applies the NEQ predicate on the "idempotency_key" field.
func IdempotencyKeyNEQ(v string) predicate.Payment {
	return predicate.Payment(sql.FieldNEQ(FieldIdempotencyKey, v))
}

// IdempotencyKeyIn applies the In predicate on the "idempotency_key" field.
func IdempotencyKeyIn(vs ...string) predicate.Payment {
	return predicate.Payment(sql.FieldIn(FieldIdempotencyKey, vs...))
}

// IdempotencyKeyNotIn applies the NotIn predicate on the "idempotency_key" field.
func IdempotencyKeyNotIn(vs ...string) predicate.Payment {
	return predicate.Payment(sql.FieldNotIn(FieldIdempotencyKey, vs...))
}

// IdempotencyKeyGT applies the GT predicate on the "idempotency_key" field.
func IdempotencyKeyGT(v string) predicate.Payment {
	return predicate.Payment(sql.FieldGT(FieldIdempotencyKey, v))
}

// IdempotencyKeyGTE applies the GTE predicate on the "idempotency_key" field.
func IdempotencyKeyGTE(v string) predicate.Payment {
	return predicate.Payment(sql.FieldGTE(FieldIdempotencyKey, v))
}

// IdempotencyKeyLT applies the LT predicate on the "idempotency_key" field.
func IdempotencyKeyLT(v string) predicate.Payment {
	return predicate.Payment(sql.FieldLT(FieldIdempotencyKey, v))
}

// IdempotencyKeyLTE applies the LTE predicate on the "idempotency_key" field.
func IdempotencyKeyLTE(v string) predicate.Payment {
	return predicate.Payment(sql.FieldLTE(FieldIdempotencyKey, v))
}

// IdempotencyKeyContains applies the Contains predicate on the "idempotency_key" field.
func IdempotencyKeyContains(v string) predicate.Payment {
	return predicate.Payment(sql.FieldContains(FieldIdempotencyKey, v))
}

// IdempotencyKeyHasPrefix applies the HasPrefix predicate on the "idempotency_key" field.
func IdempotencyKeyHasPrefix(v string) predicate.Payment {
	return predicate.Payment(sql.FieldHasPrefix(FieldIdempotencyKey, v))
}

// IdempotencyKeyHasSuffix applies the HasSuffix predicate on the "idempotency_key" field.
func IdempotencyKeyHasSuffix(v string) predicate.Payment {
	return predicate.Payment(sql.FieldHasSuffix(FieldIdempotencyKey, v))
}

// IdempotencyKeyEqualFold applies the EqualFold predicate on the "idempotency_key" field.
func IdempotencyKeyEqualFold(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEqualFold(FieldIdempotencyKey, v))
}

// IdempotencyKeyContainsFold applies the ContainsFold predicate on the "idempotency_key" field.
func IdempotencyKeyContainsFold(v string) predicate.Payment {
	return predicate.Payment(sql.FieldContainsFold(FieldIdempotencyKey, v))
}

// DestinationTypeEQ applies the EQ predicate on the "destination_type" field.
func DestinationTypeEQ(v types.PaymentDestinationType) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldEQ(FieldDestinationType, vc))
}

// DestinationTypeNEQ applies the NEQ predicate on the "destination_type" field.
func DestinationTypeNEQ(v types.PaymentDestinationType) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldNEQ(FieldDestinationType, vc))
}

// DestinationTypeIn applies the In predicate on the "destination_type" field.
func DestinationTypeIn(vs ...types.PaymentDestinationType) predicate.Payment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Payment(sql.FieldIn(FieldDestinationType, v...))
}

// DestinationTypeNotIn applies the NotIn predicate on the "destination_type" field.
func DestinationTypeNotIn(vs ...types.PaymentDestinationType) predicate.Payment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Payment(sql.FieldNotIn(FieldDestinationType, v...))
}

// DestinationTypeGT applies the GT predicate on the "destination_type" field.
func DestinationTypeGT(v types.PaymentDestinationType) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldGT(FieldDestinationType, vc))
}

// DestinationTypeGTE applies the GTE predicate on the "destination_type" field.
func DestinationTypeGTE(v types.PaymentDestinationType) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldGTE(FieldDestinationType, vc))
}

// DestinationTypeLT applies the LT predicate on the "destination_type" field.
func DestinationTypeLT(v types.PaymentDestinationType) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldLT(FieldDestinationType, vc))
}

// DestinationTypeLTE applies the LTE predicate on the "destination_type" field.
func DestinationTypeLTE(v types.PaymentDestinationType) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldLTE(FieldDestinationType, vc))
}

// DestinationTypeContains applies the Contains predicate on the "destination_type" field.
func DestinationTypeContains(v types.PaymentDestinationType) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldContains(FieldDestinationType, vc))
}

// DestinationTypeHasPrefix applies the HasPrefix predicate on the "destination_type" field.
func DestinationTypeHasPrefix(v types.PaymentDestinationType) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldHasPrefix(FieldDestinationType, vc))
}

// DestinationTypeHasSuffix applies the HasSuffix predicate on the "destination_type" field.
func DestinationTypeHasSuffix(v types.PaymentDestinationType) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldHasSuffix(FieldDestinationType, vc))
}

// DestinationTypeEqualFold applies the EqualFold predicate on the "destination_type" field.
func DestinationTypeEqualFold(v types.PaymentDestinationType) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldEqualFold(FieldDestinationType, vc))
}

// DestinationTypeContainsFold applies the ContainsFold predicate on the "destination_type" field.
func DestinationTypeContainsFold(v types.PaymentDestinationType) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldContainsFold(FieldDestinationType, vc))
}

// DestinationIDEQ applies the EQ predicate on the "destination_id" field.
func DestinationIDEQ(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldDestinationID, v))
}

// DestinationIDNEQ applies the NEQ predicate on the "destination_id" field.
func DestinationIDNEQ(v string) predicate.Payment {
	return predicate.Payment(sql.FieldNEQ(FieldDestinationID, v))
}

// DestinationIDIn applies the In predicate on the "destination_id" field.
func DestinationIDIn(vs ...string) predicate.Payment {
	return predicate.Payment(sql.FieldIn(FieldDestinationID, vs...))
}

// DestinationIDNotIn applies the NotIn predicate on the "destination_id" field.
func DestinationIDNotIn(vs ...string) predicate.Payment {
	return predicate.Payment(sql.FieldNotIn(FieldDestinationID, vs...))
}

// DestinationIDGT applies the GT predicate on the "destination_id" field.
func DestinationIDGT(v string) predicate.Payment {
	return predicate.Payment(sql.FieldGT(FieldDestinationID, v))
}

// DestinationIDGTE applies the GTE predicate on the "destination_id" field.
func DestinationIDGTE(v string) predicate.Payment {
	return predicate.Payment(sql.FieldGTE(FieldDestinationID, v))
}

// DestinationIDLT applies the LT predicate on the "destination_id" field.
func DestinationIDLT(v string) predicate.Payment {
	return predicate.Payment(sql.FieldLT(FieldDestinationID, v))
}

// DestinationIDLTE applies the LTE predicate on the "destination_id" field.
func DestinationIDLTE(v string) predicate.Payment {
	return predicate.Payment(sql.FieldLTE(FieldDestinationID, v))
}

// DestinationIDContains applies the Contains predicate on the "destination_id" field.
func DestinationIDContains(v string) predicate.Payment {
	return predicate.Payment(sql.FieldContains(FieldDestinationID, v))
}

// DestinationIDHasPrefix applies the HasPrefix predicate on the "destination_id" field.
func DestinationIDHasPrefix(v string) predicate.Payment {
	return predicate.Payment(sql.FieldHasPrefix(FieldDestinationID, v))
}

// DestinationIDHasSuffix applies the HasSuffix predicate on the "destination_id" field.
func DestinationIDHasSuffix(v string) predicate.Payment {
	return predicate.Payment(sql.FieldHasSuffix(FieldDestinationID, v))
}

// DestinationIDEqualFold applies the EqualFold predicate on the "destination_id" field.
func DestinationIDEqualFold(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEqualFold(FieldDestinationID, v))
}

// DestinationIDContainsFold applies the ContainsFold predicate on the "destination_id" field.
func DestinationIDContainsFold(v string) predicate.Payment {
	return predicate.Payment(sql.FieldContainsFold(FieldDestinationID, v))
}

// PaymentMethodTypeEQ applies the EQ predicate on the "payment_method_type" field.
func PaymentMethodTypeEQ(v types.PaymentMethodType) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldEQ(FieldPaymentMethodType, vc))
}

// PaymentMethodTypeNEQ applies the NEQ predicate on the "payment_method_type" field.
func PaymentMethodTypeNEQ(v types.PaymentMethodType) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldNEQ(FieldPaymentMethodType, vc))
}

// PaymentMethodTypeIn applies the In predicate on the "payment_method_type" field.
func PaymentMethodTypeIn(vs ...types.PaymentMethodType) predicate.Payment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Payment(sql.FieldIn(FieldPaymentMethodType, v...))
}

// PaymentMethodTypeNotIn applies the NotIn predicate on the "payment_method_type" field.
func PaymentMethodTypeNotIn(vs ...types.PaymentMethodType) predicate.Payment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Payment(sql.FieldNotIn(FieldPaymentMethodType, v...))
}

// PaymentMethodTypeGT applies the GT predicate on the "payment_method_type" field.
func PaymentMethodTypeGT(v types.PaymentMethodType) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldGT(FieldPaymentMethodType, vc))
}

// PaymentMethodTypeGTE applies the GTE predicate on the "payment_method_type" field.
func PaymentMethodTypeGTE(v types.PaymentMethodType) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldGTE(FieldPaymentMethodType, vc))
}

// PaymentMethodTypeLT applies the LT predicate on the "payment_method_type" field.
func PaymentMethodTypeLT(v types.PaymentMethodType) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldLT(FieldPaymentMethodType, vc))
}

// PaymentMethodTypeLTE applies the LTE predicate on the "payment_method_type" field.
func PaymentMethodTypeLTE(v types.PaymentMethodType) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldLTE(FieldPaymentMethodType, vc))
}

// PaymentMethodTypeContains applies the Contains predicate on the "payment_method_type" field.
func PaymentMethodTypeContains(v types.PaymentMethodType) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldContains(FieldPaymentMethodType, vc))
}

// PaymentMethodTypeHasPrefix applies the HasPrefix predicate on the "payment_method_type" field.
func PaymentMethodTypeHasPrefix(v types.PaymentMethodType) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldHasPrefix(FieldPaymentMethodType, vc))
}

// PaymentMethodTypeHasSuffix applies the HasSuffix predicate on the "payment_method_type" field.
func PaymentMethodTypeHasSuffix(v types.PaymentMethodType) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldHasSuffix(FieldPaymentMethodType, vc))
}

// PaymentMethodTypeEqualFold applies the EqualFold predicate on the "payment_method_type" field.
func PaymentMethodTypeEqualFold(v types.PaymentMethodType) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldEqualFold(FieldPaymentMethodType, vc))
}

// PaymentMethodTypeContainsFold applies the ContainsFold predicate on the "payment_method_type" field.
func PaymentMethodTypeContainsFold(v types.PaymentMethodType) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldContainsFold(FieldPaymentMethodType, vc))
}

// PaymentMethodIDEQ applies the EQ predicate on the "payment_method_id" field.
func PaymentMethodIDEQ(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldPaymentMethodID, v))
}

// PaymentMethodIDNEQ applies the NEQ predicate on the "payment_method_id" field.
func PaymentMethodIDNEQ(v string) predicate.Payment {
	return predicate.Payment(sql.FieldNEQ(FieldPaymentMethodID, v))
}

// PaymentMethodIDIn applies the In predicate on the "payment_method_id" field.
func PaymentMethodIDIn(vs ...string) predicate.Payment {
	return predicate.Payment(sql.FieldIn(FieldPaymentMethodID, vs...))
}

// PaymentMethodIDNotIn applies the NotIn predicate on the "payment_method_id" field.
func PaymentMethodIDNotIn(vs ...string) predicate.Payment {
	return predicate.Payment(sql.FieldNotIn(FieldPaymentMethodID, vs...))
}

// PaymentMethodIDGT applies the GT predicate on the "payment_method_id" field.
func PaymentMethodIDGT(v string) predicate.Payment {
	return predicate.Payment(sql.FieldGT(FieldPaymentMethodID, v))
}

// PaymentMethodIDGTE applies the GTE predicate on the "payment_method_id" field.
func PaymentMethodIDGTE(v string) predicate.Payment {
	return predicate.Payment(sql.FieldGTE(FieldPaymentMethodID, v))
}

// PaymentMethodIDLT applies the LT predicate on the "payment_method_id" field.
func PaymentMethodIDLT(v string) predicate.Payment {
	return predicate.Payment(sql.FieldLT(FieldPaymentMethodID, v))
}

// PaymentMethodIDLTE applies the LTE predicate on the "payment_method_id" field.
func PaymentMethodIDLTE(v string) predicate.Payment {
	return predicate.Payment(sql.FieldLTE(FieldPaymentMethodID, v))
}

// PaymentMethodIDContains applies the Contains predicate on the "payment_method_id" field.
func PaymentMethodIDContains(v string) predicate.Payment {
	return predicate.Payment(sql.FieldContains(FieldPaymentMethodID, v))
}

// PaymentMethodIDHasPrefix applies the HasPrefix predicate on the "payment_method_id" field.
func PaymentMethodIDHasPrefix(v string) predicate.Payment {
	return predicate.Payment(sql.FieldHasPrefix(FieldPaymentMethodID, v))
}

// PaymentMethodIDHasSuffix applies the HasSuffix predicate on the "payment_method_id" field.
func PaymentMethodIDHasSuffix(v string) predicate.Payment {
	return predicate.Payment(sql.FieldHasSuffix(FieldPaymentMethodID, v))
}

// PaymentMethodIDIsNil applies the IsNil predicate on the "payment_method_id" field.
func PaymentMethodIDIsNil() predicate.Payment {
	return predicate.Payment(sql.FieldIsNull(FieldPaymentMethodID))
}

// PaymentMethodIDNotNil applies the NotNil predicate on the "payment_method_id" field.
func PaymentMethodIDNotNil() predicate.Payment {
	return predicate.Payment(sql.FieldNotNull(FieldPaymentMethodID))
}

// PaymentMethodIDEqualFold applies the EqualFold predicate on the "payment_method_id" field.
func PaymentMethodIDEqualFold(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEqualFold(FieldPaymentMethodID, v))
}

// PaymentMethodIDContainsFold applies the ContainsFold predicate on the "payment_method_id" field.
func PaymentMethodIDContainsFold(v string) predicate.Payment {
	return predicate.Payment(sql.FieldContainsFold(FieldPaymentMethodID, v))
}

// PaymentGatewayProviderEQ applies the EQ predicate on the "payment_gateway_provider" field.
func PaymentGatewayProviderEQ(v types.PaymentGatewayProvider) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldEQ(FieldPaymentGatewayProvider, vc))
}

// PaymentGatewayProviderNEQ applies the NEQ predicate on the "payment_gateway_provider" field.
func PaymentGatewayProviderNEQ(v types.PaymentGatewayProvider) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldNEQ(FieldPaymentGatewayProvider, vc))
}

// PaymentGatewayProviderIn applies the In predicate on the "payment_gateway_provider" field.
func PaymentGatewayProviderIn(vs ...types.PaymentGatewayProvider) predicate.Payment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Payment(sql.FieldIn(FieldPaymentGatewayProvider, v...))
}

// PaymentGatewayProviderNotIn applies the NotIn predicate on the "payment_gateway_provider" field.
func PaymentGatewayProviderNotIn(vs ...types.PaymentGatewayProvider) predicate.Payment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Payment(sql.FieldNotIn(FieldPaymentGatewayProvider, v...))
}

// PaymentGatewayProviderGT applies the GT predicate on the "payment_gateway_provider" field.
func PaymentGatewayProviderGT(v types.PaymentGatewayProvider) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldGT(FieldPaymentGatewayProvider, vc))
}

// PaymentGatewayProviderGTE applies the GTE predicate on the "payment_gateway_provider" field.
func PaymentGatewayProviderGTE(v types.PaymentGatewayProvider) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldGTE(FieldPaymentGatewayProvider, vc))
}

// PaymentGatewayProviderLT applies the LT predicate on the "payment_gateway_provider" field.
func PaymentGatewayProviderLT(v types.PaymentGatewayProvider) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldLT(FieldPaymentGatewayProvider, vc))
}

// PaymentGatewayProviderLTE applies the LTE predicate on the "payment_gateway_provider" field.
func PaymentGatewayProviderLTE(v types.PaymentGatewayProvider) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldLTE(FieldPaymentGatewayProvider, vc))
}

// PaymentGatewayProviderContains applies the Contains predicate on the "payment_gateway_provider" field.
func PaymentGatewayProviderContains(v types.PaymentGatewayProvider) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldContains(FieldPaymentGatewayProvider, vc))
}

// PaymentGatewayProviderHasPrefix applies the HasPrefix predicate on the "payment_gateway_provider" field.
func PaymentGatewayProviderHasPrefix(v types.PaymentGatewayProvider) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldHasPrefix(FieldPaymentGatewayProvider, vc))
}

// PaymentGatewayProviderHasSuffix applies the HasSuffix predicate on the "payment_gateway_provider" field.
func PaymentGatewayProviderHasSuffix(v types.PaymentGatewayProvider) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldHasSuffix(FieldPaymentGatewayProvider, vc))
}

// PaymentGatewayProviderIsNil applies the IsNil predicate on the "payment_gateway_provider" field.
func PaymentGatewayProviderIsNil() predicate.Payment {
	return predicate.Payment(sql.FieldIsNull(FieldPaymentGatewayProvider))
}

// PaymentGatewayProviderNotNil applies the NotNil predicate on the "payment_gateway_provider" field.
func PaymentGatewayProviderNotNil() predicate.Payment {
	return predicate.Payment(sql.FieldNotNull(FieldPaymentGatewayProvider))
}

// PaymentGatewayProviderEqualFold applies the EqualFold predicate on the "payment_gateway_provider" field.
func PaymentGatewayProviderEqualFold(v types.PaymentGatewayProvider) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldEqualFold(FieldPaymentGatewayProvider, vc))
}

// PaymentGatewayProviderContainsFold applies the ContainsFold predicate on the "payment_gateway_provider" field.
func PaymentGatewayProviderContainsFold(v types.PaymentGatewayProvider) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldContainsFold(FieldPaymentGatewayProvider, vc))
}

// GatewayPaymentIDEQ applies the EQ predicate on the "gateway_payment_id" field.
func GatewayPaymentIDEQ(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldGatewayPaymentID, v))
}

// GatewayPaymentIDNEQ applies the NEQ predicate on the "gateway_payment_id" field.
func GatewayPaymentIDNEQ(v string) predicate.Payment {
	return predicate.Payment(sql.FieldNEQ(FieldGatewayPaymentID, v))
}

// GatewayPaymentIDIn applies the In predicate on the "gateway_payment_id" field.
func GatewayPaymentIDIn(vs ...string) predicate.Payment {
	return predicate.Payment(sql.FieldIn(FieldGatewayPaymentID, vs...))
}

// GatewayPaymentIDNotIn applies the NotIn predicate on the "gateway_payment_id" field.
func GatewayPaymentIDNotIn(vs ...string) predicate.Payment {
	return predicate.Payment(sql.FieldNotIn(FieldGatewayPaymentID, vs...))
}

// GatewayPaymentIDGT applies the GT predicate on the "gateway_payment_id" field.
func GatewayPaymentIDGT(v string) predicate.Payment {
	return predicate.Payment(sql.FieldGT(FieldGatewayPaymentID, v))
}

// GatewayPaymentIDGTE applies the GTE predicate on the "gateway_payment_id" field.
func GatewayPaymentIDGTE(v string) predicate.Payment {
	return predicate.Payment(sql.FieldGTE(FieldGatewayPaymentID, v))
}

// GatewayPaymentIDLT applies the LT predicate on the "gateway_payment_id" field.
func GatewayPaymentIDLT(v string) predicate.Payment {
	return predicate.Payment(sql.FieldLT(FieldGatewayPaymentID, v))
}

// GatewayPaymentIDLTE applies the LTE predicate on the "gateway_payment_id" field.
func GatewayPaymentIDLTE(v string) predicate.Payment {
	return predicate.Payment(sql.FieldLTE(FieldGatewayPaymentID, v))
}

// GatewayPaymentIDContains applies the Contains predicate on the "gateway_payment_id" field.
func GatewayPaymentIDContains(v string) predicate.Payment {
	return predicate.Payment(sql.FieldContains(FieldGatewayPaymentID, v))
}

// GatewayPaymentIDHasPrefix applies the HasPrefix predicate on the "gateway_payment_id" field.
func GatewayPaymentIDHasPrefix(v string) predicate.Payment {
	return predicate.Payment(sql.FieldHasPrefix(FieldGatewayPaymentID, v))
}

// GatewayPaymentIDHasSuffix applies the HasSuffix predicate on the "gateway_payment_id" field.
func GatewayPaymentIDHasSuffix(v string) predicate.Payment {
	return predicate.Payment(sql.FieldHasSuffix(FieldGatewayPaymentID, v))
}

// GatewayPaymentIDIsNil applies the IsNil predicate on the "gateway_payment_id" field.
func GatewayPaymentIDIsNil() predicate.Payment {
	return predicate.Payment(sql.FieldIsNull(FieldGatewayPaymentID))
}

// GatewayPaymentIDNotNil applies the NotNil predicate on the "gateway_payment_id" field.
func GatewayPaymentIDNotNil() predicate.Payment {
	return predicate.Payment(sql.FieldNotNull(FieldGatewayPaymentID))
}

// GatewayPaymentIDEqualFold applies the EqualFold predicate on the "gateway_payment_id" field.
func GatewayPaymentIDEqualFold(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEqualFold(FieldGatewayPaymentID, v))
}

// GatewayPaymentIDContainsFold applies the ContainsFold predicate on the "gateway_payment_id" field.
func GatewayPaymentIDContainsFold(v string) predicate.Payment {
	return predicate.Payment(sql.FieldContainsFold(FieldGatewayPaymentID, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v decimal.Decimal) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v decimal.Decimal) predicate.Payment {
	return predicate.Payment(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...decimal.Decimal) predicate.Payment {
	return predicate.Payment(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...decimal.Decimal) predicate.Payment {
	return predicate.Payment(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v decimal.Decimal) predicate.Payment {
	return predicate.Payment(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v decimal.Decimal) predicate.Payment {
	return predicate.Payment(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v decimal.Decimal) predicate.Payment {
	return predicate.Payment(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v decimal.Decimal) predicate.Payment {
	return predicate.Payment(sql.FieldLTE(FieldAmount, v))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v types.Currency) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldEQ(FieldCurrency, vc))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v types.Currency) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldNEQ(FieldCurrency, vc))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...types.Currency) predicate.Payment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Payment(sql.FieldIn(FieldCurrency, v...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...types.Currency) predicate.Payment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Payment(sql.FieldNotIn(FieldCurrency, v...))
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v types.Currency) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldGT(FieldCurrency, vc))
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v types.Currency) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldGTE(FieldCurrency, vc))
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v types.Currency) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldLT(FieldCurrency, vc))
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v types.Currency) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldLTE(FieldCurrency, vc))
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v types.Currency) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldContains(FieldCurrency, vc))
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v types.Currency) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldHasPrefix(FieldCurrency, vc))
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v types.Currency) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldHasSuffix(FieldCurrency, vc))
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v types.Currency) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldEqualFold(FieldCurrency, vc))
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v types.Currency) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldContainsFold(FieldCurrency, vc))
}

// PaymentStatusEQ applies the EQ predicate on the "payment_status" field.
func PaymentStatusEQ(v types.PaymentStatus) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldEQ(FieldPaymentStatus, vc))
}

// PaymentStatusNEQ applies the NEQ predicate on the "payment_status" field.
func PaymentStatusNEQ(v types.PaymentStatus) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldNEQ(FieldPaymentStatus, vc))
}

// PaymentStatusIn applies the In predicate on the "payment_status" field.
func PaymentStatusIn(vs ...types.PaymentStatus) predicate.Payment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Payment(sql.FieldIn(FieldPaymentStatus, v...))
}

// PaymentStatusNotIn applies the NotIn predicate on the "payment_status" field.
func PaymentStatusNotIn(vs ...types.PaymentStatus) predicate.Payment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Payment(sql.FieldNotIn(FieldPaymentStatus, v...))
}

// PaymentStatusGT applies the GT predicate on the "payment_status" field.
func PaymentStatusGT(v types.PaymentStatus) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldGT(FieldPaymentStatus, vc))
}

// PaymentStatusGTE applies the GTE predicate on the "payment_status" field.
func PaymentStatusGTE(v types.PaymentStatus) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldGTE(FieldPaymentStatus, vc))
}

// PaymentStatusLT applies the LT predicate on the "payment_status" field.
func PaymentStatusLT(v types.PaymentStatus) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldLT(FieldPaymentStatus, vc))
}

// PaymentStatusLTE applies the LTE predicate on the "payment_status" field.
func PaymentStatusLTE(v types.PaymentStatus) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldLTE(FieldPaymentStatus, vc))
}

// PaymentStatusContains applies the Contains predicate on the "payment_status" field.
func PaymentStatusContains(v types.PaymentStatus) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldContains(FieldPaymentStatus, vc))
}

// PaymentStatusHasPrefix applies the HasPrefix predicate on the "payment_status" field.
func PaymentStatusHasPrefix(v types.PaymentStatus) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldHasPrefix(FieldPaymentStatus, vc))
}

// PaymentStatusHasSuffix applies the HasSuffix predicate on the "payment_status" field.
func PaymentStatusHasSuffix(v types.PaymentStatus) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldHasSuffix(FieldPaymentStatus, vc))
}

// PaymentStatusEqualFold applies the EqualFold predicate on the "payment_status" field.
func PaymentStatusEqualFold(v types.PaymentStatus) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldEqualFold(FieldPaymentStatus, vc))
}

// PaymentStatusContainsFold applies the ContainsFold predicate on the "payment_status" field.
func PaymentStatusContainsFold(v types.PaymentStatus) predicate.Payment {
	vc := string(v)
	return predicate.Payment(sql.FieldContainsFold(FieldPaymentStatus, vc))
}

// TrackAttemptsEQ applies the EQ predicate on the "track_attempts" field.
func TrackAttemptsEQ(v bool) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldTrackAttempts, v))
}

// TrackAttemptsNEQ applies the NEQ predicate on the "track_attempts" field.
func TrackAttemptsNEQ(v bool) predicate.Payment {
	return predicate.Payment(sql.FieldNEQ(FieldTrackAttempts, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.Payment {
	return predicate.Payment(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.Payment {
	return predicate.Payment(sql.FieldNotNull(FieldMetadata))
}

// SucceededAtEQ applies the EQ predicate on the "succeeded_at" field.
func SucceededAtEQ(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldSucceededAt, v))
}

// SucceededAtNEQ applies the NEQ predicate on the "succeeded_at" field.
func SucceededAtNEQ(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldNEQ(FieldSucceededAt, v))
}

// SucceededAtIn applies the In predicate on the "succeeded_at" field.
func SucceededAtIn(vs ...time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldIn(FieldSucceededAt, vs...))
}

// SucceededAtNotIn applies the NotIn predicate on the "succeeded_at" field.
func SucceededAtNotIn(vs ...time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldNotIn(FieldSucceededAt, vs...))
}

// SucceededAtGT applies the GT predicate on the "succeeded_at" field.
func SucceededAtGT(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldGT(FieldSucceededAt, v))
}

// SucceededAtGTE applies the GTE predicate on the "succeeded_at" field.
func SucceededAtGTE(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldGTE(FieldSucceededAt, v))
}

// SucceededAtLT applies the LT predicate on the "succeeded_at" field.
func SucceededAtLT(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldLT(FieldSucceededAt, v))
}

// SucceededAtLTE applies the LTE predicate on the "succeeded_at" field.
func SucceededAtLTE(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldLTE(FieldSucceededAt, v))
}

// SucceededAtIsNil applies the IsNil predicate on the "succeeded_at" field.
func SucceededAtIsNil() predicate.Payment {
	return predicate.Payment(sql.FieldIsNull(FieldSucceededAt))
}

// SucceededAtNotNil applies the NotNil predicate on the "succeeded_at" field.
func SucceededAtNotNil() predicate.Payment {
	return predicate.Payment(sql.FieldNotNull(FieldSucceededAt))
}

// FailedAtEQ applies the EQ predicate on the "failed_at" field.
func FailedAtEQ(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldFailedAt, v))
}

// FailedAtNEQ applies the NEQ predicate on the "failed_at" field.
func FailedAtNEQ(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldNEQ(FieldFailedAt, v))
}

// FailedAtIn applies the In predicate on the "failed_at" field.
func FailedAtIn(vs ...time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldIn(FieldFailedAt, vs...))
}

// FailedAtNotIn applies the NotIn predicate on the "failed_at" field.
func FailedAtNotIn(vs ...time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldNotIn(FieldFailedAt, vs...))
}

// FailedAtGT applies the GT predicate on the "failed_at" field.
func FailedAtGT(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldGT(FieldFailedAt, v))
}

// FailedAtGTE applies the GTE predicate on the "failed_at" field.
func FailedAtGTE(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldGTE(FieldFailedAt, v))
}

// FailedAtLT applies the LT predicate on the "failed_at" field.
func FailedAtLT(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldLT(FieldFailedAt, v))
}

// FailedAtLTE applies the LTE predicate on the "failed_at" field.
func FailedAtLTE(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldLTE(FieldFailedAt, v))
}

// FailedAtIsNil applies the IsNil predicate on the "failed_at" field.
func FailedAtIsNil() predicate.Payment {
	return predicate.Payment(sql.FieldIsNull(FieldFailedAt))
}

// FailedAtNotNil applies the NotNil predicate on the "failed_at" field.
func FailedAtNotNil() predicate.Payment {
	return predicate.Payment(sql.FieldNotNull(FieldFailedAt))
}

// RefundedAtEQ applies the EQ predicate on the "refunded_at" field.
func RefundedAtEQ(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldRefundedAt, v))
}

// RefundedAtNEQ applies the NEQ predicate on the "refunded_at" field.
func RefundedAtNEQ(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldNEQ(FieldRefundedAt, v))
}

// RefundedAtIn applies the In predicate on the "refunded_at" field.
func RefundedAtIn(vs ...time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldIn(FieldRefundedAt, vs...))
}

// RefundedAtNotIn applies the NotIn predicate on the "refunded_at" field.
func RefundedAtNotIn(vs ...time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldNotIn(FieldRefundedAt, vs...))
}

// RefundedAtGT applies the GT predicate on the "refunded_at" field.
func RefundedAtGT(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldGT(FieldRefundedAt, v))
}

// RefundedAtGTE applies the GTE predicate on the "refunded_at" field.
func RefundedAtGTE(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldGTE(FieldRefundedAt, v))
}

// RefundedAtLT applies the LT predicate on the "refunded_at" field.
func RefundedAtLT(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldLT(FieldRefundedAt, v))
}

// RefundedAtLTE applies the LTE predicate on the "refunded_at" field.
func RefundedAtLTE(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldLTE(FieldRefundedAt, v))
}

// RefundedAtIsNil applies the IsNil predicate on the "refunded_at" field.
func RefundedAtIsNil() predicate.Payment {
	return predicate.Payment(sql.FieldIsNull(FieldRefundedAt))
}

// RefundedAtNotNil applies the NotNil predicate on the "refunded_at" field.
func RefundedAtNotNil() predicate.Payment {
	return predicate.Payment(sql.FieldNotNull(FieldRefundedAt))
}

// ErrorMessageEQ applies the EQ predicate on the "error_message" field.
func ErrorMessageEQ(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldErrorMessage, v))
}

// ErrorMessageNEQ applies the NEQ predicate on the "error_message" field.
func ErrorMessageNEQ(v string) predicate.Payment {
	return predicate.Payment(sql.FieldNEQ(FieldErrorMessage, v))
}

// ErrorMessageIn applies the In predicate on the "error_message" field.
func ErrorMessageIn(vs ...string) predicate.Payment {
	return predicate.Payment(sql.FieldIn(FieldErrorMessage, vs...))
}

// ErrorMessageNotIn applies the NotIn predicate on the "error_message" field.
func ErrorMessageNotIn(vs ...string) predicate.Payment {
	return predicate.Payment(sql.FieldNotIn(FieldErrorMessage, vs...))
}

// ErrorMessageGT applies the GT predicate on the "error_message" field.
func ErrorMessageGT(v string) predicate.Payment {
	return predicate.Payment(sql.FieldGT(FieldErrorMessage, v))
}

// ErrorMessageGTE applies the GTE predicate on the "error_message" field.
func ErrorMessageGTE(v string) predicate.Payment {
	return predicate.Payment(sql.FieldGTE(FieldErrorMessage, v))
}

// ErrorMessageLT applies the LT predicate on the "error_message" field.
func ErrorMessageLT(v string) predicate.Payment {
	return predicate.Payment(sql.FieldLT(FieldErrorMessage, v))
}

// ErrorMessageLTE applies the LTE predicate on the "error_message" field.
func ErrorMessageLTE(v string) predicate.Payment {
	return predicate.Payment(sql.FieldLTE(FieldErrorMessage, v))
}

// ErrorMessageContains applies the Contains predicate on the "error_message" field.
func ErrorMessageContains(v string) predicate.Payment {
	return predicate.Payment(sql.FieldContains(FieldErrorMessage, v))
}

// ErrorMessageHasPrefix applies the HasPrefix predicate on the "error_message" field.
func ErrorMessageHasPrefix(v string) predicate.Payment {
	return predicate.Payment(sql.FieldHasPrefix(FieldErrorMessage, v))
}

// ErrorMessageHasSuffix applies the HasSuffix predicate on the "error_message" field.
func ErrorMessageHasSuffix(v string) predicate.Payment {
	return predicate.Payment(sql.FieldHasSuffix(FieldErrorMessage, v))
}

// ErrorMessageIsNil applies the IsNil predicate on the "error_message" field.
func ErrorMessageIsNil() predicate.Payment {
	return predicate.Payment(sql.FieldIsNull(FieldErrorMessage))
}

// ErrorMessageNotNil applies the NotNil predicate on the "error_message" field.
func ErrorMessageNotNil() predicate.Payment {
	return predicate.Payment(sql.FieldNotNull(FieldErrorMessage))
}

// ErrorMessageEqualFold applies the EqualFold predicate on the "error_message" field.
func ErrorMessageEqualFold(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEqualFold(FieldErrorMessage, v))
}

// ErrorMessageContainsFold applies the ContainsFold predicate on the "error_message" field.
func ErrorMessageContainsFold(v string) predicate.Payment {
	return predicate.Payment(sql.FieldContainsFold(FieldErrorMessage, v))
}

// HasAttempts applies the HasEdge predicate on the "attempts" edge.
func HasAttempts() predicate.Payment {
	return predicate.Payment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AttemptsTable, AttemptsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAttemptsWith applies the HasEdge predicate on the "attempts" edge with a given conditions (other predicates).
func HasAttemptsWith(preds ...predicate.PaymentAttempt) predicate.Payment {
	return predicate.Payment(func(s *sql.Selector) {
		step := newAttemptsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Payment) predicate.Payment {
	return predicate.Payment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Payment) predicate.Payment {
	return predicate.Payment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Payment) predicate.Payment {
	return predicate.Payment(sql.NotPredicates(p))
}
