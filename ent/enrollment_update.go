// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/omkar273/codegeeky/ent/enrollment"
	"github.com/omkar273/codegeeky/ent/predicate"
	"github.com/omkar273/codegeeky/internal/types"
)

// EnrollmentUpdate is the builder for updating Enrollment entities.
type EnrollmentUpdate struct {
	config
	hooks    []Hook
	mutation *EnrollmentMutation
}

// Where appends a list predicates to the EnrollmentUpdate builder.
func (eu *EnrollmentUpdate) Where(ps ...predicate.Enrollment) *EnrollmentUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetStatus sets the "status" field.
func (eu *EnrollmentUpdate) SetStatus(s string) *EnrollmentUpdate {
	eu.mutation.SetStatus(s)
	return eu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (eu *EnrollmentUpdate) SetNillableStatus(s *string) *EnrollmentUpdate {
	if s != nil {
		eu.SetStatus(*s)
	}
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EnrollmentUpdate) SetUpdatedAt(t time.Time) *EnrollmentUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetUpdatedBy sets the "updated_by" field.
func (eu *EnrollmentUpdate) SetUpdatedBy(s string) *EnrollmentUpdate {
	eu.mutation.SetUpdatedBy(s)
	return eu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (eu *EnrollmentUpdate) SetNillableUpdatedBy(s *string) *EnrollmentUpdate {
	if s != nil {
		eu.SetUpdatedBy(*s)
	}
	return eu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (eu *EnrollmentUpdate) ClearUpdatedBy() *EnrollmentUpdate {
	eu.mutation.ClearUpdatedBy()
	return eu
}

// SetMetadata sets the "metadata" field.
func (eu *EnrollmentUpdate) SetMetadata(m map[string]string) *EnrollmentUpdate {
	eu.mutation.SetMetadata(m)
	return eu
}

// ClearMetadata clears the value of the "metadata" field.
func (eu *EnrollmentUpdate) ClearMetadata() *EnrollmentUpdate {
	eu.mutation.ClearMetadata()
	return eu
}

// SetUserID sets the "user_id" field.
func (eu *EnrollmentUpdate) SetUserID(s string) *EnrollmentUpdate {
	eu.mutation.SetUserID(s)
	return eu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (eu *EnrollmentUpdate) SetNillableUserID(s *string) *EnrollmentUpdate {
	if s != nil {
		eu.SetUserID(*s)
	}
	return eu
}

// SetInternshipID sets the "internship_id" field.
func (eu *EnrollmentUpdate) SetInternshipID(s string) *EnrollmentUpdate {
	eu.mutation.SetInternshipID(s)
	return eu
}

// SetNillableInternshipID sets the "internship_id" field if the given value is not nil.
func (eu *EnrollmentUpdate) SetNillableInternshipID(s *string) *EnrollmentUpdate {
	if s != nil {
		eu.SetInternshipID(*s)
	}
	return eu
}

// SetEnrollmentStatus sets the "enrollment_status" field.
func (eu *EnrollmentUpdate) SetEnrollmentStatus(ts types.EnrollmentStatus) *EnrollmentUpdate {
	eu.mutation.SetEnrollmentStatus(ts)
	return eu
}

// SetNillableEnrollmentStatus sets the "enrollment_status" field if the given value is not nil.
func (eu *EnrollmentUpdate) SetNillableEnrollmentStatus(ts *types.EnrollmentStatus) *EnrollmentUpdate {
	if ts != nil {
		eu.SetEnrollmentStatus(*ts)
	}
	return eu
}

// SetPaymentStatus sets the "payment_status" field.
func (eu *EnrollmentUpdate) SetPaymentStatus(ts types.PaymentStatus) *EnrollmentUpdate {
	eu.mutation.SetPaymentStatus(ts)
	return eu
}

// SetNillablePaymentStatus sets the "payment_status" field if the given value is not nil.
func (eu *EnrollmentUpdate) SetNillablePaymentStatus(ts *types.PaymentStatus) *EnrollmentUpdate {
	if ts != nil {
		eu.SetPaymentStatus(*ts)
	}
	return eu
}

// SetEnrolledAt sets the "enrolled_at" field.
func (eu *EnrollmentUpdate) SetEnrolledAt(t time.Time) *EnrollmentUpdate {
	eu.mutation.SetEnrolledAt(t)
	return eu
}

// SetNillableEnrolledAt sets the "enrolled_at" field if the given value is not nil.
func (eu *EnrollmentUpdate) SetNillableEnrolledAt(t *time.Time) *EnrollmentUpdate {
	if t != nil {
		eu.SetEnrolledAt(*t)
	}
	return eu
}

// ClearEnrolledAt clears the value of the "enrolled_at" field.
func (eu *EnrollmentUpdate) ClearEnrolledAt() *EnrollmentUpdate {
	eu.mutation.ClearEnrolledAt()
	return eu
}

// SetPaymentID sets the "payment_id" field.
func (eu *EnrollmentUpdate) SetPaymentID(s string) *EnrollmentUpdate {
	eu.mutation.SetPaymentID(s)
	return eu
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (eu *EnrollmentUpdate) SetNillablePaymentID(s *string) *EnrollmentUpdate {
	if s != nil {
		eu.SetPaymentID(*s)
	}
	return eu
}

// ClearPaymentID clears the value of the "payment_id" field.
func (eu *EnrollmentUpdate) ClearPaymentID() *EnrollmentUpdate {
	eu.mutation.ClearPaymentID()
	return eu
}

// SetRefundedAt sets the "refunded_at" field.
func (eu *EnrollmentUpdate) SetRefundedAt(t time.Time) *EnrollmentUpdate {
	eu.mutation.SetRefundedAt(t)
	return eu
}

// SetNillableRefundedAt sets the "refunded_at" field if the given value is not nil.
func (eu *EnrollmentUpdate) SetNillableRefundedAt(t *time.Time) *EnrollmentUpdate {
	if t != nil {
		eu.SetRefundedAt(*t)
	}
	return eu
}

// ClearRefundedAt clears the value of the "refunded_at" field.
func (eu *EnrollmentUpdate) ClearRefundedAt() *EnrollmentUpdate {
	eu.mutation.ClearRefundedAt()
	return eu
}

// SetCancellationReason sets the "cancellation_reason" field.
func (eu *EnrollmentUpdate) SetCancellationReason(s string) *EnrollmentUpdate {
	eu.mutation.SetCancellationReason(s)
	return eu
}

// SetNillableCancellationReason sets the "cancellation_reason" field if the given value is not nil.
func (eu *EnrollmentUpdate) SetNillableCancellationReason(s *string) *EnrollmentUpdate {
	if s != nil {
		eu.SetCancellationReason(*s)
	}
	return eu
}

// ClearCancellationReason clears the value of the "cancellation_reason" field.
func (eu *EnrollmentUpdate) ClearCancellationReason() *EnrollmentUpdate {
	eu.mutation.ClearCancellationReason()
	return eu
}

// SetRefundReason sets the "refund_reason" field.
func (eu *EnrollmentUpdate) SetRefundReason(s string) *EnrollmentUpdate {
	eu.mutation.SetRefundReason(s)
	return eu
}

// SetNillableRefundReason sets the "refund_reason" field if the given value is not nil.
func (eu *EnrollmentUpdate) SetNillableRefundReason(s *string) *EnrollmentUpdate {
	if s != nil {
		eu.SetRefundReason(*s)
	}
	return eu
}

// ClearRefundReason clears the value of the "refund_reason" field.
func (eu *EnrollmentUpdate) ClearRefundReason() *EnrollmentUpdate {
	eu.mutation.ClearRefundReason()
	return eu
}

// Mutation returns the EnrollmentMutation object of the builder.
func (eu *EnrollmentUpdate) Mutation() *EnrollmentMutation {
	return eu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EnrollmentUpdate) Save(ctx context.Context) (int, error) {
	eu.defaults()
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EnrollmentUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EnrollmentUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EnrollmentUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EnrollmentUpdate) defaults() {
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		v := enrollment.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EnrollmentUpdate) check() error {
	if v, ok := eu.mutation.UserID(); ok {
		if err := enrollment.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "Enrollment.user_id": %w`, err)}
		}
	}
	if v, ok := eu.mutation.InternshipID(); ok {
		if err := enrollment.InternshipIDValidator(v); err != nil {
			return &ValidationError{Name: "internship_id", err: fmt.Errorf(`ent: validator failed for field "Enrollment.internship_id": %w`, err)}
		}
	}
	if v, ok := eu.mutation.EnrollmentStatus(); ok {
		if err := enrollment.EnrollmentStatusValidator(string(v)); err != nil {
			return &ValidationError{Name: "enrollment_status", err: fmt.Errorf(`ent: validator failed for field "Enrollment.enrollment_status": %w`, err)}
		}
	}
	if v, ok := eu.mutation.PaymentStatus(); ok {
		if err := enrollment.PaymentStatusValidator(string(v)); err != nil {
			return &ValidationError{Name: "payment_status", err: fmt.Errorf(`ent: validator failed for field "Enrollment.payment_status": %w`, err)}
		}
	}
	return nil
}

func (eu *EnrollmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(enrollment.Table, enrollment.Columns, sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeString))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Status(); ok {
		_spec.SetField(enrollment.FieldStatus, field.TypeString, value)
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(enrollment.FieldUpdatedAt, field.TypeTime, value)
	}
	if eu.mutation.CreatedByCleared() {
		_spec.ClearField(enrollment.FieldCreatedBy, field.TypeString)
	}
	if value, ok := eu.mutation.UpdatedBy(); ok {
		_spec.SetField(enrollment.FieldUpdatedBy, field.TypeString, value)
	}
	if eu.mutation.UpdatedByCleared() {
		_spec.ClearField(enrollment.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := eu.mutation.Metadata(); ok {
		_spec.SetField(enrollment.FieldMetadata, field.TypeJSON, value)
	}
	if eu.mutation.MetadataCleared() {
		_spec.ClearField(enrollment.FieldMetadata, field.TypeJSON)
	}
	if value, ok := eu.mutation.UserID(); ok {
		_spec.SetField(enrollment.FieldUserID, field.TypeString, value)
	}
	if value, ok := eu.mutation.InternshipID(); ok {
		_spec.SetField(enrollment.FieldInternshipID, field.TypeString, value)
	}
	if value, ok := eu.mutation.EnrollmentStatus(); ok {
		_spec.SetField(enrollment.FieldEnrollmentStatus, field.TypeString, value)
	}
	if value, ok := eu.mutation.PaymentStatus(); ok {
		_spec.SetField(enrollment.FieldPaymentStatus, field.TypeString, value)
	}
	if value, ok := eu.mutation.EnrolledAt(); ok {
		_spec.SetField(enrollment.FieldEnrolledAt, field.TypeTime, value)
	}
	if eu.mutation.EnrolledAtCleared() {
		_spec.ClearField(enrollment.FieldEnrolledAt, field.TypeTime)
	}
	if value, ok := eu.mutation.PaymentID(); ok {
		_spec.SetField(enrollment.FieldPaymentID, field.TypeString, value)
	}
	if eu.mutation.PaymentIDCleared() {
		_spec.ClearField(enrollment.FieldPaymentID, field.TypeString)
	}
	if value, ok := eu.mutation.RefundedAt(); ok {
		_spec.SetField(enrollment.FieldRefundedAt, field.TypeTime, value)
	}
	if eu.mutation.RefundedAtCleared() {
		_spec.ClearField(enrollment.FieldRefundedAt, field.TypeTime)
	}
	if value, ok := eu.mutation.CancellationReason(); ok {
		_spec.SetField(enrollment.FieldCancellationReason, field.TypeString, value)
	}
	if eu.mutation.CancellationReasonCleared() {
		_spec.ClearField(enrollment.FieldCancellationReason, field.TypeString)
	}
	if value, ok := eu.mutation.RefundReason(); ok {
		_spec.SetField(enrollment.FieldRefundReason, field.TypeString, value)
	}
	if eu.mutation.RefundReasonCleared() {
		_spec.ClearField(enrollment.FieldRefundReason, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enrollment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EnrollmentUpdateOne is the builder for updating a single Enrollment entity.
type EnrollmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EnrollmentMutation
}

// SetStatus sets the "status" field.
func (euo *EnrollmentUpdateOne) SetStatus(s string) *EnrollmentUpdateOne {
	euo.mutation.SetStatus(s)
	return euo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (euo *EnrollmentUpdateOne) SetNillableStatus(s *string) *EnrollmentUpdateOne {
	if s != nil {
		euo.SetStatus(*s)
	}
	return euo
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EnrollmentUpdateOne) SetUpdatedAt(t time.Time) *EnrollmentUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetUpdatedBy sets the "updated_by" field.
func (euo *EnrollmentUpdateOne) SetUpdatedBy(s string) *EnrollmentUpdateOne {
	euo.mutation.SetUpdatedBy(s)
	return euo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (euo *EnrollmentUpdateOne) SetNillableUpdatedBy(s *string) *EnrollmentUpdateOne {
	if s != nil {
		euo.SetUpdatedBy(*s)
	}
	return euo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (euo *EnrollmentUpdateOne) ClearUpdatedBy() *EnrollmentUpdateOne {
	euo.mutation.ClearUpdatedBy()
	return euo
}

// SetMetadata sets the "metadata" field.
func (euo *EnrollmentUpdateOne) SetMetadata(m map[string]string) *EnrollmentUpdateOne {
	euo.mutation.SetMetadata(m)
	return euo
}

// ClearMetadata clears the value of the "metadata" field.
func (euo *EnrollmentUpdateOne) ClearMetadata() *EnrollmentUpdateOne {
	euo.mutation.ClearMetadata()
	return euo
}

// SetUserID sets the "user_id" field.
func (euo *EnrollmentUpdateOne) SetUserID(s string) *EnrollmentUpdateOne {
	euo.mutation.SetUserID(s)
	return euo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (euo *EnrollmentUpdateOne) SetNillableUserID(s *string) *EnrollmentUpdateOne {
	if s != nil {
		euo.SetUserID(*s)
	}
	return euo
}

// SetInternshipID sets the "internship_id" field.
func (euo *EnrollmentUpdateOne) SetInternshipID(s string) *EnrollmentUpdateOne {
	euo.mutation.SetInternshipID(s)
	return euo
}

// SetNillableInternshipID sets the "internship_id" field if the given value is not nil.
func (euo *EnrollmentUpdateOne) SetNillableInternshipID(s *string) *EnrollmentUpdateOne {
	if s != nil {
		euo.SetInternshipID(*s)
	}
	return euo
}

// SetEnrollmentStatus sets the "enrollment_status" field.
func (euo *EnrollmentUpdateOne) SetEnrollmentStatus(ts types.EnrollmentStatus) *EnrollmentUpdateOne {
	euo.mutation.SetEnrollmentStatus(ts)
	return euo
}

// SetNillableEnrollmentStatus sets the "enrollment_status" field if the given value is not nil.
func (euo *EnrollmentUpdateOne) SetNillableEnrollmentStatus(ts *types.EnrollmentStatus) *EnrollmentUpdateOne {
	if ts != nil {
		euo.SetEnrollmentStatus(*ts)
	}
	return euo
}

// SetPaymentStatus sets the "payment_status" field.
func (euo *EnrollmentUpdateOne) SetPaymentStatus(ts types.PaymentStatus) *EnrollmentUpdateOne {
	euo.mutation.SetPaymentStatus(ts)
	return euo
}

// SetNillablePaymentStatus sets the "payment_status" field if the given value is not nil.
func (euo *EnrollmentUpdateOne) SetNillablePaymentStatus(ts *types.PaymentStatus) *EnrollmentUpdateOne {
	if ts != nil {
		euo.SetPaymentStatus(*ts)
	}
	return euo
}

// SetEnrolledAt sets the "enrolled_at" field.
func (euo *EnrollmentUpdateOne) SetEnrolledAt(t time.Time) *EnrollmentUpdateOne {
	euo.mutation.SetEnrolledAt(t)
	return euo
}

// SetNillableEnrolledAt sets the "enrolled_at" field if the given value is not nil.
func (euo *EnrollmentUpdateOne) SetNillableEnrolledAt(t *time.Time) *EnrollmentUpdateOne {
	if t != nil {
		euo.SetEnrolledAt(*t)
	}
	return euo
}

// ClearEnrolledAt clears the value of the "enrolled_at" field.
func (euo *EnrollmentUpdateOne) ClearEnrolledAt() *EnrollmentUpdateOne {
	euo.mutation.ClearEnrolledAt()
	return euo
}

// SetPaymentID sets the "payment_id" field.
func (euo *EnrollmentUpdateOne) SetPaymentID(s string) *EnrollmentUpdateOne {
	euo.mutation.SetPaymentID(s)
	return euo
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (euo *EnrollmentUpdateOne) SetNillablePaymentID(s *string) *EnrollmentUpdateOne {
	if s != nil {
		euo.SetPaymentID(*s)
	}
	return euo
}

// ClearPaymentID clears the value of the "payment_id" field.
func (euo *EnrollmentUpdateOne) ClearPaymentID() *EnrollmentUpdateOne {
	euo.mutation.ClearPaymentID()
	return euo
}

// SetRefundedAt sets the "refunded_at" field.
func (euo *EnrollmentUpdateOne) SetRefundedAt(t time.Time) *EnrollmentUpdateOne {
	euo.mutation.SetRefundedAt(t)
	return euo
}

// SetNillableRefundedAt sets the "refunded_at" field if the given value is not nil.
func (euo *EnrollmentUpdateOne) SetNillableRefundedAt(t *time.Time) *EnrollmentUpdateOne {
	if t != nil {
		euo.SetRefundedAt(*t)
	}
	return euo
}

// ClearRefundedAt clears the value of the "refunded_at" field.
func (euo *EnrollmentUpdateOne) ClearRefundedAt() *EnrollmentUpdateOne {
	euo.mutation.ClearRefundedAt()
	return euo
}

// SetCancellationReason sets the "cancellation_reason" field.
func (euo *EnrollmentUpdateOne) SetCancellationReason(s string) *EnrollmentUpdateOne {
	euo.mutation.SetCancellationReason(s)
	return euo
}

// SetNillableCancellationReason sets the "cancellation_reason" field if the given value is not nil.
func (euo *EnrollmentUpdateOne) SetNillableCancellationReason(s *string) *EnrollmentUpdateOne {
	if s != nil {
		euo.SetCancellationReason(*s)
	}
	return euo
}

// ClearCancellationReason clears the value of the "cancellation_reason" field.
func (euo *EnrollmentUpdateOne) ClearCancellationReason() *EnrollmentUpdateOne {
	euo.mutation.ClearCancellationReason()
	return euo
}

// SetRefundReason sets the "refund_reason" field.
func (euo *EnrollmentUpdateOne) SetRefundReason(s string) *EnrollmentUpdateOne {
	euo.mutation.SetRefundReason(s)
	return euo
}

// SetNillableRefundReason sets the "refund_reason" field if the given value is not nil.
func (euo *EnrollmentUpdateOne) SetNillableRefundReason(s *string) *EnrollmentUpdateOne {
	if s != nil {
		euo.SetRefundReason(*s)
	}
	return euo
}

// ClearRefundReason clears the value of the "refund_reason" field.
func (euo *EnrollmentUpdateOne) ClearRefundReason() *EnrollmentUpdateOne {
	euo.mutation.ClearRefundReason()
	return euo
}

// Mutation returns the EnrollmentMutation object of the builder.
func (euo *EnrollmentUpdateOne) Mutation() *EnrollmentMutation {
	return euo.mutation
}

// Where appends a list predicates to the EnrollmentUpdate builder.
func (euo *EnrollmentUpdateOne) Where(ps ...predicate.Enrollment) *EnrollmentUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EnrollmentUpdateOne) Select(field string, fields ...string) *EnrollmentUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Enrollment entity.
func (euo *EnrollmentUpdateOne) Save(ctx context.Context) (*Enrollment, error) {
	euo.defaults()
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EnrollmentUpdateOne) SaveX(ctx context.Context) *Enrollment {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EnrollmentUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EnrollmentUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EnrollmentUpdateOne) defaults() {
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		v := enrollment.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EnrollmentUpdateOne) check() error {
	if v, ok := euo.mutation.UserID(); ok {
		if err := enrollment.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "Enrollment.user_id": %w`, err)}
		}
	}
	if v, ok := euo.mutation.InternshipID(); ok {
		if err := enrollment.InternshipIDValidator(v); err != nil {
			return &ValidationError{Name: "internship_id", err: fmt.Errorf(`ent: validator failed for field "Enrollment.internship_id": %w`, err)}
		}
	}
	if v, ok := euo.mutation.EnrollmentStatus(); ok {
		if err := enrollment.EnrollmentStatusValidator(string(v)); err != nil {
			return &ValidationError{Name: "enrollment_status", err: fmt.Errorf(`ent: validator failed for field "Enrollment.enrollment_status": %w`, err)}
		}
	}
	if v, ok := euo.mutation.PaymentStatus(); ok {
		if err := enrollment.PaymentStatusValidator(string(v)); err != nil {
			return &ValidationError{Name: "payment_status", err: fmt.Errorf(`ent: validator failed for field "Enrollment.payment_status": %w`, err)}
		}
	}
	return nil
}

func (euo *EnrollmentUpdateOne) sqlSave(ctx context.Context) (_node *Enrollment, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(enrollment.Table, enrollment.Columns, sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeString))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Enrollment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enrollment.FieldID)
		for _, f := range fields {
			if !enrollment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != enrollment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Status(); ok {
		_spec.SetField(enrollment.FieldStatus, field.TypeString, value)
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(enrollment.FieldUpdatedAt, field.TypeTime, value)
	}
	if euo.mutation.CreatedByCleared() {
		_spec.ClearField(enrollment.FieldCreatedBy, field.TypeString)
	}
	if value, ok := euo.mutation.UpdatedBy(); ok {
		_spec.SetField(enrollment.FieldUpdatedBy, field.TypeString, value)
	}
	if euo.mutation.UpdatedByCleared() {
		_spec.ClearField(enrollment.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := euo.mutation.Metadata(); ok {
		_spec.SetField(enrollment.FieldMetadata, field.TypeJSON, value)
	}
	if euo.mutation.MetadataCleared() {
		_spec.ClearField(enrollment.FieldMetadata, field.TypeJSON)
	}
	if value, ok := euo.mutation.UserID(); ok {
		_spec.SetField(enrollment.FieldUserID, field.TypeString, value)
	}
	if value, ok := euo.mutation.InternshipID(); ok {
		_spec.SetField(enrollment.FieldInternshipID, field.TypeString, value)
	}
	if value, ok := euo.mutation.EnrollmentStatus(); ok {
		_spec.SetField(enrollment.FieldEnrollmentStatus, field.TypeString, value)
	}
	if value, ok := euo.mutation.PaymentStatus(); ok {
		_spec.SetField(enrollment.FieldPaymentStatus, field.TypeString, value)
	}
	if value, ok := euo.mutation.EnrolledAt(); ok {
		_spec.SetField(enrollment.FieldEnrolledAt, field.TypeTime, value)
	}
	if euo.mutation.EnrolledAtCleared() {
		_spec.ClearField(enrollment.FieldEnrolledAt, field.TypeTime)
	}
	if value, ok := euo.mutation.PaymentID(); ok {
		_spec.SetField(enrollment.FieldPaymentID, field.TypeString, value)
	}
	if euo.mutation.PaymentIDCleared() {
		_spec.ClearField(enrollment.FieldPaymentID, field.TypeString)
	}
	if value, ok := euo.mutation.RefundedAt(); ok {
		_spec.SetField(enrollment.FieldRefundedAt, field.TypeTime, value)
	}
	if euo.mutation.RefundedAtCleared() {
		_spec.ClearField(enrollment.FieldRefundedAt, field.TypeTime)
	}
	if value, ok := euo.mutation.CancellationReason(); ok {
		_spec.SetField(enrollment.FieldCancellationReason, field.TypeString, value)
	}
	if euo.mutation.CancellationReasonCleared() {
		_spec.ClearField(enrollment.FieldCancellationReason, field.TypeString)
	}
	if value, ok := euo.mutation.RefundReason(); ok {
		_spec.SetField(enrollment.FieldRefundReason, field.TypeString, value)
	}
	if euo.mutation.RefundReasonCleared() {
		_spec.ClearField(enrollment.FieldRefundReason, field.TypeString)
	}
	_node = &Enrollment{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enrollment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
