// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/omkar273/codegeeky/ent/cart"
	"github.com/omkar273/codegeeky/ent/cartlineitems"
	"github.com/omkar273/codegeeky/ent/predicate"
)

// CartUpdate is the builder for updating Cart entities.
type CartUpdate struct {
	config
	hooks    []Hook
	mutation *CartMutation
}

// Where appends a list predicates to the CartUpdate builder.
func (cu *CartUpdate) Where(ps ...predicate.Cart) *CartUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetStatus sets the "status" field.
func (cu *CartUpdate) SetStatus(s string) *CartUpdate {
	cu.mutation.SetStatus(s)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *CartUpdate) SetNillableStatus(s *string) *CartUpdate {
	if s != nil {
		cu.SetStatus(*s)
	}
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CartUpdate) SetUpdatedAt(t time.Time) *CartUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetUpdatedBy sets the "updated_by" field.
func (cu *CartUpdate) SetUpdatedBy(s string) *CartUpdate {
	cu.mutation.SetUpdatedBy(s)
	return cu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cu *CartUpdate) SetNillableUpdatedBy(s *string) *CartUpdate {
	if s != nil {
		cu.SetUpdatedBy(*s)
	}
	return cu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cu *CartUpdate) ClearUpdatedBy() *CartUpdate {
	cu.mutation.ClearUpdatedBy()
	return cu
}

// SetMetadata sets the "metadata" field.
func (cu *CartUpdate) SetMetadata(m map[string]string) *CartUpdate {
	cu.mutation.SetMetadata(m)
	return cu
}

// ClearMetadata clears the value of the "metadata" field.
func (cu *CartUpdate) ClearMetadata() *CartUpdate {
	cu.mutation.ClearMetadata()
	return cu
}

// AddLineItemIDs adds the "line_items" edge to the CartLineItems entity by IDs.
func (cu *CartUpdate) AddLineItemIDs(ids ...string) *CartUpdate {
	cu.mutation.AddLineItemIDs(ids...)
	return cu
}

// AddLineItems adds the "line_items" edges to the CartLineItems entity.
func (cu *CartUpdate) AddLineItems(c ...*CartLineItems) *CartUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddLineItemIDs(ids...)
}

// Mutation returns the CartMutation object of the builder.
func (cu *CartUpdate) Mutation() *CartMutation {
	return cu.mutation
}

// ClearLineItems clears all "line_items" edges to the CartLineItems entity.
func (cu *CartUpdate) ClearLineItems() *CartUpdate {
	cu.mutation.ClearLineItems()
	return cu
}

// RemoveLineItemIDs removes the "line_items" edge to CartLineItems entities by IDs.
func (cu *CartUpdate) RemoveLineItemIDs(ids ...string) *CartUpdate {
	cu.mutation.RemoveLineItemIDs(ids...)
	return cu
}

// RemoveLineItems removes "line_items" edges to CartLineItems entities.
func (cu *CartUpdate) RemoveLineItems(c ...*CartLineItems) *CartUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveLineItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CartUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CartUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CartUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CartUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CartUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := cart.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CartUpdate) check() error {
	if cu.mutation.UserCleared() && len(cu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Cart.user"`)
	}
	return nil
}

func (cu *CartUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(cart.Table, cart.Columns, sqlgraph.NewFieldSpec(cart.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(cart.FieldStatus, field.TypeString, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(cart.FieldUpdatedAt, field.TypeTime, value)
	}
	if cu.mutation.CreatedByCleared() {
		_spec.ClearField(cart.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cu.mutation.UpdatedBy(); ok {
		_spec.SetField(cart.FieldUpdatedBy, field.TypeString, value)
	}
	if cu.mutation.UpdatedByCleared() {
		_spec.ClearField(cart.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := cu.mutation.Metadata(); ok {
		_spec.SetField(cart.FieldMetadata, field.TypeJSON, value)
	}
	if cu.mutation.MetadataCleared() {
		_spec.ClearField(cart.FieldMetadata, field.TypeJSON)
	}
	if cu.mutation.LineItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cart.LineItemsTable,
			Columns: []string{cart.LineItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartlineitems.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedLineItemsIDs(); len(nodes) > 0 && !cu.mutation.LineItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cart.LineItemsTable,
			Columns: []string{cart.LineItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartlineitems.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.LineItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cart.LineItemsTable,
			Columns: []string{cart.LineItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartlineitems.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cart.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CartUpdateOne is the builder for updating a single Cart entity.
type CartUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CartMutation
}

// SetStatus sets the "status" field.
func (cuo *CartUpdateOne) SetStatus(s string) *CartUpdateOne {
	cuo.mutation.SetStatus(s)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *CartUpdateOne) SetNillableStatus(s *string) *CartUpdateOne {
	if s != nil {
		cuo.SetStatus(*s)
	}
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CartUpdateOne) SetUpdatedAt(t time.Time) *CartUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetUpdatedBy sets the "updated_by" field.
func (cuo *CartUpdateOne) SetUpdatedBy(s string) *CartUpdateOne {
	cuo.mutation.SetUpdatedBy(s)
	return cuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cuo *CartUpdateOne) SetNillableUpdatedBy(s *string) *CartUpdateOne {
	if s != nil {
		cuo.SetUpdatedBy(*s)
	}
	return cuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cuo *CartUpdateOne) ClearUpdatedBy() *CartUpdateOne {
	cuo.mutation.ClearUpdatedBy()
	return cuo
}

// SetMetadata sets the "metadata" field.
func (cuo *CartUpdateOne) SetMetadata(m map[string]string) *CartUpdateOne {
	cuo.mutation.SetMetadata(m)
	return cuo
}

// ClearMetadata clears the value of the "metadata" field.
func (cuo *CartUpdateOne) ClearMetadata() *CartUpdateOne {
	cuo.mutation.ClearMetadata()
	return cuo
}

// AddLineItemIDs adds the "line_items" edge to the CartLineItems entity by IDs.
func (cuo *CartUpdateOne) AddLineItemIDs(ids ...string) *CartUpdateOne {
	cuo.mutation.AddLineItemIDs(ids...)
	return cuo
}

// AddLineItems adds the "line_items" edges to the CartLineItems entity.
func (cuo *CartUpdateOne) AddLineItems(c ...*CartLineItems) *CartUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddLineItemIDs(ids...)
}

// Mutation returns the CartMutation object of the builder.
func (cuo *CartUpdateOne) Mutation() *CartMutation {
	return cuo.mutation
}

// ClearLineItems clears all "line_items" edges to the CartLineItems entity.
func (cuo *CartUpdateOne) ClearLineItems() *CartUpdateOne {
	cuo.mutation.ClearLineItems()
	return cuo
}

// RemoveLineItemIDs removes the "line_items" edge to CartLineItems entities by IDs.
func (cuo *CartUpdateOne) RemoveLineItemIDs(ids ...string) *CartUpdateOne {
	cuo.mutation.RemoveLineItemIDs(ids...)
	return cuo
}

// RemoveLineItems removes "line_items" edges to CartLineItems entities.
func (cuo *CartUpdateOne) RemoveLineItems(c ...*CartLineItems) *CartUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveLineItemIDs(ids...)
}

// Where appends a list predicates to the CartUpdate builder.
func (cuo *CartUpdateOne) Where(ps ...predicate.Cart) *CartUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CartUpdateOne) Select(field string, fields ...string) *CartUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Cart entity.
func (cuo *CartUpdateOne) Save(ctx context.Context) (*Cart, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CartUpdateOne) SaveX(ctx context.Context) *Cart {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CartUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CartUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CartUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := cart.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CartUpdateOne) check() error {
	if cuo.mutation.UserCleared() && len(cuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Cart.user"`)
	}
	return nil
}

func (cuo *CartUpdateOne) sqlSave(ctx context.Context) (_node *Cart, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(cart.Table, cart.Columns, sqlgraph.NewFieldSpec(cart.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Cart.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cart.FieldID)
		for _, f := range fields {
			if !cart.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cart.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(cart.FieldStatus, field.TypeString, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(cart.FieldUpdatedAt, field.TypeTime, value)
	}
	if cuo.mutation.CreatedByCleared() {
		_spec.ClearField(cart.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cuo.mutation.UpdatedBy(); ok {
		_spec.SetField(cart.FieldUpdatedBy, field.TypeString, value)
	}
	if cuo.mutation.UpdatedByCleared() {
		_spec.ClearField(cart.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := cuo.mutation.Metadata(); ok {
		_spec.SetField(cart.FieldMetadata, field.TypeJSON, value)
	}
	if cuo.mutation.MetadataCleared() {
		_spec.ClearField(cart.FieldMetadata, field.TypeJSON)
	}
	if cuo.mutation.LineItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cart.LineItemsTable,
			Columns: []string{cart.LineItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartlineitems.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedLineItemsIDs(); len(nodes) > 0 && !cuo.mutation.LineItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cart.LineItemsTable,
			Columns: []string{cart.LineItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartlineitems.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.LineItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cart.LineItemsTable,
			Columns: []string{cart.LineItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartlineitems.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Cart{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cart.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
