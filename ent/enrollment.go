// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/omkar273/codegeeky/ent/enrollment"
	"github.com/omkar273/codegeeky/internal/types"
)

// Enrollment is the model entity for the Enrollment schema.
type Enrollment struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// InternshipID holds the value of the "internship_id" field.
	InternshipID string `json:"internship_id,omitempty"`
	// EnrollmentStatus holds the value of the "enrollment_status" field.
	EnrollmentStatus types.EnrollmentStatus `json:"enrollment_status,omitempty"`
	// PaymentStatus holds the value of the "payment_status" field.
	PaymentStatus types.PaymentStatus `json:"payment_status,omitempty"`
	// EnrolledAt holds the value of the "enrolled_at" field.
	EnrolledAt *time.Time `json:"enrolled_at,omitempty"`
	// PaymentID holds the value of the "payment_id" field.
	PaymentID *string `json:"payment_id,omitempty"`
	// RefundedAt holds the value of the "refunded_at" field.
	RefundedAt *time.Time `json:"refunded_at,omitempty"`
	// CancellationReason holds the value of the "cancellation_reason" field.
	CancellationReason *string `json:"cancellation_reason,omitempty"`
	// RefundReason holds the value of the "refund_reason" field.
	RefundReason *string `json:"refund_reason,omitempty"`
	// IdempotencyKey holds the value of the "idempotency_key" field.
	IdempotencyKey *string `json:"idempotency_key,omitempty"`
	selectValues   sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Enrollment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case enrollment.FieldMetadata:
			values[i] = new([]byte)
		case enrollment.FieldID, enrollment.FieldStatus, enrollment.FieldCreatedBy, enrollment.FieldUpdatedBy, enrollment.FieldUserID, enrollment.FieldInternshipID, enrollment.FieldEnrollmentStatus, enrollment.FieldPaymentStatus, enrollment.FieldPaymentID, enrollment.FieldCancellationReason, enrollment.FieldRefundReason, enrollment.FieldIdempotencyKey:
			values[i] = new(sql.NullString)
		case enrollment.FieldCreatedAt, enrollment.FieldUpdatedAt, enrollment.FieldEnrolledAt, enrollment.FieldRefundedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Enrollment fields.
func (e *Enrollment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case enrollment.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				e.ID = value.String
			}
		case enrollment.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				e.Status = value.String
			}
		case enrollment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case enrollment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				e.UpdatedAt = value.Time
			}
		case enrollment.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				e.CreatedBy = value.String
			}
		case enrollment.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				e.UpdatedBy = value.String
			}
		case enrollment.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case enrollment.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				e.UserID = value.String
			}
		case enrollment.FieldInternshipID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internship_id", values[i])
			} else if value.Valid {
				e.InternshipID = value.String
			}
		case enrollment.FieldEnrollmentStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field enrollment_status", values[i])
			} else if value.Valid {
				e.EnrollmentStatus = types.EnrollmentStatus(value.String)
			}
		case enrollment.FieldPaymentStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_status", values[i])
			} else if value.Valid {
				e.PaymentStatus = types.PaymentStatus(value.String)
			}
		case enrollment.FieldEnrolledAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field enrolled_at", values[i])
			} else if value.Valid {
				e.EnrolledAt = new(time.Time)
				*e.EnrolledAt = value.Time
			}
		case enrollment.FieldPaymentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_id", values[i])
			} else if value.Valid {
				e.PaymentID = new(string)
				*e.PaymentID = value.String
			}
		case enrollment.FieldRefundedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field refunded_at", values[i])
			} else if value.Valid {
				e.RefundedAt = new(time.Time)
				*e.RefundedAt = value.Time
			}
		case enrollment.FieldCancellationReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cancellation_reason", values[i])
			} else if value.Valid {
				e.CancellationReason = new(string)
				*e.CancellationReason = value.String
			}
		case enrollment.FieldRefundReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refund_reason", values[i])
			} else if value.Valid {
				e.RefundReason = new(string)
				*e.RefundReason = value.String
			}
		case enrollment.FieldIdempotencyKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field idempotency_key", values[i])
			} else if value.Valid {
				e.IdempotencyKey = new(string)
				*e.IdempotencyKey = value.String
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Enrollment.
// This includes values selected through modifiers, order, etc.
func (e *Enrollment) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// Update returns a builder for updating this Enrollment.
// Note that you need to call Enrollment.Unwrap() before calling this method if this Enrollment
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Enrollment) Update() *EnrollmentUpdateOne {
	return NewEnrollmentClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Enrollment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Enrollment) Unwrap() *Enrollment {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Enrollment is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Enrollment) String() string {
	var builder strings.Builder
	builder.WriteString("Enrollment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("status=")
	builder.WriteString(e.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(e.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(e.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(e.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", e.Metadata))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(e.UserID)
	builder.WriteString(", ")
	builder.WriteString("internship_id=")
	builder.WriteString(e.InternshipID)
	builder.WriteString(", ")
	builder.WriteString("enrollment_status=")
	builder.WriteString(fmt.Sprintf("%v", e.EnrollmentStatus))
	builder.WriteString(", ")
	builder.WriteString("payment_status=")
	builder.WriteString(fmt.Sprintf("%v", e.PaymentStatus))
	builder.WriteString(", ")
	if v := e.EnrolledAt; v != nil {
		builder.WriteString("enrolled_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := e.PaymentID; v != nil {
		builder.WriteString("payment_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := e.RefundedAt; v != nil {
		builder.WriteString("refunded_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := e.CancellationReason; v != nil {
		builder.WriteString("cancellation_reason=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := e.RefundReason; v != nil {
		builder.WriteString("refund_reason=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := e.IdempotencyKey; v != nil {
		builder.WriteString("idempotency_key=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Enrollments is a parsable slice of Enrollment.
type Enrollments []*Enrollment
