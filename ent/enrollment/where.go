// Code generated by ent, DO NOT EDIT.

package enrollment

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/omkar273/codegeeky/ent/predicate"
	"github.com/omkar273/codegeeky/internal/types"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldContainsFold(FieldID, id))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldUpdatedBy, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldUserID, v))
}

// InternshipID applies equality check predicate on the "internship_id" field. It's identical to InternshipIDEQ.
func InternshipID(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldInternshipID, v))
}

// EnrollmentStatus applies equality check predicate on the "enrollment_status" field. It's identical to EnrollmentStatusEQ.
func EnrollmentStatus(v types.EnrollmentStatus) predicate.Enrollment {
	vc := string(v)
	return predicate.Enrollment(sql.FieldEQ(FieldEnrollmentStatus, vc))
}

// PaymentStatus applies equality check predicate on the "payment_status" field. It's identical to PaymentStatusEQ.
func PaymentStatus(v types.PaymentStatus) predicate.Enrollment {
	vc := string(v)
	return predicate.Enrollment(sql.FieldEQ(FieldPaymentStatus, vc))
}

// EnrolledAt applies equality check predicate on the "enrolled_at" field. It's identical to EnrolledAtEQ.
func EnrolledAt(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldEnrolledAt, v))
}

// PaymentID applies equality check predicate on the "payment_id" field. It's identical to PaymentIDEQ.
func PaymentID(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldPaymentID, v))
}

// RefundedAt applies equality check predicate on the "refunded_at" field. It's identical to RefundedAtEQ.
func RefundedAt(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldRefundedAt, v))
}

// CancellationReason applies equality check predicate on the "cancellation_reason" field. It's identical to CancellationReasonEQ.
func CancellationReason(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldCancellationReason, v))
}

// RefundReason applies equality check predicate on the "refund_reason" field. It's identical to RefundReasonEQ.
func RefundReason(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldRefundReason, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldContainsFold(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Enrollment {
	return predicate.Enrollment(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.Enrollment {
	return predicate.Enrollment(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.Enrollment {
	return predicate.Enrollment(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNotNull(FieldMetadata))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldContainsFold(FieldUserID, v))
}

// InternshipIDEQ applies the EQ predicate on the "internship_id" field.
func InternshipIDEQ(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldInternshipID, v))
}

// InternshipIDNEQ applies the NEQ predicate on the "internship_id" field.
func InternshipIDNEQ(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNEQ(FieldInternshipID, v))
}

// InternshipIDIn applies the In predicate on the "internship_id" field.
func InternshipIDIn(vs ...string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldIn(FieldInternshipID, vs...))
}

// InternshipIDNotIn applies the NotIn predicate on the "internship_id" field.
func InternshipIDNotIn(vs ...string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNotIn(FieldInternshipID, vs...))
}

// InternshipIDGT applies the GT predicate on the "internship_id" field.
func InternshipIDGT(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGT(FieldInternshipID, v))
}

// InternshipIDGTE applies the GTE predicate on the "internship_id" field.
func InternshipIDGTE(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGTE(FieldInternshipID, v))
}

// InternshipIDLT applies the LT predicate on the "internship_id" field.
func InternshipIDLT(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLT(FieldInternshipID, v))
}

// InternshipIDLTE applies the LTE predicate on the "internship_id" field.
func InternshipIDLTE(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLTE(FieldInternshipID, v))
}

// InternshipIDContains applies the Contains predicate on the "internship_id" field.
func InternshipIDContains(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldContains(FieldInternshipID, v))
}

// InternshipIDHasPrefix applies the HasPrefix predicate on the "internship_id" field.
func InternshipIDHasPrefix(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldHasPrefix(FieldInternshipID, v))
}

// InternshipIDHasSuffix applies the HasSuffix predicate on the "internship_id" field.
func InternshipIDHasSuffix(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldHasSuffix(FieldInternshipID, v))
}

// InternshipIDEqualFold applies the EqualFold predicate on the "internship_id" field.
func InternshipIDEqualFold(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEqualFold(FieldInternshipID, v))
}

// InternshipIDContainsFold applies the ContainsFold predicate on the "internship_id" field.
func InternshipIDContainsFold(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldContainsFold(FieldInternshipID, v))
}

// EnrollmentStatusEQ applies the EQ predicate on the "enrollment_status" field.
func EnrollmentStatusEQ(v types.EnrollmentStatus) predicate.Enrollment {
	vc := string(v)
	return predicate.Enrollment(sql.FieldEQ(FieldEnrollmentStatus, vc))
}

// EnrollmentStatusNEQ applies the NEQ predicate on the "enrollment_status" field.
func EnrollmentStatusNEQ(v types.EnrollmentStatus) predicate.Enrollment {
	vc := string(v)
	return predicate.Enrollment(sql.FieldNEQ(FieldEnrollmentStatus, vc))
}

// EnrollmentStatusIn applies the In predicate on the "enrollment_status" field.
func EnrollmentStatusIn(vs ...types.EnrollmentStatus) predicate.Enrollment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Enrollment(sql.FieldIn(FieldEnrollmentStatus, v...))
}

// EnrollmentStatusNotIn applies the NotIn predicate on the "enrollment_status" field.
func EnrollmentStatusNotIn(vs ...types.EnrollmentStatus) predicate.Enrollment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Enrollment(sql.FieldNotIn(FieldEnrollmentStatus, v...))
}

// EnrollmentStatusGT applies the GT predicate on the "enrollment_status" field.
func EnrollmentStatusGT(v types.EnrollmentStatus) predicate.Enrollment {
	vc := string(v)
	return predicate.Enrollment(sql.FieldGT(FieldEnrollmentStatus, vc))
}

// EnrollmentStatusGTE applies the GTE predicate on the "enrollment_status" field.
func EnrollmentStatusGTE(v types.EnrollmentStatus) predicate.Enrollment {
	vc := string(v)
	return predicate.Enrollment(sql.FieldGTE(FieldEnrollmentStatus, vc))
}

// EnrollmentStatusLT applies the LT predicate on the "enrollment_status" field.
func EnrollmentStatusLT(v types.EnrollmentStatus) predicate.Enrollment {
	vc := string(v)
	return predicate.Enrollment(sql.FieldLT(FieldEnrollmentStatus, vc))
}

// EnrollmentStatusLTE applies the LTE predicate on the "enrollment_status" field.
func EnrollmentStatusLTE(v types.EnrollmentStatus) predicate.Enrollment {
	vc := string(v)
	return predicate.Enrollment(sql.FieldLTE(FieldEnrollmentStatus, vc))
}

// EnrollmentStatusContains applies the Contains predicate on the "enrollment_status" field.
func EnrollmentStatusContains(v types.EnrollmentStatus) predicate.Enrollment {
	vc := string(v)
	return predicate.Enrollment(sql.FieldContains(FieldEnrollmentStatus, vc))
}

// EnrollmentStatusHasPrefix applies the HasPrefix predicate on the "enrollment_status" field.
func EnrollmentStatusHasPrefix(v types.EnrollmentStatus) predicate.Enrollment {
	vc := string(v)
	return predicate.Enrollment(sql.FieldHasPrefix(FieldEnrollmentStatus, vc))
}

// EnrollmentStatusHasSuffix applies the HasSuffix predicate on the "enrollment_status" field.
func EnrollmentStatusHasSuffix(v types.EnrollmentStatus) predicate.Enrollment {
	vc := string(v)
	return predicate.Enrollment(sql.FieldHasSuffix(FieldEnrollmentStatus, vc))
}

// EnrollmentStatusEqualFold applies the EqualFold predicate on the "enrollment_status" field.
func EnrollmentStatusEqualFold(v types.EnrollmentStatus) predicate.Enrollment {
	vc := string(v)
	return predicate.Enrollment(sql.FieldEqualFold(FieldEnrollmentStatus, vc))
}

// EnrollmentStatusContainsFold applies the ContainsFold predicate on the "enrollment_status" field.
func EnrollmentStatusContainsFold(v types.EnrollmentStatus) predicate.Enrollment {
	vc := string(v)
	return predicate.Enrollment(sql.FieldContainsFold(FieldEnrollmentStatus, vc))
}

// PaymentStatusEQ applies the EQ predicate on the "payment_status" field.
func PaymentStatusEQ(v types.PaymentStatus) predicate.Enrollment {
	vc := string(v)
	return predicate.Enrollment(sql.FieldEQ(FieldPaymentStatus, vc))
}

// PaymentStatusNEQ applies the NEQ predicate on the "payment_status" field.
func PaymentStatusNEQ(v types.PaymentStatus) predicate.Enrollment {
	vc := string(v)
	return predicate.Enrollment(sql.FieldNEQ(FieldPaymentStatus, vc))
}

// PaymentStatusIn applies the In predicate on the "payment_status" field.
func PaymentStatusIn(vs ...types.PaymentStatus) predicate.Enrollment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Enrollment(sql.FieldIn(FieldPaymentStatus, v...))
}

// PaymentStatusNotIn applies the NotIn predicate on the "payment_status" field.
func PaymentStatusNotIn(vs ...types.PaymentStatus) predicate.Enrollment {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Enrollment(sql.FieldNotIn(FieldPaymentStatus, v...))
}

// PaymentStatusGT applies the GT predicate on the "payment_status" field.
func PaymentStatusGT(v types.PaymentStatus) predicate.Enrollment {
	vc := string(v)
	return predicate.Enrollment(sql.FieldGT(FieldPaymentStatus, vc))
}

// PaymentStatusGTE applies the GTE predicate on the "payment_status" field.
func PaymentStatusGTE(v types.PaymentStatus) predicate.Enrollment {
	vc := string(v)
	return predicate.Enrollment(sql.FieldGTE(FieldPaymentStatus, vc))
}

// PaymentStatusLT applies the LT predicate on the "payment_status" field.
func PaymentStatusLT(v types.PaymentStatus) predicate.Enrollment {
	vc := string(v)
	return predicate.Enrollment(sql.FieldLT(FieldPaymentStatus, vc))
}

// PaymentStatusLTE applies the LTE predicate on the "payment_status" field.
func PaymentStatusLTE(v types.PaymentStatus) predicate.Enrollment {
	vc := string(v)
	return predicate.Enrollment(sql.FieldLTE(FieldPaymentStatus, vc))
}

// PaymentStatusContains applies the Contains predicate on the "payment_status" field.
func PaymentStatusContains(v types.PaymentStatus) predicate.Enrollment {
	vc := string(v)
	return predicate.Enrollment(sql.FieldContains(FieldPaymentStatus, vc))
}

// PaymentStatusHasPrefix applies the HasPrefix predicate on the "payment_status" field.
func PaymentStatusHasPrefix(v types.PaymentStatus) predicate.Enrollment {
	vc := string(v)
	return predicate.Enrollment(sql.FieldHasPrefix(FieldPaymentStatus, vc))
}

// PaymentStatusHasSuffix applies the HasSuffix predicate on the "payment_status" field.
func PaymentStatusHasSuffix(v types.PaymentStatus) predicate.Enrollment {
	vc := string(v)
	return predicate.Enrollment(sql.FieldHasSuffix(FieldPaymentStatus, vc))
}

// PaymentStatusEqualFold applies the EqualFold predicate on the "payment_status" field.
func PaymentStatusEqualFold(v types.PaymentStatus) predicate.Enrollment {
	vc := string(v)
	return predicate.Enrollment(sql.FieldEqualFold(FieldPaymentStatus, vc))
}

// PaymentStatusContainsFold applies the ContainsFold predicate on the "payment_status" field.
func PaymentStatusContainsFold(v types.PaymentStatus) predicate.Enrollment {
	vc := string(v)
	return predicate.Enrollment(sql.FieldContainsFold(FieldPaymentStatus, vc))
}

// EnrolledAtEQ applies the EQ predicate on the "enrolled_at" field.
func EnrolledAtEQ(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldEnrolledAt, v))
}

// EnrolledAtNEQ applies the NEQ predicate on the "enrolled_at" field.
func EnrolledAtNEQ(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNEQ(FieldEnrolledAt, v))
}

// EnrolledAtIn applies the In predicate on the "enrolled_at" field.
func EnrolledAtIn(vs ...time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldIn(FieldEnrolledAt, vs...))
}

// EnrolledAtNotIn applies the NotIn predicate on the "enrolled_at" field.
func EnrolledAtNotIn(vs ...time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNotIn(FieldEnrolledAt, vs...))
}

// EnrolledAtGT applies the GT predicate on the "enrolled_at" field.
func EnrolledAtGT(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGT(FieldEnrolledAt, v))
}

// EnrolledAtGTE applies the GTE predicate on the "enrolled_at" field.
func EnrolledAtGTE(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGTE(FieldEnrolledAt, v))
}

// EnrolledAtLT applies the LT predicate on the "enrolled_at" field.
func EnrolledAtLT(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLT(FieldEnrolledAt, v))
}

// EnrolledAtLTE applies the LTE predicate on the "enrolled_at" field.
func EnrolledAtLTE(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLTE(FieldEnrolledAt, v))
}

// EnrolledAtIsNil applies the IsNil predicate on the "enrolled_at" field.
func EnrolledAtIsNil() predicate.Enrollment {
	return predicate.Enrollment(sql.FieldIsNull(FieldEnrolledAt))
}

// EnrolledAtNotNil applies the NotNil predicate on the "enrolled_at" field.
func EnrolledAtNotNil() predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNotNull(FieldEnrolledAt))
}

// PaymentIDEQ applies the EQ predicate on the "payment_id" field.
func PaymentIDEQ(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldPaymentID, v))
}

// PaymentIDNEQ applies the NEQ predicate on the "payment_id" field.
func PaymentIDNEQ(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNEQ(FieldPaymentID, v))
}

// PaymentIDIn applies the In predicate on the "payment_id" field.
func PaymentIDIn(vs ...string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldIn(FieldPaymentID, vs...))
}

// PaymentIDNotIn applies the NotIn predicate on the "payment_id" field.
func PaymentIDNotIn(vs ...string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNotIn(FieldPaymentID, vs...))
}

// PaymentIDGT applies the GT predicate on the "payment_id" field.
func PaymentIDGT(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGT(FieldPaymentID, v))
}

// PaymentIDGTE applies the GTE predicate on the "payment_id" field.
func PaymentIDGTE(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGTE(FieldPaymentID, v))
}

// PaymentIDLT applies the LT predicate on the "payment_id" field.
func PaymentIDLT(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLT(FieldPaymentID, v))
}

// PaymentIDLTE applies the LTE predicate on the "payment_id" field.
func PaymentIDLTE(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLTE(FieldPaymentID, v))
}

// PaymentIDContains applies the Contains predicate on the "payment_id" field.
func PaymentIDContains(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldContains(FieldPaymentID, v))
}

// PaymentIDHasPrefix applies the HasPrefix predicate on the "payment_id" field.
func PaymentIDHasPrefix(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldHasPrefix(FieldPaymentID, v))
}

// PaymentIDHasSuffix applies the HasSuffix predicate on the "payment_id" field.
func PaymentIDHasSuffix(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldHasSuffix(FieldPaymentID, v))
}

// PaymentIDIsNil applies the IsNil predicate on the "payment_id" field.
func PaymentIDIsNil() predicate.Enrollment {
	return predicate.Enrollment(sql.FieldIsNull(FieldPaymentID))
}

// PaymentIDNotNil applies the NotNil predicate on the "payment_id" field.
func PaymentIDNotNil() predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNotNull(FieldPaymentID))
}

// PaymentIDEqualFold applies the EqualFold predicate on the "payment_id" field.
func PaymentIDEqualFold(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEqualFold(FieldPaymentID, v))
}

// PaymentIDContainsFold applies the ContainsFold predicate on the "payment_id" field.
func PaymentIDContainsFold(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldContainsFold(FieldPaymentID, v))
}

// RefundedAtEQ applies the EQ predicate on the "refunded_at" field.
func RefundedAtEQ(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldRefundedAt, v))
}

// RefundedAtNEQ applies the NEQ predicate on the "refunded_at" field.
func RefundedAtNEQ(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNEQ(FieldRefundedAt, v))
}

// RefundedAtIn applies the In predicate on the "refunded_at" field.
func RefundedAtIn(vs ...time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldIn(FieldRefundedAt, vs...))
}

// RefundedAtNotIn applies the NotIn predicate on the "refunded_at" field.
func RefundedAtNotIn(vs ...time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNotIn(FieldRefundedAt, vs...))
}

// RefundedAtGT applies the GT predicate on the "refunded_at" field.
func RefundedAtGT(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGT(FieldRefundedAt, v))
}

// RefundedAtGTE applies the GTE predicate on the "refunded_at" field.
func RefundedAtGTE(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGTE(FieldRefundedAt, v))
}

// RefundedAtLT applies the LT predicate on the "refunded_at" field.
func RefundedAtLT(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLT(FieldRefundedAt, v))
}

// RefundedAtLTE applies the LTE predicate on the "refunded_at" field.
func RefundedAtLTE(v time.Time) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLTE(FieldRefundedAt, v))
}

// RefundedAtIsNil applies the IsNil predicate on the "refunded_at" field.
func RefundedAtIsNil() predicate.Enrollment {
	return predicate.Enrollment(sql.FieldIsNull(FieldRefundedAt))
}

// RefundedAtNotNil applies the NotNil predicate on the "refunded_at" field.
func RefundedAtNotNil() predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNotNull(FieldRefundedAt))
}

// CancellationReasonEQ applies the EQ predicate on the "cancellation_reason" field.
func CancellationReasonEQ(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldCancellationReason, v))
}

// CancellationReasonNEQ applies the NEQ predicate on the "cancellation_reason" field.
func CancellationReasonNEQ(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNEQ(FieldCancellationReason, v))
}

// CancellationReasonIn applies the In predicate on the "cancellation_reason" field.
func CancellationReasonIn(vs ...string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldIn(FieldCancellationReason, vs...))
}

// CancellationReasonNotIn applies the NotIn predicate on the "cancellation_reason" field.
func CancellationReasonNotIn(vs ...string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNotIn(FieldCancellationReason, vs...))
}

// CancellationReasonGT applies the GT predicate on the "cancellation_reason" field.
func CancellationReasonGT(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGT(FieldCancellationReason, v))
}

// CancellationReasonGTE applies the GTE predicate on the "cancellation_reason" field.
func CancellationReasonGTE(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGTE(FieldCancellationReason, v))
}

// CancellationReasonLT applies the LT predicate on the "cancellation_reason" field.
func CancellationReasonLT(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLT(FieldCancellationReason, v))
}

// CancellationReasonLTE applies the LTE predicate on the "cancellation_reason" field.
func CancellationReasonLTE(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLTE(FieldCancellationReason, v))
}

// CancellationReasonContains applies the Contains predicate on the "cancellation_reason" field.
func CancellationReasonContains(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldContains(FieldCancellationReason, v))
}

// CancellationReasonHasPrefix applies the HasPrefix predicate on the "cancellation_reason" field.
func CancellationReasonHasPrefix(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldHasPrefix(FieldCancellationReason, v))
}

// CancellationReasonHasSuffix applies the HasSuffix predicate on the "cancellation_reason" field.
func CancellationReasonHasSuffix(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldHasSuffix(FieldCancellationReason, v))
}

// CancellationReasonIsNil applies the IsNil predicate on the "cancellation_reason" field.
func CancellationReasonIsNil() predicate.Enrollment {
	return predicate.Enrollment(sql.FieldIsNull(FieldCancellationReason))
}

// CancellationReasonNotNil applies the NotNil predicate on the "cancellation_reason" field.
func CancellationReasonNotNil() predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNotNull(FieldCancellationReason))
}

// CancellationReasonEqualFold applies the EqualFold predicate on the "cancellation_reason" field.
func CancellationReasonEqualFold(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEqualFold(FieldCancellationReason, v))
}

// CancellationReasonContainsFold applies the ContainsFold predicate on the "cancellation_reason" field.
func CancellationReasonContainsFold(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldContainsFold(FieldCancellationReason, v))
}

// RefundReasonEQ applies the EQ predicate on the "refund_reason" field.
func RefundReasonEQ(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEQ(FieldRefundReason, v))
}

// RefundReasonNEQ applies the NEQ predicate on the "refund_reason" field.
func RefundReasonNEQ(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNEQ(FieldRefundReason, v))
}

// RefundReasonIn applies the In predicate on the "refund_reason" field.
func RefundReasonIn(vs ...string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldIn(FieldRefundReason, vs...))
}

// RefundReasonNotIn applies the NotIn predicate on the "refund_reason" field.
func RefundReasonNotIn(vs ...string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNotIn(FieldRefundReason, vs...))
}

// RefundReasonGT applies the GT predicate on the "refund_reason" field.
func RefundReasonGT(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGT(FieldRefundReason, v))
}

// RefundReasonGTE applies the GTE predicate on the "refund_reason" field.
func RefundReasonGTE(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldGTE(FieldRefundReason, v))
}

// RefundReasonLT applies the LT predicate on the "refund_reason" field.
func RefundReasonLT(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLT(FieldRefundReason, v))
}

// RefundReasonLTE applies the LTE predicate on the "refund_reason" field.
func RefundReasonLTE(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldLTE(FieldRefundReason, v))
}

// RefundReasonContains applies the Contains predicate on the "refund_reason" field.
func RefundReasonContains(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldContains(FieldRefundReason, v))
}

// RefundReasonHasPrefix applies the HasPrefix predicate on the "refund_reason" field.
func RefundReasonHasPrefix(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldHasPrefix(FieldRefundReason, v))
}

// RefundReasonHasSuffix applies the HasSuffix predicate on the "refund_reason" field.
func RefundReasonHasSuffix(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldHasSuffix(FieldRefundReason, v))
}

// RefundReasonIsNil applies the IsNil predicate on the "refund_reason" field.
func RefundReasonIsNil() predicate.Enrollment {
	return predicate.Enrollment(sql.FieldIsNull(FieldRefundReason))
}

// RefundReasonNotNil applies the NotNil predicate on the "refund_reason" field.
func RefundReasonNotNil() predicate.Enrollment {
	return predicate.Enrollment(sql.FieldNotNull(FieldRefundReason))
}

// RefundReasonEqualFold applies the EqualFold predicate on the "refund_reason" field.
func RefundReasonEqualFold(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldEqualFold(FieldRefundReason, v))
}

// RefundReasonContainsFold applies the ContainsFold predicate on the "refund_reason" field.
func RefundReasonContainsFold(v string) predicate.Enrollment {
	return predicate.Enrollment(sql.FieldContainsFold(FieldRefundReason, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Enrollment) predicate.Enrollment {
	return predicate.Enrollment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Enrollment) predicate.Enrollment {
	return predicate.Enrollment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Enrollment) predicate.Enrollment {
	return predicate.Enrollment(sql.NotPredicates(p))
}
