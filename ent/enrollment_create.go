// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/omkar273/codegeeky/ent/enrollment"
	"github.com/omkar273/codegeeky/internal/types"
)

// EnrollmentCreate is the builder for creating a Enrollment entity.
type EnrollmentCreate struct {
	config
	mutation *EnrollmentMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (ec *EnrollmentCreate) SetStatus(s string) *EnrollmentCreate {
	ec.mutation.SetStatus(s)
	return ec
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ec *EnrollmentCreate) SetNillableStatus(s *string) *EnrollmentCreate {
	if s != nil {
		ec.SetStatus(*s)
	}
	return ec
}

// SetCreatedAt sets the "created_at" field.
func (ec *EnrollmentCreate) SetCreatedAt(t time.Time) *EnrollmentCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *EnrollmentCreate) SetNillableCreatedAt(t *time.Time) *EnrollmentCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetUpdatedAt sets the "updated_at" field.
func (ec *EnrollmentCreate) SetUpdatedAt(t time.Time) *EnrollmentCreate {
	ec.mutation.SetUpdatedAt(t)
	return ec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ec *EnrollmentCreate) SetNillableUpdatedAt(t *time.Time) *EnrollmentCreate {
	if t != nil {
		ec.SetUpdatedAt(*t)
	}
	return ec
}

// SetCreatedBy sets the "created_by" field.
func (ec *EnrollmentCreate) SetCreatedBy(s string) *EnrollmentCreate {
	ec.mutation.SetCreatedBy(s)
	return ec
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ec *EnrollmentCreate) SetNillableCreatedBy(s *string) *EnrollmentCreate {
	if s != nil {
		ec.SetCreatedBy(*s)
	}
	return ec
}

// SetUpdatedBy sets the "updated_by" field.
func (ec *EnrollmentCreate) SetUpdatedBy(s string) *EnrollmentCreate {
	ec.mutation.SetUpdatedBy(s)
	return ec
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ec *EnrollmentCreate) SetNillableUpdatedBy(s *string) *EnrollmentCreate {
	if s != nil {
		ec.SetUpdatedBy(*s)
	}
	return ec
}

// SetMetadata sets the "metadata" field.
func (ec *EnrollmentCreate) SetMetadata(m map[string]string) *EnrollmentCreate {
	ec.mutation.SetMetadata(m)
	return ec
}

// SetUserID sets the "user_id" field.
func (ec *EnrollmentCreate) SetUserID(s string) *EnrollmentCreate {
	ec.mutation.SetUserID(s)
	return ec
}

// SetInternshipID sets the "internship_id" field.
func (ec *EnrollmentCreate) SetInternshipID(s string) *EnrollmentCreate {
	ec.mutation.SetInternshipID(s)
	return ec
}

// SetEnrollmentStatus sets the "enrollment_status" field.
func (ec *EnrollmentCreate) SetEnrollmentStatus(ts types.EnrollmentStatus) *EnrollmentCreate {
	ec.mutation.SetEnrollmentStatus(ts)
	return ec
}

// SetNillableEnrollmentStatus sets the "enrollment_status" field if the given value is not nil.
func (ec *EnrollmentCreate) SetNillableEnrollmentStatus(ts *types.EnrollmentStatus) *EnrollmentCreate {
	if ts != nil {
		ec.SetEnrollmentStatus(*ts)
	}
	return ec
}

// SetPaymentStatus sets the "payment_status" field.
func (ec *EnrollmentCreate) SetPaymentStatus(ts types.PaymentStatus) *EnrollmentCreate {
	ec.mutation.SetPaymentStatus(ts)
	return ec
}

// SetNillablePaymentStatus sets the "payment_status" field if the given value is not nil.
func (ec *EnrollmentCreate) SetNillablePaymentStatus(ts *types.PaymentStatus) *EnrollmentCreate {
	if ts != nil {
		ec.SetPaymentStatus(*ts)
	}
	return ec
}

// SetEnrolledAt sets the "enrolled_at" field.
func (ec *EnrollmentCreate) SetEnrolledAt(t time.Time) *EnrollmentCreate {
	ec.mutation.SetEnrolledAt(t)
	return ec
}

// SetNillableEnrolledAt sets the "enrolled_at" field if the given value is not nil.
func (ec *EnrollmentCreate) SetNillableEnrolledAt(t *time.Time) *EnrollmentCreate {
	if t != nil {
		ec.SetEnrolledAt(*t)
	}
	return ec
}

// SetPaymentID sets the "payment_id" field.
func (ec *EnrollmentCreate) SetPaymentID(s string) *EnrollmentCreate {
	ec.mutation.SetPaymentID(s)
	return ec
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (ec *EnrollmentCreate) SetNillablePaymentID(s *string) *EnrollmentCreate {
	if s != nil {
		ec.SetPaymentID(*s)
	}
	return ec
}

// SetRefundedAt sets the "refunded_at" field.
func (ec *EnrollmentCreate) SetRefundedAt(t time.Time) *EnrollmentCreate {
	ec.mutation.SetRefundedAt(t)
	return ec
}

// SetNillableRefundedAt sets the "refunded_at" field if the given value is not nil.
func (ec *EnrollmentCreate) SetNillableRefundedAt(t *time.Time) *EnrollmentCreate {
	if t != nil {
		ec.SetRefundedAt(*t)
	}
	return ec
}

// SetCancellationReason sets the "cancellation_reason" field.
func (ec *EnrollmentCreate) SetCancellationReason(s string) *EnrollmentCreate {
	ec.mutation.SetCancellationReason(s)
	return ec
}

// SetNillableCancellationReason sets the "cancellation_reason" field if the given value is not nil.
func (ec *EnrollmentCreate) SetNillableCancellationReason(s *string) *EnrollmentCreate {
	if s != nil {
		ec.SetCancellationReason(*s)
	}
	return ec
}

// SetRefundReason sets the "refund_reason" field.
func (ec *EnrollmentCreate) SetRefundReason(s string) *EnrollmentCreate {
	ec.mutation.SetRefundReason(s)
	return ec
}

// SetNillableRefundReason sets the "refund_reason" field if the given value is not nil.
func (ec *EnrollmentCreate) SetNillableRefundReason(s *string) *EnrollmentCreate {
	if s != nil {
		ec.SetRefundReason(*s)
	}
	return ec
}

// SetIdempotencyKey sets the "idempotency_key" field.
func (ec *EnrollmentCreate) SetIdempotencyKey(s string) *EnrollmentCreate {
	ec.mutation.SetIdempotencyKey(s)
	return ec
}

// SetNillableIdempotencyKey sets the "idempotency_key" field if the given value is not nil.
func (ec *EnrollmentCreate) SetNillableIdempotencyKey(s *string) *EnrollmentCreate {
	if s != nil {
		ec.SetIdempotencyKey(*s)
	}
	return ec
}

// SetID sets the "id" field.
func (ec *EnrollmentCreate) SetID(s string) *EnrollmentCreate {
	ec.mutation.SetID(s)
	return ec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ec *EnrollmentCreate) SetNillableID(s *string) *EnrollmentCreate {
	if s != nil {
		ec.SetID(*s)
	}
	return ec
}

// Mutation returns the EnrollmentMutation object of the builder.
func (ec *EnrollmentCreate) Mutation() *EnrollmentMutation {
	return ec.mutation
}

// Save creates the Enrollment in the database.
func (ec *EnrollmentCreate) Save(ctx context.Context) (*Enrollment, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EnrollmentCreate) SaveX(ctx context.Context) *Enrollment {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EnrollmentCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EnrollmentCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EnrollmentCreate) defaults() {
	if _, ok := ec.mutation.Status(); !ok {
		v := enrollment.DefaultStatus
		ec.mutation.SetStatus(v)
	}
	if _, ok := ec.mutation.CreatedAt(); !ok {
		v := enrollment.DefaultCreatedAt()
		ec.mutation.SetCreatedAt(v)
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		v := enrollment.DefaultUpdatedAt()
		ec.mutation.SetUpdatedAt(v)
	}
	if _, ok := ec.mutation.Metadata(); !ok {
		v := enrollment.DefaultMetadata
		ec.mutation.SetMetadata(v)
	}
	if _, ok := ec.mutation.EnrollmentStatus(); !ok {
		v := enrollment.DefaultEnrollmentStatus
		ec.mutation.SetEnrollmentStatus(v)
	}
	if _, ok := ec.mutation.PaymentStatus(); !ok {
		v := enrollment.DefaultPaymentStatus
		ec.mutation.SetPaymentStatus(v)
	}
	if _, ok := ec.mutation.ID(); !ok {
		v := enrollment.DefaultID()
		ec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EnrollmentCreate) check() error {
	if _, ok := ec.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Enrollment.status"`)}
	}
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Enrollment.created_at"`)}
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Enrollment.updated_at"`)}
	}
	if _, ok := ec.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Enrollment.user_id"`)}
	}
	if v, ok := ec.mutation.UserID(); ok {
		if err := enrollment.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "Enrollment.user_id": %w`, err)}
		}
	}
	if _, ok := ec.mutation.InternshipID(); !ok {
		return &ValidationError{Name: "internship_id", err: errors.New(`ent: missing required field "Enrollment.internship_id"`)}
	}
	if v, ok := ec.mutation.InternshipID(); ok {
		if err := enrollment.InternshipIDValidator(v); err != nil {
			return &ValidationError{Name: "internship_id", err: fmt.Errorf(`ent: validator failed for field "Enrollment.internship_id": %w`, err)}
		}
	}
	if _, ok := ec.mutation.EnrollmentStatus(); !ok {
		return &ValidationError{Name: "enrollment_status", err: errors.New(`ent: missing required field "Enrollment.enrollment_status"`)}
	}
	if v, ok := ec.mutation.EnrollmentStatus(); ok {
		if err := enrollment.EnrollmentStatusValidator(string(v)); err != nil {
			return &ValidationError{Name: "enrollment_status", err: fmt.Errorf(`ent: validator failed for field "Enrollment.enrollment_status": %w`, err)}
		}
	}
	if _, ok := ec.mutation.PaymentStatus(); !ok {
		return &ValidationError{Name: "payment_status", err: errors.New(`ent: missing required field "Enrollment.payment_status"`)}
	}
	if v, ok := ec.mutation.PaymentStatus(); ok {
		if err := enrollment.PaymentStatusValidator(string(v)); err != nil {
			return &ValidationError{Name: "payment_status", err: fmt.Errorf(`ent: validator failed for field "Enrollment.payment_status": %w`, err)}
		}
	}
	return nil
}

func (ec *EnrollmentCreate) sqlSave(ctx context.Context) (*Enrollment, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Enrollment.ID type: %T", _spec.ID.Value)
		}
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EnrollmentCreate) createSpec() (*Enrollment, *sqlgraph.CreateSpec) {
	var (
		_node = &Enrollment{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(enrollment.Table, sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeString))
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ec.mutation.Status(); ok {
		_spec.SetField(enrollment.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(enrollment.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.SetField(enrollment.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ec.mutation.CreatedBy(); ok {
		_spec.SetField(enrollment.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := ec.mutation.UpdatedBy(); ok {
		_spec.SetField(enrollment.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := ec.mutation.Metadata(); ok {
		_spec.SetField(enrollment.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := ec.mutation.UserID(); ok {
		_spec.SetField(enrollment.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := ec.mutation.InternshipID(); ok {
		_spec.SetField(enrollment.FieldInternshipID, field.TypeString, value)
		_node.InternshipID = value
	}
	if value, ok := ec.mutation.EnrollmentStatus(); ok {
		_spec.SetField(enrollment.FieldEnrollmentStatus, field.TypeString, value)
		_node.EnrollmentStatus = value
	}
	if value, ok := ec.mutation.PaymentStatus(); ok {
		_spec.SetField(enrollment.FieldPaymentStatus, field.TypeString, value)
		_node.PaymentStatus = value
	}
	if value, ok := ec.mutation.EnrolledAt(); ok {
		_spec.SetField(enrollment.FieldEnrolledAt, field.TypeTime, value)
		_node.EnrolledAt = &value
	}
	if value, ok := ec.mutation.PaymentID(); ok {
		_spec.SetField(enrollment.FieldPaymentID, field.TypeString, value)
		_node.PaymentID = &value
	}
	if value, ok := ec.mutation.RefundedAt(); ok {
		_spec.SetField(enrollment.FieldRefundedAt, field.TypeTime, value)
		_node.RefundedAt = &value
	}
	if value, ok := ec.mutation.CancellationReason(); ok {
		_spec.SetField(enrollment.FieldCancellationReason, field.TypeString, value)
		_node.CancellationReason = &value
	}
	if value, ok := ec.mutation.RefundReason(); ok {
		_spec.SetField(enrollment.FieldRefundReason, field.TypeString, value)
		_node.RefundReason = &value
	}
	if value, ok := ec.mutation.IdempotencyKey(); ok {
		_spec.SetField(enrollment.FieldIdempotencyKey, field.TypeString, value)
		_node.IdempotencyKey = &value
	}
	return _node, _spec
}

// EnrollmentCreateBulk is the builder for creating many Enrollment entities in bulk.
type EnrollmentCreateBulk struct {
	config
	err      error
	builders []*EnrollmentCreate
}

// Save creates the Enrollment entities in the database.
func (ecb *EnrollmentCreateBulk) Save(ctx context.Context) ([]*Enrollment, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Enrollment, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EnrollmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EnrollmentCreateBulk) SaveX(ctx context.Context) []*Enrollment {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EnrollmentCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EnrollmentCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
