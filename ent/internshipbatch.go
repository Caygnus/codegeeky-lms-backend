// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/omkar273/codegeeky/ent/internshipbatch"
)

// InternshipBatch is the model entity for the InternshipBatch schema.
type InternshipBatch struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// InternshipID holds the value of the "internship_id" field.
	InternshipID string `json:"internship_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate time.Time `json:"end_date,omitempty"`
	// BatchStatus holds the value of the "batch_status" field.
	BatchStatus  string `json:"batch_status,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InternshipBatch) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case internshipbatch.FieldMetadata:
			values[i] = new([]byte)
		case internshipbatch.FieldID, internshipbatch.FieldStatus, internshipbatch.FieldCreatedBy, internshipbatch.FieldUpdatedBy, internshipbatch.FieldInternshipID, internshipbatch.FieldName, internshipbatch.FieldDescription, internshipbatch.FieldBatchStatus:
			values[i] = new(sql.NullString)
		case internshipbatch.FieldCreatedAt, internshipbatch.FieldUpdatedAt, internshipbatch.FieldStartDate, internshipbatch.FieldEndDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InternshipBatch fields.
func (ib *InternshipBatch) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case internshipbatch.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ib.ID = value.String
			}
		case internshipbatch.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ib.Status = value.String
			}
		case internshipbatch.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ib.CreatedAt = value.Time
			}
		case internshipbatch.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ib.UpdatedAt = value.Time
			}
		case internshipbatch.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ib.CreatedBy = value.String
			}
		case internshipbatch.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ib.UpdatedBy = value.String
			}
		case internshipbatch.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ib.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case internshipbatch.FieldInternshipID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internship_id", values[i])
			} else if value.Valid {
				ib.InternshipID = value.String
			}
		case internshipbatch.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ib.Name = value.String
			}
		case internshipbatch.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ib.Description = value.String
			}
		case internshipbatch.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				ib.StartDate = value.Time
			}
		case internshipbatch.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				ib.EndDate = value.Time
			}
		case internshipbatch.FieldBatchStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field batch_status", values[i])
			} else if value.Valid {
				ib.BatchStatus = value.String
			}
		default:
			ib.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the InternshipBatch.
// This includes values selected through modifiers, order, etc.
func (ib *InternshipBatch) Value(name string) (ent.Value, error) {
	return ib.selectValues.Get(name)
}

// Update returns a builder for updating this InternshipBatch.
// Note that you need to call InternshipBatch.Unwrap() before calling this method if this InternshipBatch
// was returned from a transaction, and the transaction was committed or rolled back.
func (ib *InternshipBatch) Update() *InternshipBatchUpdateOne {
	return NewInternshipBatchClient(ib.config).UpdateOne(ib)
}

// Unwrap unwraps the InternshipBatch entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ib *InternshipBatch) Unwrap() *InternshipBatch {
	_tx, ok := ib.config.driver.(*txDriver)
	if !ok {
		panic("ent: InternshipBatch is not a transactional entity")
	}
	ib.config.driver = _tx.drv
	return ib
}

// String implements the fmt.Stringer.
func (ib *InternshipBatch) String() string {
	var builder strings.Builder
	builder.WriteString("InternshipBatch(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ib.ID))
	builder.WriteString("status=")
	builder.WriteString(ib.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ib.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ib.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(ib.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(ib.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", ib.Metadata))
	builder.WriteString(", ")
	builder.WriteString("internship_id=")
	builder.WriteString(ib.InternshipID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ib.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ib.Description)
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(ib.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_date=")
	builder.WriteString(ib.EndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("batch_status=")
	builder.WriteString(ib.BatchStatus)
	builder.WriteByte(')')
	return builder.String()
}

// InternshipBatches is a parsable slice of InternshipBatch.
type InternshipBatches []*InternshipBatch
