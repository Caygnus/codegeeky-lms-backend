// Code generated by ent, DO NOT EDIT.

package internship

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the internship type in the database.
	Label = "internship"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldLookupKey holds the string denoting the lookup_key field in the database.
	FieldLookupKey = "lookup_key"
	// FieldSkills holds the string denoting the skills field in the database.
	FieldSkills = "skills"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"
	// FieldMode holds the string denoting the mode field in the database.
	FieldMode = "mode"
	// FieldDurationInWeeks holds the string denoting the duration_in_weeks field in the database.
	FieldDurationInWeeks = "duration_in_weeks"
	// FieldLearningOutcomes holds the string denoting the learning_outcomes field in the database.
	FieldLearningOutcomes = "learning_outcomes"
	// FieldPrerequisites holds the string denoting the prerequisites field in the database.
	FieldPrerequisites = "prerequisites"
	// FieldBenefits holds the string denoting the benefits field in the database.
	FieldBenefits = "benefits"
	// FieldCurrency holds the string denoting the currency field in the database.
	FieldCurrency = "currency"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldFlatDiscount holds the string denoting the flat_discount field in the database.
	FieldFlatDiscount = "flat_discount"
	// FieldPercentageDiscount holds the string denoting the percentage_discount field in the database.
	FieldPercentageDiscount = "percentage_discount"
	// EdgeCategories holds the string denoting the categories edge name in mutations.
	EdgeCategories = "categories"
	// Table holds the table name of the internship in the database.
	Table = "internships"
	// CategoriesTable is the table that holds the categories relation/edge.
	CategoriesTable = "categories"
	// CategoriesInverseTable is the table name for the Category entity.
	// It exists in this package in order to avoid circular dependency with the "category" package.
	CategoriesInverseTable = "categories"
	// CategoriesColumn is the table column denoting the categories relation/edge.
	CategoriesColumn = "internship_id"
)

// Columns holds all SQL columns for internship fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldDescription,
	FieldLookupKey,
	FieldSkills,
	FieldLevel,
	FieldMode,
	FieldDurationInWeeks,
	FieldLearningOutcomes,
	FieldPrerequisites,
	FieldBenefits,
	FieldCurrency,
	FieldPrice,
	FieldFlatDiscount,
	FieldPercentageDiscount,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "internships"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"category_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// LookupKeyValidator is a validator for the "lookup_key" field. It is called by the builders before save.
	LookupKeyValidator func(string) error
	// DefaultSkills holds the default value on creation for the "skills" field.
	DefaultSkills []string
	// ModeValidator is a validator for the "mode" field. It is called by the builders before save.
	ModeValidator func(string) error
	// DefaultCurrency holds the default value on creation for the "currency" field.
	DefaultCurrency string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the Internship queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByLookupKey orders the results by the lookup_key field.
func ByLookupKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLookupKey, opts...).ToFunc()
}

// ByLevel orders the results by the level field.
func ByLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevel, opts...).ToFunc()
}

// ByMode orders the results by the mode field.
func ByMode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMode, opts...).ToFunc()
}

// ByDurationInWeeks orders the results by the duration_in_weeks field.
func ByDurationInWeeks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDurationInWeeks, opts...).ToFunc()
}

// ByCurrency orders the results by the currency field.
func ByCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrency, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByFlatDiscount orders the results by the flat_discount field.
func ByFlatDiscount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFlatDiscount, opts...).ToFunc()
}

// ByPercentageDiscount orders the results by the percentage_discount field.
func ByPercentageDiscount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPercentageDiscount, opts...).ToFunc()
}

// ByCategoriesCount orders the results by categories count.
func ByCategoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCategoriesStep(), opts...)
	}
}

// ByCategories orders the results by categories terms.
func ByCategories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCategoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCategoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CategoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CategoriesTable, CategoriesColumn),
	)
}
