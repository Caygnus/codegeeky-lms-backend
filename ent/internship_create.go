// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/omkar273/codegeeky/ent/category"
	"github.com/omkar273/codegeeky/ent/internship"
	"github.com/shopspring/decimal"
)

// InternshipCreate is the builder for creating a Internship entity.
type InternshipCreate struct {
	config
	mutation *InternshipMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (ic *InternshipCreate) SetStatus(s string) *InternshipCreate {
	ic.mutation.SetStatus(s)
	return ic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ic *InternshipCreate) SetNillableStatus(s *string) *InternshipCreate {
	if s != nil {
		ic.SetStatus(*s)
	}
	return ic
}

// SetCreatedAt sets the "created_at" field.
func (ic *InternshipCreate) SetCreatedAt(t time.Time) *InternshipCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ic *InternshipCreate) SetNillableCreatedAt(t *time.Time) *InternshipCreate {
	if t != nil {
		ic.SetCreatedAt(*t)
	}
	return ic
}

// SetUpdatedAt sets the "updated_at" field.
func (ic *InternshipCreate) SetUpdatedAt(t time.Time) *InternshipCreate {
	ic.mutation.SetUpdatedAt(t)
	return ic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ic *InternshipCreate) SetNillableUpdatedAt(t *time.Time) *InternshipCreate {
	if t != nil {
		ic.SetUpdatedAt(*t)
	}
	return ic
}

// SetCreatedBy sets the "created_by" field.
func (ic *InternshipCreate) SetCreatedBy(s string) *InternshipCreate {
	ic.mutation.SetCreatedBy(s)
	return ic
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ic *InternshipCreate) SetNillableCreatedBy(s *string) *InternshipCreate {
	if s != nil {
		ic.SetCreatedBy(*s)
	}
	return ic
}

// SetUpdatedBy sets the "updated_by" field.
func (ic *InternshipCreate) SetUpdatedBy(s string) *InternshipCreate {
	ic.mutation.SetUpdatedBy(s)
	return ic
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ic *InternshipCreate) SetNillableUpdatedBy(s *string) *InternshipCreate {
	if s != nil {
		ic.SetUpdatedBy(*s)
	}
	return ic
}

// SetTitle sets the "title" field.
func (ic *InternshipCreate) SetTitle(s string) *InternshipCreate {
	ic.mutation.SetTitle(s)
	return ic
}

// SetLookupKey sets the "lookup_key" field.
func (ic *InternshipCreate) SetLookupKey(s string) *InternshipCreate {
	ic.mutation.SetLookupKey(s)
	return ic
}

// SetDescription sets the "description" field.
func (ic *InternshipCreate) SetDescription(s string) *InternshipCreate {
	ic.mutation.SetDescription(s)
	return ic
}

// SetSkills sets the "skills" field.
func (ic *InternshipCreate) SetSkills(s []string) *InternshipCreate {
	ic.mutation.SetSkills(s)
	return ic
}

// SetLevel sets the "level" field.
func (ic *InternshipCreate) SetLevel(s string) *InternshipCreate {
	ic.mutation.SetLevel(s)
	return ic
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (ic *InternshipCreate) SetNillableLevel(s *string) *InternshipCreate {
	if s != nil {
		ic.SetLevel(*s)
	}
	return ic
}

// SetMode sets the "mode" field.
func (ic *InternshipCreate) SetMode(s string) *InternshipCreate {
	ic.mutation.SetMode(s)
	return ic
}

// SetDurationInWeeks sets the "duration_in_weeks" field.
func (ic *InternshipCreate) SetDurationInWeeks(i int) *InternshipCreate {
	ic.mutation.SetDurationInWeeks(i)
	return ic
}

// SetNillableDurationInWeeks sets the "duration_in_weeks" field if the given value is not nil.
func (ic *InternshipCreate) SetNillableDurationInWeeks(i *int) *InternshipCreate {
	if i != nil {
		ic.SetDurationInWeeks(*i)
	}
	return ic
}

// SetLearningOutcomes sets the "learning_outcomes" field.
func (ic *InternshipCreate) SetLearningOutcomes(s []string) *InternshipCreate {
	ic.mutation.SetLearningOutcomes(s)
	return ic
}

// SetPrerequisites sets the "prerequisites" field.
func (ic *InternshipCreate) SetPrerequisites(s []string) *InternshipCreate {
	ic.mutation.SetPrerequisites(s)
	return ic
}

// SetBenefits sets the "benefits" field.
func (ic *InternshipCreate) SetBenefits(s []string) *InternshipCreate {
	ic.mutation.SetBenefits(s)
	return ic
}

// SetCurrency sets the "currency" field.
func (ic *InternshipCreate) SetCurrency(s string) *InternshipCreate {
	ic.mutation.SetCurrency(s)
	return ic
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (ic *InternshipCreate) SetNillableCurrency(s *string) *InternshipCreate {
	if s != nil {
		ic.SetCurrency(*s)
	}
	return ic
}

// SetPrice sets the "price" field.
func (ic *InternshipCreate) SetPrice(d decimal.Decimal) *InternshipCreate {
	ic.mutation.SetPrice(d)
	return ic
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (ic *InternshipCreate) SetNillablePrice(d *decimal.Decimal) *InternshipCreate {
	if d != nil {
		ic.SetPrice(*d)
	}
	return ic
}

// SetFlatDiscount sets the "flat_discount" field.
func (ic *InternshipCreate) SetFlatDiscount(d decimal.Decimal) *InternshipCreate {
	ic.mutation.SetFlatDiscount(d)
	return ic
}

// SetNillableFlatDiscount sets the "flat_discount" field if the given value is not nil.
func (ic *InternshipCreate) SetNillableFlatDiscount(d *decimal.Decimal) *InternshipCreate {
	if d != nil {
		ic.SetFlatDiscount(*d)
	}
	return ic
}

// SetPercentageDiscount sets the "percentage_discount" field.
func (ic *InternshipCreate) SetPercentageDiscount(d decimal.Decimal) *InternshipCreate {
	ic.mutation.SetPercentageDiscount(d)
	return ic
}

// SetNillablePercentageDiscount sets the "percentage_discount" field if the given value is not nil.
func (ic *InternshipCreate) SetNillablePercentageDiscount(d *decimal.Decimal) *InternshipCreate {
	if d != nil {
		ic.SetPercentageDiscount(*d)
	}
	return ic
}

// SetID sets the "id" field.
func (ic *InternshipCreate) SetID(s string) *InternshipCreate {
	ic.mutation.SetID(s)
	return ic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ic *InternshipCreate) SetNillableID(s *string) *InternshipCreate {
	if s != nil {
		ic.SetID(*s)
	}
	return ic
}

// AddCategoryIDs adds the "categories" edge to the Category entity by IDs.
func (ic *InternshipCreate) AddCategoryIDs(ids ...string) *InternshipCreate {
	ic.mutation.AddCategoryIDs(ids...)
	return ic
}

// AddCategories adds the "categories" edges to the Category entity.
func (ic *InternshipCreate) AddCategories(c ...*Category) *InternshipCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ic.AddCategoryIDs(ids...)
}

// Mutation returns the InternshipMutation object of the builder.
func (ic *InternshipCreate) Mutation() *InternshipMutation {
	return ic.mutation
}

// Save creates the Internship in the database.
func (ic *InternshipCreate) Save(ctx context.Context) (*Internship, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InternshipCreate) SaveX(ctx context.Context) *Internship {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *InternshipCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *InternshipCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *InternshipCreate) defaults() {
	if _, ok := ic.mutation.Status(); !ok {
		v := internship.DefaultStatus
		ic.mutation.SetStatus(v)
	}
	if _, ok := ic.mutation.CreatedAt(); !ok {
		v := internship.DefaultCreatedAt()
		ic.mutation.SetCreatedAt(v)
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		v := internship.DefaultUpdatedAt()
		ic.mutation.SetUpdatedAt(v)
	}
	if _, ok := ic.mutation.Skills(); !ok {
		v := internship.DefaultSkills
		ic.mutation.SetSkills(v)
	}
	if _, ok := ic.mutation.ID(); !ok {
		v := internship.DefaultID()
		ic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *InternshipCreate) check() error {
	if _, ok := ic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Internship.status"`)}
	}
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Internship.created_at"`)}
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Internship.updated_at"`)}
	}
	if _, ok := ic.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Internship.title"`)}
	}
	if v, ok := ic.mutation.Title(); ok {
		if err := internship.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Internship.title": %w`, err)}
		}
	}
	if _, ok := ic.mutation.LookupKey(); !ok {
		return &ValidationError{Name: "lookup_key", err: errors.New(`ent: missing required field "Internship.lookup_key"`)}
	}
	if v, ok := ic.mutation.LookupKey(); ok {
		if err := internship.LookupKeyValidator(v); err != nil {
			return &ValidationError{Name: "lookup_key", err: fmt.Errorf(`ent: validator failed for field "Internship.lookup_key": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Internship.description"`)}
	}
	if v, ok := ic.mutation.Description(); ok {
		if err := internship.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Internship.description": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Mode(); !ok {
		return &ValidationError{Name: "mode", err: errors.New(`ent: missing required field "Internship.mode"`)}
	}
	if v, ok := ic.mutation.Mode(); ok {
		if err := internship.ModeValidator(v); err != nil {
			return &ValidationError{Name: "mode", err: fmt.Errorf(`ent: validator failed for field "Internship.mode": %w`, err)}
		}
	}
	return nil
}

func (ic *InternshipCreate) sqlSave(ctx context.Context) (*Internship, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Internship.ID type: %T", _spec.ID.Value)
		}
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *InternshipCreate) createSpec() (*Internship, *sqlgraph.CreateSpec) {
	var (
		_node = &Internship{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(internship.Table, sqlgraph.NewFieldSpec(internship.FieldID, field.TypeString))
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ic.mutation.Status(); ok {
		_spec.SetField(internship.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.SetField(internship.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.SetField(internship.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ic.mutation.CreatedBy(); ok {
		_spec.SetField(internship.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := ic.mutation.UpdatedBy(); ok {
		_spec.SetField(internship.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := ic.mutation.Title(); ok {
		_spec.SetField(internship.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := ic.mutation.LookupKey(); ok {
		_spec.SetField(internship.FieldLookupKey, field.TypeString, value)
		_node.LookupKey = value
	}
	if value, ok := ic.mutation.Description(); ok {
		_spec.SetField(internship.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ic.mutation.Skills(); ok {
		_spec.SetField(internship.FieldSkills, field.TypeJSON, value)
		_node.Skills = value
	}
	if value, ok := ic.mutation.Level(); ok {
		_spec.SetField(internship.FieldLevel, field.TypeString, value)
		_node.Level = value
	}
	if value, ok := ic.mutation.Mode(); ok {
		_spec.SetField(internship.FieldMode, field.TypeString, value)
		_node.Mode = value
	}
	if value, ok := ic.mutation.DurationInWeeks(); ok {
		_spec.SetField(internship.FieldDurationInWeeks, field.TypeInt, value)
		_node.DurationInWeeks = value
	}
	if value, ok := ic.mutation.LearningOutcomes(); ok {
		_spec.SetField(internship.FieldLearningOutcomes, field.TypeJSON, value)
		_node.LearningOutcomes = value
	}
	if value, ok := ic.mutation.Prerequisites(); ok {
		_spec.SetField(internship.FieldPrerequisites, field.TypeJSON, value)
		_node.Prerequisites = value
	}
	if value, ok := ic.mutation.Benefits(); ok {
		_spec.SetField(internship.FieldBenefits, field.TypeJSON, value)
		_node.Benefits = value
	}
	if value, ok := ic.mutation.Currency(); ok {
		_spec.SetField(internship.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := ic.mutation.Price(); ok {
		_spec.SetField(internship.FieldPrice, field.TypeOther, value)
		_node.Price = value
	}
	if value, ok := ic.mutation.FlatDiscount(); ok {
		_spec.SetField(internship.FieldFlatDiscount, field.TypeOther, value)
		_node.FlatDiscount = value
	}
	if value, ok := ic.mutation.PercentageDiscount(); ok {
		_spec.SetField(internship.FieldPercentageDiscount, field.TypeOther, value)
		_node.PercentageDiscount = value
	}
	if nodes := ic.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internship.CategoriesTable,
			Columns: []string{internship.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InternshipCreateBulk is the builder for creating many Internship entities in bulk.
type InternshipCreateBulk struct {
	config
	err      error
	builders []*InternshipCreate
}

// Save creates the Internship entities in the database.
func (icb *InternshipCreateBulk) Save(ctx context.Context) ([]*Internship, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Internship, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InternshipMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *InternshipCreateBulk) SaveX(ctx context.Context) []*Internship {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *InternshipCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *InternshipCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
