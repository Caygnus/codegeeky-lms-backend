// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/omkar273/codegeeky/ent/cart"
	"github.com/omkar273/codegeeky/ent/cartlineitems"
	"github.com/shopspring/decimal"
)

// CartLineItems is the model entity for the CartLineItems schema.
type CartLineItems struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// CartID holds the value of the "cart_id" field.
	CartID string `json:"cart_id,omitempty"`
	// EntityID holds the value of the "entity_id" field.
	EntityID string `json:"entity_id,omitempty"`
	// EntityType holds the value of the "entity_type" field.
	EntityType string `json:"entity_type,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
	// PerUnitPrice holds the value of the "per_unit_price" field.
	PerUnitPrice decimal.Decimal `json:"per_unit_price,omitempty"`
	// TaxAmount holds the value of the "tax_amount" field.
	TaxAmount decimal.Decimal `json:"tax_amount,omitempty"`
	// DiscountAmount holds the value of the "discount_amount" field.
	DiscountAmount decimal.Decimal `json:"discount_amount,omitempty"`
	// Subtotal holds the value of the "subtotal" field.
	Subtotal decimal.Decimal `json:"subtotal,omitempty"`
	// Total holds the value of the "total" field.
	Total decimal.Decimal `json:"total,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CartLineItemsQuery when eager-loading is set.
	Edges        CartLineItemsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CartLineItemsEdges holds the relations/edges for other nodes in the graph.
type CartLineItemsEdges struct {
	// Cart holds the value of the cart edge.
	Cart *Cart `json:"cart,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CartOrErr returns the Cart value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CartLineItemsEdges) CartOrErr() (*Cart, error) {
	if e.Cart != nil {
		return e.Cart, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: cart.Label}
	}
	return nil, &NotLoadedError{edge: "cart"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CartLineItems) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cartlineitems.FieldMetadata:
			values[i] = new([]byte)
		case cartlineitems.FieldPerUnitPrice, cartlineitems.FieldTaxAmount, cartlineitems.FieldDiscountAmount, cartlineitems.FieldSubtotal, cartlineitems.FieldTotal:
			values[i] = new(decimal.Decimal)
		case cartlineitems.FieldQuantity:
			values[i] = new(sql.NullInt64)
		case cartlineitems.FieldID, cartlineitems.FieldStatus, cartlineitems.FieldCreatedBy, cartlineitems.FieldUpdatedBy, cartlineitems.FieldCartID, cartlineitems.FieldEntityID, cartlineitems.FieldEntityType:
			values[i] = new(sql.NullString)
		case cartlineitems.FieldCreatedAt, cartlineitems.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CartLineItems fields.
func (cli *CartLineItems) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cartlineitems.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				cli.ID = value.String
			}
		case cartlineitems.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				cli.Status = value.String
			}
		case cartlineitems.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cli.CreatedAt = value.Time
			}
		case cartlineitems.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cli.UpdatedAt = value.Time
			}
		case cartlineitems.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				cli.CreatedBy = value.String
			}
		case cartlineitems.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				cli.UpdatedBy = value.String
			}
		case cartlineitems.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cli.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case cartlineitems.FieldCartID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cart_id", values[i])
			} else if value.Valid {
				cli.CartID = value.String
			}
		case cartlineitems.FieldEntityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_id", values[i])
			} else if value.Valid {
				cli.EntityID = value.String
			}
		case cartlineitems.FieldEntityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_type", values[i])
			} else if value.Valid {
				cli.EntityType = value.String
			}
		case cartlineitems.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				cli.Quantity = int(value.Int64)
			}
		case cartlineitems.FieldPerUnitPrice:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field per_unit_price", values[i])
			} else if value != nil {
				cli.PerUnitPrice = *value
			}
		case cartlineitems.FieldTaxAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field tax_amount", values[i])
			} else if value != nil {
				cli.TaxAmount = *value
			}
		case cartlineitems.FieldDiscountAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field discount_amount", values[i])
			} else if value != nil {
				cli.DiscountAmount = *value
			}
		case cartlineitems.FieldSubtotal:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field subtotal", values[i])
			} else if value != nil {
				cli.Subtotal = *value
			}
		case cartlineitems.FieldTotal:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field total", values[i])
			} else if value != nil {
				cli.Total = *value
			}
		default:
			cli.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CartLineItems.
// This includes values selected through modifiers, order, etc.
func (cli *CartLineItems) Value(name string) (ent.Value, error) {
	return cli.selectValues.Get(name)
}

// QueryCart queries the "cart" edge of the CartLineItems entity.
func (cli *CartLineItems) QueryCart() *CartQuery {
	return NewCartLineItemsClient(cli.config).QueryCart(cli)
}

// Update returns a builder for updating this CartLineItems.
// Note that you need to call CartLineItems.Unwrap() before calling this method if this CartLineItems
// was returned from a transaction, and the transaction was committed or rolled back.
func (cli *CartLineItems) Update() *CartLineItemsUpdateOne {
	return NewCartLineItemsClient(cli.config).UpdateOne(cli)
}

// Unwrap unwraps the CartLineItems entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cli *CartLineItems) Unwrap() *CartLineItems {
	_tx, ok := cli.config.driver.(*txDriver)
	if !ok {
		panic("ent: CartLineItems is not a transactional entity")
	}
	cli.config.driver = _tx.drv
	return cli
}

// String implements the fmt.Stringer.
func (cli *CartLineItems) String() string {
	var builder strings.Builder
	builder.WriteString("CartLineItems(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cli.ID))
	builder.WriteString("status=")
	builder.WriteString(cli.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cli.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cli.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(cli.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(cli.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", cli.Metadata))
	builder.WriteString(", ")
	builder.WriteString("cart_id=")
	builder.WriteString(cli.CartID)
	builder.WriteString(", ")
	builder.WriteString("entity_id=")
	builder.WriteString(cli.EntityID)
	builder.WriteString(", ")
	builder.WriteString("entity_type=")
	builder.WriteString(cli.EntityType)
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", cli.Quantity))
	builder.WriteString(", ")
	builder.WriteString("per_unit_price=")
	builder.WriteString(fmt.Sprintf("%v", cli.PerUnitPrice))
	builder.WriteString(", ")
	builder.WriteString("tax_amount=")
	builder.WriteString(fmt.Sprintf("%v", cli.TaxAmount))
	builder.WriteString(", ")
	builder.WriteString("discount_amount=")
	builder.WriteString(fmt.Sprintf("%v", cli.DiscountAmount))
	builder.WriteString(", ")
	builder.WriteString("subtotal=")
	builder.WriteString(fmt.Sprintf("%v", cli.Subtotal))
	builder.WriteString(", ")
	builder.WriteString("total=")
	builder.WriteString(fmt.Sprintf("%v", cli.Total))
	builder.WriteByte(')')
	return builder.String()
}

// CartLineItemsSlice is a parsable slice of CartLineItems.
type CartLineItemsSlice []*CartLineItems
