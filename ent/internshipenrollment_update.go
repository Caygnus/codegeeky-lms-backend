// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/omkar273/codegeeky/ent/internshipenrollment"
	"github.com/omkar273/codegeeky/ent/predicate"
	"github.com/omkar273/codegeeky/internal/types"
)

// InternshipEnrollmentUpdate is the builder for updating InternshipEnrollment entities.
type InternshipEnrollmentUpdate struct {
	config
	hooks    []Hook
	mutation *InternshipEnrollmentMutation
}

// Where appends a list predicates to the InternshipEnrollmentUpdate builder.
func (ieu *InternshipEnrollmentUpdate) Where(ps ...predicate.InternshipEnrollment) *InternshipEnrollmentUpdate {
	ieu.mutation.Where(ps...)
	return ieu
}

// SetStatus sets the "status" field.
func (ieu *InternshipEnrollmentUpdate) SetStatus(s string) *InternshipEnrollmentUpdate {
	ieu.mutation.SetStatus(s)
	return ieu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ieu *InternshipEnrollmentUpdate) SetNillableStatus(s *string) *InternshipEnrollmentUpdate {
	if s != nil {
		ieu.SetStatus(*s)
	}
	return ieu
}

// SetUpdatedAt sets the "updated_at" field.
func (ieu *InternshipEnrollmentUpdate) SetUpdatedAt(t time.Time) *InternshipEnrollmentUpdate {
	ieu.mutation.SetUpdatedAt(t)
	return ieu
}

// SetUpdatedBy sets the "updated_by" field.
func (ieu *InternshipEnrollmentUpdate) SetUpdatedBy(s string) *InternshipEnrollmentUpdate {
	ieu.mutation.SetUpdatedBy(s)
	return ieu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ieu *InternshipEnrollmentUpdate) SetNillableUpdatedBy(s *string) *InternshipEnrollmentUpdate {
	if s != nil {
		ieu.SetUpdatedBy(*s)
	}
	return ieu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ieu *InternshipEnrollmentUpdate) ClearUpdatedBy() *InternshipEnrollmentUpdate {
	ieu.mutation.ClearUpdatedBy()
	return ieu
}

// SetMetadata sets the "metadata" field.
func (ieu *InternshipEnrollmentUpdate) SetMetadata(m map[string]string) *InternshipEnrollmentUpdate {
	ieu.mutation.SetMetadata(m)
	return ieu
}

// ClearMetadata clears the value of the "metadata" field.
func (ieu *InternshipEnrollmentUpdate) ClearMetadata() *InternshipEnrollmentUpdate {
	ieu.mutation.ClearMetadata()
	return ieu
}

// SetUserID sets the "user_id" field.
func (ieu *InternshipEnrollmentUpdate) SetUserID(s string) *InternshipEnrollmentUpdate {
	ieu.mutation.SetUserID(s)
	return ieu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ieu *InternshipEnrollmentUpdate) SetNillableUserID(s *string) *InternshipEnrollmentUpdate {
	if s != nil {
		ieu.SetUserID(*s)
	}
	return ieu
}

// SetInternshipID sets the "internship_id" field.
func (ieu *InternshipEnrollmentUpdate) SetInternshipID(s string) *InternshipEnrollmentUpdate {
	ieu.mutation.SetInternshipID(s)
	return ieu
}

// SetNillableInternshipID sets the "internship_id" field if the given value is not nil.
func (ieu *InternshipEnrollmentUpdate) SetNillableInternshipID(s *string) *InternshipEnrollmentUpdate {
	if s != nil {
		ieu.SetInternshipID(*s)
	}
	return ieu
}

// SetInternshipBatchID sets the "internship_batch_id" field.
func (ieu *InternshipEnrollmentUpdate) SetInternshipBatchID(s string) *InternshipEnrollmentUpdate {
	ieu.mutation.SetInternshipBatchID(s)
	return ieu
}

// SetNillableInternshipBatchID sets the "internship_batch_id" field if the given value is not nil.
func (ieu *InternshipEnrollmentUpdate) SetNillableInternshipBatchID(s *string) *InternshipEnrollmentUpdate {
	if s != nil {
		ieu.SetInternshipBatchID(*s)
	}
	return ieu
}

// SetEnrollmentStatus sets the "enrollment_status" field.
func (ieu *InternshipEnrollmentUpdate) SetEnrollmentStatus(ts types.EnrollmentStatus) *InternshipEnrollmentUpdate {
	ieu.mutation.SetEnrollmentStatus(ts)
	return ieu
}

// SetNillableEnrollmentStatus sets the "enrollment_status" field if the given value is not nil.
func (ieu *InternshipEnrollmentUpdate) SetNillableEnrollmentStatus(ts *types.EnrollmentStatus) *InternshipEnrollmentUpdate {
	if ts != nil {
		ieu.SetEnrollmentStatus(*ts)
	}
	return ieu
}

// SetPaymentStatus sets the "payment_status" field.
func (ieu *InternshipEnrollmentUpdate) SetPaymentStatus(ts types.PaymentStatus) *InternshipEnrollmentUpdate {
	ieu.mutation.SetPaymentStatus(ts)
	return ieu
}

// SetNillablePaymentStatus sets the "payment_status" field if the given value is not nil.
func (ieu *InternshipEnrollmentUpdate) SetNillablePaymentStatus(ts *types.PaymentStatus) *InternshipEnrollmentUpdate {
	if ts != nil {
		ieu.SetPaymentStatus(*ts)
	}
	return ieu
}

// SetEnrolledAt sets the "enrolled_at" field.
func (ieu *InternshipEnrollmentUpdate) SetEnrolledAt(t time.Time) *InternshipEnrollmentUpdate {
	ieu.mutation.SetEnrolledAt(t)
	return ieu
}

// SetNillableEnrolledAt sets the "enrolled_at" field if the given value is not nil.
func (ieu *InternshipEnrollmentUpdate) SetNillableEnrolledAt(t *time.Time) *InternshipEnrollmentUpdate {
	if t != nil {
		ieu.SetEnrolledAt(*t)
	}
	return ieu
}

// ClearEnrolledAt clears the value of the "enrolled_at" field.
func (ieu *InternshipEnrollmentUpdate) ClearEnrolledAt() *InternshipEnrollmentUpdate {
	ieu.mutation.ClearEnrolledAt()
	return ieu
}

// SetPaymentID sets the "payment_id" field.
func (ieu *InternshipEnrollmentUpdate) SetPaymentID(s string) *InternshipEnrollmentUpdate {
	ieu.mutation.SetPaymentID(s)
	return ieu
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (ieu *InternshipEnrollmentUpdate) SetNillablePaymentID(s *string) *InternshipEnrollmentUpdate {
	if s != nil {
		ieu.SetPaymentID(*s)
	}
	return ieu
}

// ClearPaymentID clears the value of the "payment_id" field.
func (ieu *InternshipEnrollmentUpdate) ClearPaymentID() *InternshipEnrollmentUpdate {
	ieu.mutation.ClearPaymentID()
	return ieu
}

// SetRefundedAt sets the "refunded_at" field.
func (ieu *InternshipEnrollmentUpdate) SetRefundedAt(t time.Time) *InternshipEnrollmentUpdate {
	ieu.mutation.SetRefundedAt(t)
	return ieu
}

// SetNillableRefundedAt sets the "refunded_at" field if the given value is not nil.
func (ieu *InternshipEnrollmentUpdate) SetNillableRefundedAt(t *time.Time) *InternshipEnrollmentUpdate {
	if t != nil {
		ieu.SetRefundedAt(*t)
	}
	return ieu
}

// ClearRefundedAt clears the value of the "refunded_at" field.
func (ieu *InternshipEnrollmentUpdate) ClearRefundedAt() *InternshipEnrollmentUpdate {
	ieu.mutation.ClearRefundedAt()
	return ieu
}

// SetCancellationReason sets the "cancellation_reason" field.
func (ieu *InternshipEnrollmentUpdate) SetCancellationReason(s string) *InternshipEnrollmentUpdate {
	ieu.mutation.SetCancellationReason(s)
	return ieu
}

// SetNillableCancellationReason sets the "cancellation_reason" field if the given value is not nil.
func (ieu *InternshipEnrollmentUpdate) SetNillableCancellationReason(s *string) *InternshipEnrollmentUpdate {
	if s != nil {
		ieu.SetCancellationReason(*s)
	}
	return ieu
}

// ClearCancellationReason clears the value of the "cancellation_reason" field.
func (ieu *InternshipEnrollmentUpdate) ClearCancellationReason() *InternshipEnrollmentUpdate {
	ieu.mutation.ClearCancellationReason()
	return ieu
}

// SetRefundReason sets the "refund_reason" field.
func (ieu *InternshipEnrollmentUpdate) SetRefundReason(s string) *InternshipEnrollmentUpdate {
	ieu.mutation.SetRefundReason(s)
	return ieu
}

// SetNillableRefundReason sets the "refund_reason" field if the given value is not nil.
func (ieu *InternshipEnrollmentUpdate) SetNillableRefundReason(s *string) *InternshipEnrollmentUpdate {
	if s != nil {
		ieu.SetRefundReason(*s)
	}
	return ieu
}

// ClearRefundReason clears the value of the "refund_reason" field.
func (ieu *InternshipEnrollmentUpdate) ClearRefundReason() *InternshipEnrollmentUpdate {
	ieu.mutation.ClearRefundReason()
	return ieu
}

// SetIdempotencyKey sets the "idempotency_key" field.
func (ieu *InternshipEnrollmentUpdate) SetIdempotencyKey(s string) *InternshipEnrollmentUpdate {
	ieu.mutation.SetIdempotencyKey(s)
	return ieu
}

// SetNillableIdempotencyKey sets the "idempotency_key" field if the given value is not nil.
func (ieu *InternshipEnrollmentUpdate) SetNillableIdempotencyKey(s *string) *InternshipEnrollmentUpdate {
	if s != nil {
		ieu.SetIdempotencyKey(*s)
	}
	return ieu
}

// ClearIdempotencyKey clears the value of the "idempotency_key" field.
func (ieu *InternshipEnrollmentUpdate) ClearIdempotencyKey() *InternshipEnrollmentUpdate {
	ieu.mutation.ClearIdempotencyKey()
	return ieu
}

// Mutation returns the InternshipEnrollmentMutation object of the builder.
func (ieu *InternshipEnrollmentUpdate) Mutation() *InternshipEnrollmentMutation {
	return ieu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ieu *InternshipEnrollmentUpdate) Save(ctx context.Context) (int, error) {
	ieu.defaults()
	return withHooks(ctx, ieu.sqlSave, ieu.mutation, ieu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ieu *InternshipEnrollmentUpdate) SaveX(ctx context.Context) int {
	affected, err := ieu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ieu *InternshipEnrollmentUpdate) Exec(ctx context.Context) error {
	_, err := ieu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ieu *InternshipEnrollmentUpdate) ExecX(ctx context.Context) {
	if err := ieu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ieu *InternshipEnrollmentUpdate) defaults() {
	if _, ok := ieu.mutation.UpdatedAt(); !ok {
		v := internshipenrollment.UpdateDefaultUpdatedAt()
		ieu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ieu *InternshipEnrollmentUpdate) check() error {
	if v, ok := ieu.mutation.UserID(); ok {
		if err := internshipenrollment.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "InternshipEnrollment.user_id": %w`, err)}
		}
	}
	if v, ok := ieu.mutation.InternshipID(); ok {
		if err := internshipenrollment.InternshipIDValidator(v); err != nil {
			return &ValidationError{Name: "internship_id", err: fmt.Errorf(`ent: validator failed for field "InternshipEnrollment.internship_id": %w`, err)}
		}
	}
	if v, ok := ieu.mutation.InternshipBatchID(); ok {
		if err := internshipenrollment.InternshipBatchIDValidator(v); err != nil {
			return &ValidationError{Name: "internship_batch_id", err: fmt.Errorf(`ent: validator failed for field "InternshipEnrollment.internship_batch_id": %w`, err)}
		}
	}
	if v, ok := ieu.mutation.EnrollmentStatus(); ok {
		if err := internshipenrollment.EnrollmentStatusValidator(string(v)); err != nil {
			return &ValidationError{Name: "enrollment_status", err: fmt.Errorf(`ent: validator failed for field "InternshipEnrollment.enrollment_status": %w`, err)}
		}
	}
	if v, ok := ieu.mutation.PaymentStatus(); ok {
		if err := internshipenrollment.PaymentStatusValidator(string(v)); err != nil {
			return &ValidationError{Name: "payment_status", err: fmt.Errorf(`ent: validator failed for field "InternshipEnrollment.payment_status": %w`, err)}
		}
	}
	return nil
}

func (ieu *InternshipEnrollmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ieu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(internshipenrollment.Table, internshipenrollment.Columns, sqlgraph.NewFieldSpec(internshipenrollment.FieldID, field.TypeString))
	if ps := ieu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ieu.mutation.Status(); ok {
		_spec.SetField(internshipenrollment.FieldStatus, field.TypeString, value)
	}
	if value, ok := ieu.mutation.UpdatedAt(); ok {
		_spec.SetField(internshipenrollment.FieldUpdatedAt, field.TypeTime, value)
	}
	if ieu.mutation.CreatedByCleared() {
		_spec.ClearField(internshipenrollment.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ieu.mutation.UpdatedBy(); ok {
		_spec.SetField(internshipenrollment.FieldUpdatedBy, field.TypeString, value)
	}
	if ieu.mutation.UpdatedByCleared() {
		_spec.ClearField(internshipenrollment.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := ieu.mutation.Metadata(); ok {
		_spec.SetField(internshipenrollment.FieldMetadata, field.TypeJSON, value)
	}
	if ieu.mutation.MetadataCleared() {
		_spec.ClearField(internshipenrollment.FieldMetadata, field.TypeJSON)
	}
	if value, ok := ieu.mutation.UserID(); ok {
		_spec.SetField(internshipenrollment.FieldUserID, field.TypeString, value)
	}
	if value, ok := ieu.mutation.InternshipID(); ok {
		_spec.SetField(internshipenrollment.FieldInternshipID, field.TypeString, value)
	}
	if value, ok := ieu.mutation.InternshipBatchID(); ok {
		_spec.SetField(internshipenrollment.FieldInternshipBatchID, field.TypeString, value)
	}
	if value, ok := ieu.mutation.EnrollmentStatus(); ok {
		_spec.SetField(internshipenrollment.FieldEnrollmentStatus, field.TypeString, value)
	}
	if value, ok := ieu.mutation.PaymentStatus(); ok {
		_spec.SetField(internshipenrollment.FieldPaymentStatus, field.TypeString, value)
	}
	if value, ok := ieu.mutation.EnrolledAt(); ok {
		_spec.SetField(internshipenrollment.FieldEnrolledAt, field.TypeTime, value)
	}
	if ieu.mutation.EnrolledAtCleared() {
		_spec.ClearField(internshipenrollment.FieldEnrolledAt, field.TypeTime)
	}
	if value, ok := ieu.mutation.PaymentID(); ok {
		_spec.SetField(internshipenrollment.FieldPaymentID, field.TypeString, value)
	}
	if ieu.mutation.PaymentIDCleared() {
		_spec.ClearField(internshipenrollment.FieldPaymentID, field.TypeString)
	}
	if value, ok := ieu.mutation.RefundedAt(); ok {
		_spec.SetField(internshipenrollment.FieldRefundedAt, field.TypeTime, value)
	}
	if ieu.mutation.RefundedAtCleared() {
		_spec.ClearField(internshipenrollment.FieldRefundedAt, field.TypeTime)
	}
	if value, ok := ieu.mutation.CancellationReason(); ok {
		_spec.SetField(internshipenrollment.FieldCancellationReason, field.TypeString, value)
	}
	if ieu.mutation.CancellationReasonCleared() {
		_spec.ClearField(internshipenrollment.FieldCancellationReason, field.TypeString)
	}
	if value, ok := ieu.mutation.RefundReason(); ok {
		_spec.SetField(internshipenrollment.FieldRefundReason, field.TypeString, value)
	}
	if ieu.mutation.RefundReasonCleared() {
		_spec.ClearField(internshipenrollment.FieldRefundReason, field.TypeString)
	}
	if value, ok := ieu.mutation.IdempotencyKey(); ok {
		_spec.SetField(internshipenrollment.FieldIdempotencyKey, field.TypeString, value)
	}
	if ieu.mutation.IdempotencyKeyCleared() {
		_spec.ClearField(internshipenrollment.FieldIdempotencyKey, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ieu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{internshipenrollment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ieu.mutation.done = true
	return n, nil
}

// InternshipEnrollmentUpdateOne is the builder for updating a single InternshipEnrollment entity.
type InternshipEnrollmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InternshipEnrollmentMutation
}

// SetStatus sets the "status" field.
func (ieuo *InternshipEnrollmentUpdateOne) SetStatus(s string) *InternshipEnrollmentUpdateOne {
	ieuo.mutation.SetStatus(s)
	return ieuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ieuo *InternshipEnrollmentUpdateOne) SetNillableStatus(s *string) *InternshipEnrollmentUpdateOne {
	if s != nil {
		ieuo.SetStatus(*s)
	}
	return ieuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ieuo *InternshipEnrollmentUpdateOne) SetUpdatedAt(t time.Time) *InternshipEnrollmentUpdateOne {
	ieuo.mutation.SetUpdatedAt(t)
	return ieuo
}

// SetUpdatedBy sets the "updated_by" field.
func (ieuo *InternshipEnrollmentUpdateOne) SetUpdatedBy(s string) *InternshipEnrollmentUpdateOne {
	ieuo.mutation.SetUpdatedBy(s)
	return ieuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ieuo *InternshipEnrollmentUpdateOne) SetNillableUpdatedBy(s *string) *InternshipEnrollmentUpdateOne {
	if s != nil {
		ieuo.SetUpdatedBy(*s)
	}
	return ieuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ieuo *InternshipEnrollmentUpdateOne) ClearUpdatedBy() *InternshipEnrollmentUpdateOne {
	ieuo.mutation.ClearUpdatedBy()
	return ieuo
}

// SetMetadata sets the "metadata" field.
func (ieuo *InternshipEnrollmentUpdateOne) SetMetadata(m map[string]string) *InternshipEnrollmentUpdateOne {
	ieuo.mutation.SetMetadata(m)
	return ieuo
}

// ClearMetadata clears the value of the "metadata" field.
func (ieuo *InternshipEnrollmentUpdateOne) ClearMetadata() *InternshipEnrollmentUpdateOne {
	ieuo.mutation.ClearMetadata()
	return ieuo
}

// SetUserID sets the "user_id" field.
func (ieuo *InternshipEnrollmentUpdateOne) SetUserID(s string) *InternshipEnrollmentUpdateOne {
	ieuo.mutation.SetUserID(s)
	return ieuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ieuo *InternshipEnrollmentUpdateOne) SetNillableUserID(s *string) *InternshipEnrollmentUpdateOne {
	if s != nil {
		ieuo.SetUserID(*s)
	}
	return ieuo
}

// SetInternshipID sets the "internship_id" field.
func (ieuo *InternshipEnrollmentUpdateOne) SetInternshipID(s string) *InternshipEnrollmentUpdateOne {
	ieuo.mutation.SetInternshipID(s)
	return ieuo
}

// SetNillableInternshipID sets the "internship_id" field if the given value is not nil.
func (ieuo *InternshipEnrollmentUpdateOne) SetNillableInternshipID(s *string) *InternshipEnrollmentUpdateOne {
	if s != nil {
		ieuo.SetInternshipID(*s)
	}
	return ieuo
}

// SetInternshipBatchID sets the "internship_batch_id" field.
func (ieuo *InternshipEnrollmentUpdateOne) SetInternshipBatchID(s string) *InternshipEnrollmentUpdateOne {
	ieuo.mutation.SetInternshipBatchID(s)
	return ieuo
}

// SetNillableInternshipBatchID sets the "internship_batch_id" field if the given value is not nil.
func (ieuo *InternshipEnrollmentUpdateOne) SetNillableInternshipBatchID(s *string) *InternshipEnrollmentUpdateOne {
	if s != nil {
		ieuo.SetInternshipBatchID(*s)
	}
	return ieuo
}

// SetEnrollmentStatus sets the "enrollment_status" field.
func (ieuo *InternshipEnrollmentUpdateOne) SetEnrollmentStatus(ts types.EnrollmentStatus) *InternshipEnrollmentUpdateOne {
	ieuo.mutation.SetEnrollmentStatus(ts)
	return ieuo
}

// SetNillableEnrollmentStatus sets the "enrollment_status" field if the given value is not nil.
func (ieuo *InternshipEnrollmentUpdateOne) SetNillableEnrollmentStatus(ts *types.EnrollmentStatus) *InternshipEnrollmentUpdateOne {
	if ts != nil {
		ieuo.SetEnrollmentStatus(*ts)
	}
	return ieuo
}

// SetPaymentStatus sets the "payment_status" field.
func (ieuo *InternshipEnrollmentUpdateOne) SetPaymentStatus(ts types.PaymentStatus) *InternshipEnrollmentUpdateOne {
	ieuo.mutation.SetPaymentStatus(ts)
	return ieuo
}

// SetNillablePaymentStatus sets the "payment_status" field if the given value is not nil.
func (ieuo *InternshipEnrollmentUpdateOne) SetNillablePaymentStatus(ts *types.PaymentStatus) *InternshipEnrollmentUpdateOne {
	if ts != nil {
		ieuo.SetPaymentStatus(*ts)
	}
	return ieuo
}

// SetEnrolledAt sets the "enrolled_at" field.
func (ieuo *InternshipEnrollmentUpdateOne) SetEnrolledAt(t time.Time) *InternshipEnrollmentUpdateOne {
	ieuo.mutation.SetEnrolledAt(t)
	return ieuo
}

// SetNillableEnrolledAt sets the "enrolled_at" field if the given value is not nil.
func (ieuo *InternshipEnrollmentUpdateOne) SetNillableEnrolledAt(t *time.Time) *InternshipEnrollmentUpdateOne {
	if t != nil {
		ieuo.SetEnrolledAt(*t)
	}
	return ieuo
}

// ClearEnrolledAt clears the value of the "enrolled_at" field.
func (ieuo *InternshipEnrollmentUpdateOne) ClearEnrolledAt() *InternshipEnrollmentUpdateOne {
	ieuo.mutation.ClearEnrolledAt()
	return ieuo
}

// SetPaymentID sets the "payment_id" field.
func (ieuo *InternshipEnrollmentUpdateOne) SetPaymentID(s string) *InternshipEnrollmentUpdateOne {
	ieuo.mutation.SetPaymentID(s)
	return ieuo
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (ieuo *InternshipEnrollmentUpdateOne) SetNillablePaymentID(s *string) *InternshipEnrollmentUpdateOne {
	if s != nil {
		ieuo.SetPaymentID(*s)
	}
	return ieuo
}

// ClearPaymentID clears the value of the "payment_id" field.
func (ieuo *InternshipEnrollmentUpdateOne) ClearPaymentID() *InternshipEnrollmentUpdateOne {
	ieuo.mutation.ClearPaymentID()
	return ieuo
}

// SetRefundedAt sets the "refunded_at" field.
func (ieuo *InternshipEnrollmentUpdateOne) SetRefundedAt(t time.Time) *InternshipEnrollmentUpdateOne {
	ieuo.mutation.SetRefundedAt(t)
	return ieuo
}

// SetNillableRefundedAt sets the "refunded_at" field if the given value is not nil.
func (ieuo *InternshipEnrollmentUpdateOne) SetNillableRefundedAt(t *time.Time) *InternshipEnrollmentUpdateOne {
	if t != nil {
		ieuo.SetRefundedAt(*t)
	}
	return ieuo
}

// ClearRefundedAt clears the value of the "refunded_at" field.
func (ieuo *InternshipEnrollmentUpdateOne) ClearRefundedAt() *InternshipEnrollmentUpdateOne {
	ieuo.mutation.ClearRefundedAt()
	return ieuo
}

// SetCancellationReason sets the "cancellation_reason" field.
func (ieuo *InternshipEnrollmentUpdateOne) SetCancellationReason(s string) *InternshipEnrollmentUpdateOne {
	ieuo.mutation.SetCancellationReason(s)
	return ieuo
}

// SetNillableCancellationReason sets the "cancellation_reason" field if the given value is not nil.
func (ieuo *InternshipEnrollmentUpdateOne) SetNillableCancellationReason(s *string) *InternshipEnrollmentUpdateOne {
	if s != nil {
		ieuo.SetCancellationReason(*s)
	}
	return ieuo
}

// ClearCancellationReason clears the value of the "cancellation_reason" field.
func (ieuo *InternshipEnrollmentUpdateOne) ClearCancellationReason() *InternshipEnrollmentUpdateOne {
	ieuo.mutation.ClearCancellationReason()
	return ieuo
}

// SetRefundReason sets the "refund_reason" field.
func (ieuo *InternshipEnrollmentUpdateOne) SetRefundReason(s string) *InternshipEnrollmentUpdateOne {
	ieuo.mutation.SetRefundReason(s)
	return ieuo
}

// SetNillableRefundReason sets the "refund_reason" field if the given value is not nil.
func (ieuo *InternshipEnrollmentUpdateOne) SetNillableRefundReason(s *string) *InternshipEnrollmentUpdateOne {
	if s != nil {
		ieuo.SetRefundReason(*s)
	}
	return ieuo
}

// ClearRefundReason clears the value of the "refund_reason" field.
func (ieuo *InternshipEnrollmentUpdateOne) ClearRefundReason() *InternshipEnrollmentUpdateOne {
	ieuo.mutation.ClearRefundReason()
	return ieuo
}

// SetIdempotencyKey sets the "idempotency_key" field.
func (ieuo *InternshipEnrollmentUpdateOne) SetIdempotencyKey(s string) *InternshipEnrollmentUpdateOne {
	ieuo.mutation.SetIdempotencyKey(s)
	return ieuo
}

// SetNillableIdempotencyKey sets the "idempotency_key" field if the given value is not nil.
func (ieuo *InternshipEnrollmentUpdateOne) SetNillableIdempotencyKey(s *string) *InternshipEnrollmentUpdateOne {
	if s != nil {
		ieuo.SetIdempotencyKey(*s)
	}
	return ieuo
}

// ClearIdempotencyKey clears the value of the "idempotency_key" field.
func (ieuo *InternshipEnrollmentUpdateOne) ClearIdempotencyKey() *InternshipEnrollmentUpdateOne {
	ieuo.mutation.ClearIdempotencyKey()
	return ieuo
}

// Mutation returns the InternshipEnrollmentMutation object of the builder.
func (ieuo *InternshipEnrollmentUpdateOne) Mutation() *InternshipEnrollmentMutation {
	return ieuo.mutation
}

// Where appends a list predicates to the InternshipEnrollmentUpdate builder.
func (ieuo *InternshipEnrollmentUpdateOne) Where(ps ...predicate.InternshipEnrollment) *InternshipEnrollmentUpdateOne {
	ieuo.mutation.Where(ps...)
	return ieuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ieuo *InternshipEnrollmentUpdateOne) Select(field string, fields ...string) *InternshipEnrollmentUpdateOne {
	ieuo.fields = append([]string{field}, fields...)
	return ieuo
}

// Save executes the query and returns the updated InternshipEnrollment entity.
func (ieuo *InternshipEnrollmentUpdateOne) Save(ctx context.Context) (*InternshipEnrollment, error) {
	ieuo.defaults()
	return withHooks(ctx, ieuo.sqlSave, ieuo.mutation, ieuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ieuo *InternshipEnrollmentUpdateOne) SaveX(ctx context.Context) *InternshipEnrollment {
	node, err := ieuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ieuo *InternshipEnrollmentUpdateOne) Exec(ctx context.Context) error {
	_, err := ieuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ieuo *InternshipEnrollmentUpdateOne) ExecX(ctx context.Context) {
	if err := ieuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ieuo *InternshipEnrollmentUpdateOne) defaults() {
	if _, ok := ieuo.mutation.UpdatedAt(); !ok {
		v := internshipenrollment.UpdateDefaultUpdatedAt()
		ieuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ieuo *InternshipEnrollmentUpdateOne) check() error {
	if v, ok := ieuo.mutation.UserID(); ok {
		if err := internshipenrollment.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "InternshipEnrollment.user_id": %w`, err)}
		}
	}
	if v, ok := ieuo.mutation.InternshipID(); ok {
		if err := internshipenrollment.InternshipIDValidator(v); err != nil {
			return &ValidationError{Name: "internship_id", err: fmt.Errorf(`ent: validator failed for field "InternshipEnrollment.internship_id": %w`, err)}
		}
	}
	if v, ok := ieuo.mutation.InternshipBatchID(); ok {
		if err := internshipenrollment.InternshipBatchIDValidator(v); err != nil {
			return &ValidationError{Name: "internship_batch_id", err: fmt.Errorf(`ent: validator failed for field "InternshipEnrollment.internship_batch_id": %w`, err)}
		}
	}
	if v, ok := ieuo.mutation.EnrollmentStatus(); ok {
		if err := internshipenrollment.EnrollmentStatusValidator(string(v)); err != nil {
			return &ValidationError{Name: "enrollment_status", err: fmt.Errorf(`ent: validator failed for field "InternshipEnrollment.enrollment_status": %w`, err)}
		}
	}
	if v, ok := ieuo.mutation.PaymentStatus(); ok {
		if err := internshipenrollment.PaymentStatusValidator(string(v)); err != nil {
			return &ValidationError{Name: "payment_status", err: fmt.Errorf(`ent: validator failed for field "InternshipEnrollment.payment_status": %w`, err)}
		}
	}
	return nil
}

func (ieuo *InternshipEnrollmentUpdateOne) sqlSave(ctx context.Context) (_node *InternshipEnrollment, err error) {
	if err := ieuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(internshipenrollment.Table, internshipenrollment.Columns, sqlgraph.NewFieldSpec(internshipenrollment.FieldID, field.TypeString))
	id, ok := ieuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InternshipEnrollment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ieuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, internshipenrollment.FieldID)
		for _, f := range fields {
			if !internshipenrollment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != internshipenrollment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ieuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ieuo.mutation.Status(); ok {
		_spec.SetField(internshipenrollment.FieldStatus, field.TypeString, value)
	}
	if value, ok := ieuo.mutation.UpdatedAt(); ok {
		_spec.SetField(internshipenrollment.FieldUpdatedAt, field.TypeTime, value)
	}
	if ieuo.mutation.CreatedByCleared() {
		_spec.ClearField(internshipenrollment.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ieuo.mutation.UpdatedBy(); ok {
		_spec.SetField(internshipenrollment.FieldUpdatedBy, field.TypeString, value)
	}
	if ieuo.mutation.UpdatedByCleared() {
		_spec.ClearField(internshipenrollment.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := ieuo.mutation.Metadata(); ok {
		_spec.SetField(internshipenrollment.FieldMetadata, field.TypeJSON, value)
	}
	if ieuo.mutation.MetadataCleared() {
		_spec.ClearField(internshipenrollment.FieldMetadata, field.TypeJSON)
	}
	if value, ok := ieuo.mutation.UserID(); ok {
		_spec.SetField(internshipenrollment.FieldUserID, field.TypeString, value)
	}
	if value, ok := ieuo.mutation.InternshipID(); ok {
		_spec.SetField(internshipenrollment.FieldInternshipID, field.TypeString, value)
	}
	if value, ok := ieuo.mutation.InternshipBatchID(); ok {
		_spec.SetField(internshipenrollment.FieldInternshipBatchID, field.TypeString, value)
	}
	if value, ok := ieuo.mutation.EnrollmentStatus(); ok {
		_spec.SetField(internshipenrollment.FieldEnrollmentStatus, field.TypeString, value)
	}
	if value, ok := ieuo.mutation.PaymentStatus(); ok {
		_spec.SetField(internshipenrollment.FieldPaymentStatus, field.TypeString, value)
	}
	if value, ok := ieuo.mutation.EnrolledAt(); ok {
		_spec.SetField(internshipenrollment.FieldEnrolledAt, field.TypeTime, value)
	}
	if ieuo.mutation.EnrolledAtCleared() {
		_spec.ClearField(internshipenrollment.FieldEnrolledAt, field.TypeTime)
	}
	if value, ok := ieuo.mutation.PaymentID(); ok {
		_spec.SetField(internshipenrollment.FieldPaymentID, field.TypeString, value)
	}
	if ieuo.mutation.PaymentIDCleared() {
		_spec.ClearField(internshipenrollment.FieldPaymentID, field.TypeString)
	}
	if value, ok := ieuo.mutation.RefundedAt(); ok {
		_spec.SetField(internshipenrollment.FieldRefundedAt, field.TypeTime, value)
	}
	if ieuo.mutation.RefundedAtCleared() {
		_spec.ClearField(internshipenrollment.FieldRefundedAt, field.TypeTime)
	}
	if value, ok := ieuo.mutation.CancellationReason(); ok {
		_spec.SetField(internshipenrollment.FieldCancellationReason, field.TypeString, value)
	}
	if ieuo.mutation.CancellationReasonCleared() {
		_spec.ClearField(internshipenrollment.FieldCancellationReason, field.TypeString)
	}
	if value, ok := ieuo.mutation.RefundReason(); ok {
		_spec.SetField(internshipenrollment.FieldRefundReason, field.TypeString, value)
	}
	if ieuo.mutation.RefundReasonCleared() {
		_spec.ClearField(internshipenrollment.FieldRefundReason, field.TypeString)
	}
	if value, ok := ieuo.mutation.IdempotencyKey(); ok {
		_spec.SetField(internshipenrollment.FieldIdempotencyKey, field.TypeString, value)
	}
	if ieuo.mutation.IdempotencyKeyCleared() {
		_spec.ClearField(internshipenrollment.FieldIdempotencyKey, field.TypeString)
	}
	_node = &InternshipEnrollment{config: ieuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ieuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{internshipenrollment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ieuo.mutation.done = true
	return _node, nil
}
