// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/omkar273/codegeeky/ent/internshipbatch"
	"github.com/omkar273/codegeeky/ent/predicate"
)

// InternshipBatchUpdate is the builder for updating InternshipBatch entities.
type InternshipBatchUpdate struct {
	config
	hooks    []Hook
	mutation *InternshipBatchMutation
}

// Where appends a list predicates to the InternshipBatchUpdate builder.
func (ibu *InternshipBatchUpdate) Where(ps ...predicate.InternshipBatch) *InternshipBatchUpdate {
	ibu.mutation.Where(ps...)
	return ibu
}

// SetStatus sets the "status" field.
func (ibu *InternshipBatchUpdate) SetStatus(s string) *InternshipBatchUpdate {
	ibu.mutation.SetStatus(s)
	return ibu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ibu *InternshipBatchUpdate) SetNillableStatus(s *string) *InternshipBatchUpdate {
	if s != nil {
		ibu.SetStatus(*s)
	}
	return ibu
}

// SetUpdatedAt sets the "updated_at" field.
func (ibu *InternshipBatchUpdate) SetUpdatedAt(t time.Time) *InternshipBatchUpdate {
	ibu.mutation.SetUpdatedAt(t)
	return ibu
}

// SetUpdatedBy sets the "updated_by" field.
func (ibu *InternshipBatchUpdate) SetUpdatedBy(s string) *InternshipBatchUpdate {
	ibu.mutation.SetUpdatedBy(s)
	return ibu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ibu *InternshipBatchUpdate) SetNillableUpdatedBy(s *string) *InternshipBatchUpdate {
	if s != nil {
		ibu.SetUpdatedBy(*s)
	}
	return ibu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ibu *InternshipBatchUpdate) ClearUpdatedBy() *InternshipBatchUpdate {
	ibu.mutation.ClearUpdatedBy()
	return ibu
}

// SetMetadata sets the "metadata" field.
func (ibu *InternshipBatchUpdate) SetMetadata(m map[string]string) *InternshipBatchUpdate {
	ibu.mutation.SetMetadata(m)
	return ibu
}

// ClearMetadata clears the value of the "metadata" field.
func (ibu *InternshipBatchUpdate) ClearMetadata() *InternshipBatchUpdate {
	ibu.mutation.ClearMetadata()
	return ibu
}

// SetName sets the "name" field.
func (ibu *InternshipBatchUpdate) SetName(s string) *InternshipBatchUpdate {
	ibu.mutation.SetName(s)
	return ibu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ibu *InternshipBatchUpdate) SetNillableName(s *string) *InternshipBatchUpdate {
	if s != nil {
		ibu.SetName(*s)
	}
	return ibu
}

// SetDescription sets the "description" field.
func (ibu *InternshipBatchUpdate) SetDescription(s string) *InternshipBatchUpdate {
	ibu.mutation.SetDescription(s)
	return ibu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ibu *InternshipBatchUpdate) SetNillableDescription(s *string) *InternshipBatchUpdate {
	if s != nil {
		ibu.SetDescription(*s)
	}
	return ibu
}

// ClearDescription clears the value of the "description" field.
func (ibu *InternshipBatchUpdate) ClearDescription() *InternshipBatchUpdate {
	ibu.mutation.ClearDescription()
	return ibu
}

// SetStartDate sets the "start_date" field.
func (ibu *InternshipBatchUpdate) SetStartDate(t time.Time) *InternshipBatchUpdate {
	ibu.mutation.SetStartDate(t)
	return ibu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (ibu *InternshipBatchUpdate) SetNillableStartDate(t *time.Time) *InternshipBatchUpdate {
	if t != nil {
		ibu.SetStartDate(*t)
	}
	return ibu
}

// ClearStartDate clears the value of the "start_date" field.
func (ibu *InternshipBatchUpdate) ClearStartDate() *InternshipBatchUpdate {
	ibu.mutation.ClearStartDate()
	return ibu
}

// SetEndDate sets the "end_date" field.
func (ibu *InternshipBatchUpdate) SetEndDate(t time.Time) *InternshipBatchUpdate {
	ibu.mutation.SetEndDate(t)
	return ibu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (ibu *InternshipBatchUpdate) SetNillableEndDate(t *time.Time) *InternshipBatchUpdate {
	if t != nil {
		ibu.SetEndDate(*t)
	}
	return ibu
}

// ClearEndDate clears the value of the "end_date" field.
func (ibu *InternshipBatchUpdate) ClearEndDate() *InternshipBatchUpdate {
	ibu.mutation.ClearEndDate()
	return ibu
}

// SetBatchStatus sets the "batch_status" field.
func (ibu *InternshipBatchUpdate) SetBatchStatus(s string) *InternshipBatchUpdate {
	ibu.mutation.SetBatchStatus(s)
	return ibu
}

// SetNillableBatchStatus sets the "batch_status" field if the given value is not nil.
func (ibu *InternshipBatchUpdate) SetNillableBatchStatus(s *string) *InternshipBatchUpdate {
	if s != nil {
		ibu.SetBatchStatus(*s)
	}
	return ibu
}

// Mutation returns the InternshipBatchMutation object of the builder.
func (ibu *InternshipBatchUpdate) Mutation() *InternshipBatchMutation {
	return ibu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ibu *InternshipBatchUpdate) Save(ctx context.Context) (int, error) {
	ibu.defaults()
	return withHooks(ctx, ibu.sqlSave, ibu.mutation, ibu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ibu *InternshipBatchUpdate) SaveX(ctx context.Context) int {
	affected, err := ibu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ibu *InternshipBatchUpdate) Exec(ctx context.Context) error {
	_, err := ibu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ibu *InternshipBatchUpdate) ExecX(ctx context.Context) {
	if err := ibu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ibu *InternshipBatchUpdate) defaults() {
	if _, ok := ibu.mutation.UpdatedAt(); !ok {
		v := internshipbatch.UpdateDefaultUpdatedAt()
		ibu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ibu *InternshipBatchUpdate) check() error {
	if v, ok := ibu.mutation.Name(); ok {
		if err := internshipbatch.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "InternshipBatch.name": %w`, err)}
		}
	}
	if v, ok := ibu.mutation.BatchStatus(); ok {
		if err := internshipbatch.BatchStatusValidator(v); err != nil {
			return &ValidationError{Name: "batch_status", err: fmt.Errorf(`ent: validator failed for field "InternshipBatch.batch_status": %w`, err)}
		}
	}
	return nil
}

func (ibu *InternshipBatchUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ibu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(internshipbatch.Table, internshipbatch.Columns, sqlgraph.NewFieldSpec(internshipbatch.FieldID, field.TypeString))
	if ps := ibu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ibu.mutation.Status(); ok {
		_spec.SetField(internshipbatch.FieldStatus, field.TypeString, value)
	}
	if value, ok := ibu.mutation.UpdatedAt(); ok {
		_spec.SetField(internshipbatch.FieldUpdatedAt, field.TypeTime, value)
	}
	if ibu.mutation.CreatedByCleared() {
		_spec.ClearField(internshipbatch.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ibu.mutation.UpdatedBy(); ok {
		_spec.SetField(internshipbatch.FieldUpdatedBy, field.TypeString, value)
	}
	if ibu.mutation.UpdatedByCleared() {
		_spec.ClearField(internshipbatch.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := ibu.mutation.Metadata(); ok {
		_spec.SetField(internshipbatch.FieldMetadata, field.TypeJSON, value)
	}
	if ibu.mutation.MetadataCleared() {
		_spec.ClearField(internshipbatch.FieldMetadata, field.TypeJSON)
	}
	if value, ok := ibu.mutation.Name(); ok {
		_spec.SetField(internshipbatch.FieldName, field.TypeString, value)
	}
	if value, ok := ibu.mutation.Description(); ok {
		_spec.SetField(internshipbatch.FieldDescription, field.TypeString, value)
	}
	if ibu.mutation.DescriptionCleared() {
		_spec.ClearField(internshipbatch.FieldDescription, field.TypeString)
	}
	if value, ok := ibu.mutation.StartDate(); ok {
		_spec.SetField(internshipbatch.FieldStartDate, field.TypeTime, value)
	}
	if ibu.mutation.StartDateCleared() {
		_spec.ClearField(internshipbatch.FieldStartDate, field.TypeTime)
	}
	if value, ok := ibu.mutation.EndDate(); ok {
		_spec.SetField(internshipbatch.FieldEndDate, field.TypeTime, value)
	}
	if ibu.mutation.EndDateCleared() {
		_spec.ClearField(internshipbatch.FieldEndDate, field.TypeTime)
	}
	if value, ok := ibu.mutation.BatchStatus(); ok {
		_spec.SetField(internshipbatch.FieldBatchStatus, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ibu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{internshipbatch.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ibu.mutation.done = true
	return n, nil
}

// InternshipBatchUpdateOne is the builder for updating a single InternshipBatch entity.
type InternshipBatchUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InternshipBatchMutation
}

// SetStatus sets the "status" field.
func (ibuo *InternshipBatchUpdateOne) SetStatus(s string) *InternshipBatchUpdateOne {
	ibuo.mutation.SetStatus(s)
	return ibuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ibuo *InternshipBatchUpdateOne) SetNillableStatus(s *string) *InternshipBatchUpdateOne {
	if s != nil {
		ibuo.SetStatus(*s)
	}
	return ibuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ibuo *InternshipBatchUpdateOne) SetUpdatedAt(t time.Time) *InternshipBatchUpdateOne {
	ibuo.mutation.SetUpdatedAt(t)
	return ibuo
}

// SetUpdatedBy sets the "updated_by" field.
func (ibuo *InternshipBatchUpdateOne) SetUpdatedBy(s string) *InternshipBatchUpdateOne {
	ibuo.mutation.SetUpdatedBy(s)
	return ibuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ibuo *InternshipBatchUpdateOne) SetNillableUpdatedBy(s *string) *InternshipBatchUpdateOne {
	if s != nil {
		ibuo.SetUpdatedBy(*s)
	}
	return ibuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ibuo *InternshipBatchUpdateOne) ClearUpdatedBy() *InternshipBatchUpdateOne {
	ibuo.mutation.ClearUpdatedBy()
	return ibuo
}

// SetMetadata sets the "metadata" field.
func (ibuo *InternshipBatchUpdateOne) SetMetadata(m map[string]string) *InternshipBatchUpdateOne {
	ibuo.mutation.SetMetadata(m)
	return ibuo
}

// ClearMetadata clears the value of the "metadata" field.
func (ibuo *InternshipBatchUpdateOne) ClearMetadata() *InternshipBatchUpdateOne {
	ibuo.mutation.ClearMetadata()
	return ibuo
}

// SetName sets the "name" field.
func (ibuo *InternshipBatchUpdateOne) SetName(s string) *InternshipBatchUpdateOne {
	ibuo.mutation.SetName(s)
	return ibuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ibuo *InternshipBatchUpdateOne) SetNillableName(s *string) *InternshipBatchUpdateOne {
	if s != nil {
		ibuo.SetName(*s)
	}
	return ibuo
}

// SetDescription sets the "description" field.
func (ibuo *InternshipBatchUpdateOne) SetDescription(s string) *InternshipBatchUpdateOne {
	ibuo.mutation.SetDescription(s)
	return ibuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ibuo *InternshipBatchUpdateOne) SetNillableDescription(s *string) *InternshipBatchUpdateOne {
	if s != nil {
		ibuo.SetDescription(*s)
	}
	return ibuo
}

// ClearDescription clears the value of the "description" field.
func (ibuo *InternshipBatchUpdateOne) ClearDescription() *InternshipBatchUpdateOne {
	ibuo.mutation.ClearDescription()
	return ibuo
}

// SetStartDate sets the "start_date" field.
func (ibuo *InternshipBatchUpdateOne) SetStartDate(t time.Time) *InternshipBatchUpdateOne {
	ibuo.mutation.SetStartDate(t)
	return ibuo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (ibuo *InternshipBatchUpdateOne) SetNillableStartDate(t *time.Time) *InternshipBatchUpdateOne {
	if t != nil {
		ibuo.SetStartDate(*t)
	}
	return ibuo
}

// ClearStartDate clears the value of the "start_date" field.
func (ibuo *InternshipBatchUpdateOne) ClearStartDate() *InternshipBatchUpdateOne {
	ibuo.mutation.ClearStartDate()
	return ibuo
}

// SetEndDate sets the "end_date" field.
func (ibuo *InternshipBatchUpdateOne) SetEndDate(t time.Time) *InternshipBatchUpdateOne {
	ibuo.mutation.SetEndDate(t)
	return ibuo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (ibuo *InternshipBatchUpdateOne) SetNillableEndDate(t *time.Time) *InternshipBatchUpdateOne {
	if t != nil {
		ibuo.SetEndDate(*t)
	}
	return ibuo
}

// ClearEndDate clears the value of the "end_date" field.
func (ibuo *InternshipBatchUpdateOne) ClearEndDate() *InternshipBatchUpdateOne {
	ibuo.mutation.ClearEndDate()
	return ibuo
}

// SetBatchStatus sets the "batch_status" field.
func (ibuo *InternshipBatchUpdateOne) SetBatchStatus(s string) *InternshipBatchUpdateOne {
	ibuo.mutation.SetBatchStatus(s)
	return ibuo
}

// SetNillableBatchStatus sets the "batch_status" field if the given value is not nil.
func (ibuo *InternshipBatchUpdateOne) SetNillableBatchStatus(s *string) *InternshipBatchUpdateOne {
	if s != nil {
		ibuo.SetBatchStatus(*s)
	}
	return ibuo
}

// Mutation returns the InternshipBatchMutation object of the builder.
func (ibuo *InternshipBatchUpdateOne) Mutation() *InternshipBatchMutation {
	return ibuo.mutation
}

// Where appends a list predicates to the InternshipBatchUpdate builder.
func (ibuo *InternshipBatchUpdateOne) Where(ps ...predicate.InternshipBatch) *InternshipBatchUpdateOne {
	ibuo.mutation.Where(ps...)
	return ibuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ibuo *InternshipBatchUpdateOne) Select(field string, fields ...string) *InternshipBatchUpdateOne {
	ibuo.fields = append([]string{field}, fields...)
	return ibuo
}

// Save executes the query and returns the updated InternshipBatch entity.
func (ibuo *InternshipBatchUpdateOne) Save(ctx context.Context) (*InternshipBatch, error) {
	ibuo.defaults()
	return withHooks(ctx, ibuo.sqlSave, ibuo.mutation, ibuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ibuo *InternshipBatchUpdateOne) SaveX(ctx context.Context) *InternshipBatch {
	node, err := ibuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ibuo *InternshipBatchUpdateOne) Exec(ctx context.Context) error {
	_, err := ibuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ibuo *InternshipBatchUpdateOne) ExecX(ctx context.Context) {
	if err := ibuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ibuo *InternshipBatchUpdateOne) defaults() {
	if _, ok := ibuo.mutation.UpdatedAt(); !ok {
		v := internshipbatch.UpdateDefaultUpdatedAt()
		ibuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ibuo *InternshipBatchUpdateOne) check() error {
	if v, ok := ibuo.mutation.Name(); ok {
		if err := internshipbatch.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "InternshipBatch.name": %w`, err)}
		}
	}
	if v, ok := ibuo.mutation.BatchStatus(); ok {
		if err := internshipbatch.BatchStatusValidator(v); err != nil {
			return &ValidationError{Name: "batch_status", err: fmt.Errorf(`ent: validator failed for field "InternshipBatch.batch_status": %w`, err)}
		}
	}
	return nil
}

func (ibuo *InternshipBatchUpdateOne) sqlSave(ctx context.Context) (_node *InternshipBatch, err error) {
	if err := ibuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(internshipbatch.Table, internshipbatch.Columns, sqlgraph.NewFieldSpec(internshipbatch.FieldID, field.TypeString))
	id, ok := ibuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InternshipBatch.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ibuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, internshipbatch.FieldID)
		for _, f := range fields {
			if !internshipbatch.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != internshipbatch.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ibuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ibuo.mutation.Status(); ok {
		_spec.SetField(internshipbatch.FieldStatus, field.TypeString, value)
	}
	if value, ok := ibuo.mutation.UpdatedAt(); ok {
		_spec.SetField(internshipbatch.FieldUpdatedAt, field.TypeTime, value)
	}
	if ibuo.mutation.CreatedByCleared() {
		_spec.ClearField(internshipbatch.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ibuo.mutation.UpdatedBy(); ok {
		_spec.SetField(internshipbatch.FieldUpdatedBy, field.TypeString, value)
	}
	if ibuo.mutation.UpdatedByCleared() {
		_spec.ClearField(internshipbatch.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := ibuo.mutation.Metadata(); ok {
		_spec.SetField(internshipbatch.FieldMetadata, field.TypeJSON, value)
	}
	if ibuo.mutation.MetadataCleared() {
		_spec.ClearField(internshipbatch.FieldMetadata, field.TypeJSON)
	}
	if value, ok := ibuo.mutation.Name(); ok {
		_spec.SetField(internshipbatch.FieldName, field.TypeString, value)
	}
	if value, ok := ibuo.mutation.Description(); ok {
		_spec.SetField(internshipbatch.FieldDescription, field.TypeString, value)
	}
	if ibuo.mutation.DescriptionCleared() {
		_spec.ClearField(internshipbatch.FieldDescription, field.TypeString)
	}
	if value, ok := ibuo.mutation.StartDate(); ok {
		_spec.SetField(internshipbatch.FieldStartDate, field.TypeTime, value)
	}
	if ibuo.mutation.StartDateCleared() {
		_spec.ClearField(internshipbatch.FieldStartDate, field.TypeTime)
	}
	if value, ok := ibuo.mutation.EndDate(); ok {
		_spec.SetField(internshipbatch.FieldEndDate, field.TypeTime, value)
	}
	if ibuo.mutation.EndDateCleared() {
		_spec.ClearField(internshipbatch.FieldEndDate, field.TypeTime)
	}
	if value, ok := ibuo.mutation.BatchStatus(); ok {
		_spec.SetField(internshipbatch.FieldBatchStatus, field.TypeString, value)
	}
	_node = &InternshipBatch{config: ibuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ibuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{internshipbatch.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ibuo.mutation.done = true
	return _node, nil
}
