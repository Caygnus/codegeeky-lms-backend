// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/omkar273/codegeeky/ent/discount"
	"github.com/omkar273/codegeeky/internal/types"
	"github.com/shopspring/decimal"
)

// Discount is the model entity for the Discount schema.
type Discount struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// DiscountType holds the value of the "discount_type" field.
	DiscountType types.DiscountType `json:"discount_type,omitempty"`
	// DiscountValue holds the value of the "discount_value" field.
	DiscountValue decimal.Decimal `json:"discount_value,omitempty"`
	// ValidFrom holds the value of the "valid_from" field.
	ValidFrom time.Time `json:"valid_from,omitempty"`
	// ValidUntil holds the value of the "valid_until" field.
	ValidUntil *time.Time `json:"valid_until,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// MaxUses holds the value of the "max_uses" field.
	MaxUses *int `json:"max_uses,omitempty"`
	// MinOrderValue holds the value of the "min_order_value" field.
	MinOrderValue *decimal.Decimal `json:"min_order_value,omitempty"`
	// IsCombinable holds the value of the "is_combinable" field.
	IsCombinable bool `json:"is_combinable,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata     map[string]string `json:"metadata,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Discount) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case discount.FieldMinOrderValue:
			values[i] = &sql.NullScanner{S: new(decimal.Decimal)}
		case discount.FieldMetadata:
			values[i] = new([]byte)
		case discount.FieldDiscountValue:
			values[i] = new(decimal.Decimal)
		case discount.FieldIsActive, discount.FieldIsCombinable:
			values[i] = new(sql.NullBool)
		case discount.FieldMaxUses:
			values[i] = new(sql.NullInt64)
		case discount.FieldID, discount.FieldStatus, discount.FieldCreatedBy, discount.FieldUpdatedBy, discount.FieldCode, discount.FieldDescription, discount.FieldDiscountType:
			values[i] = new(sql.NullString)
		case discount.FieldCreatedAt, discount.FieldUpdatedAt, discount.FieldValidFrom, discount.FieldValidUntil:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Discount fields.
func (d *Discount) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case discount.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				d.ID = value.String
			}
		case discount.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				d.Status = value.String
			}
		case discount.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				d.CreatedAt = value.Time
			}
		case discount.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				d.UpdatedAt = value.Time
			}
		case discount.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				d.CreatedBy = value.String
			}
		case discount.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				d.UpdatedBy = value.String
			}
		case discount.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				d.Code = value.String
			}
		case discount.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				d.Description = value.String
			}
		case discount.FieldDiscountType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field discount_type", values[i])
			} else if value.Valid {
				d.DiscountType = types.DiscountType(value.String)
			}
		case discount.FieldDiscountValue:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field discount_value", values[i])
			} else if value != nil {
				d.DiscountValue = *value
			}
		case discount.FieldValidFrom:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field valid_from", values[i])
			} else if value.Valid {
				d.ValidFrom = value.Time
			}
		case discount.FieldValidUntil:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field valid_until", values[i])
			} else if value.Valid {
				d.ValidUntil = new(time.Time)
				*d.ValidUntil = value.Time
			}
		case discount.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				d.IsActive = value.Bool
			}
		case discount.FieldMaxUses:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_uses", values[i])
			} else if value.Valid {
				d.MaxUses = new(int)
				*d.MaxUses = int(value.Int64)
			}
		case discount.FieldMinOrderValue:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field min_order_value", values[i])
			} else if value.Valid {
				d.MinOrderValue = new(decimal.Decimal)
				*d.MinOrderValue = *value.S.(*decimal.Decimal)
			}
		case discount.FieldIsCombinable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_combinable", values[i])
			} else if value.Valid {
				d.IsCombinable = value.Bool
			}
		case discount.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &d.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Discount.
// This includes values selected through modifiers, order, etc.
func (d *Discount) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// Update returns a builder for updating this Discount.
// Note that you need to call Discount.Unwrap() before calling this method if this Discount
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Discount) Update() *DiscountUpdateOne {
	return NewDiscountClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Discount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Discount) Unwrap() *Discount {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Discount is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Discount) String() string {
	var builder strings.Builder
	builder.WriteString("Discount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("status=")
	builder.WriteString(d.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(d.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(d.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(d.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(d.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(d.Code)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(d.Description)
	builder.WriteString(", ")
	builder.WriteString("discount_type=")
	builder.WriteString(fmt.Sprintf("%v", d.DiscountType))
	builder.WriteString(", ")
	builder.WriteString("discount_value=")
	builder.WriteString(fmt.Sprintf("%v", d.DiscountValue))
	builder.WriteString(", ")
	builder.WriteString("valid_from=")
	builder.WriteString(d.ValidFrom.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := d.ValidUntil; v != nil {
		builder.WriteString("valid_until=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", d.IsActive))
	builder.WriteString(", ")
	if v := d.MaxUses; v != nil {
		builder.WriteString("max_uses=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := d.MinOrderValue; v != nil {
		builder.WriteString("min_order_value=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("is_combinable=")
	builder.WriteString(fmt.Sprintf("%v", d.IsCombinable))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", d.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// Discounts is a parsable slice of Discount.
type Discounts []*Discount
