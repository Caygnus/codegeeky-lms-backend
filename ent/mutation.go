// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/omkar273/codegeeky/ent/category"
	"github.com/omkar273/codegeeky/ent/discount"
	"github.com/omkar273/codegeeky/ent/fileupload"
	"github.com/omkar273/codegeeky/ent/internship"
	"github.com/omkar273/codegeeky/ent/internshipbatch"
	"github.com/omkar273/codegeeky/ent/internshipenrollment"
	"github.com/omkar273/codegeeky/ent/payment"
	"github.com/omkar273/codegeeky/ent/paymentattempt"
	"github.com/omkar273/codegeeky/ent/predicate"
	"github.com/omkar273/codegeeky/ent/user"
	"github.com/omkar273/codegeeky/internal/types"
	"github.com/shopspring/decimal"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCategory             = "Category"
	TypeDiscount             = "Discount"
	TypeFileUpload           = "FileUpload"
	TypeInternship           = "Internship"
	TypeInternshipBatch      = "InternshipBatch"
	TypeInternshipEnrollment = "InternshipEnrollment"
	TypePayment              = "Payment"
	TypePaymentAttempt       = "PaymentAttempt"
	TypeUser                 = "User"
)

// CategoryMutation represents an operation that mutates the Category nodes in the graph.
type CategoryMutation struct {
	config
	op                 Op
	typ                string
	id                 *string
	status             *string
	created_at         *time.Time
	updated_at         *time.Time
	created_by         *string
	updated_by         *string
	metadata           *map[string]string
	name               *string
	lookup_key         *string
	description        *string
	clearedFields      map[string]struct{}
	internships        map[string]struct{}
	removedinternships map[string]struct{}
	clearedinternships bool
	done               bool
	oldValue           func(context.Context) (*Category, error)
	predicates         []predicate.Category
}

var _ ent.Mutation = (*CategoryMutation)(nil)

// categoryOption allows management of the mutation configuration using functional options.
type categoryOption func(*CategoryMutation)

// newCategoryMutation creates new mutation for the Category entity.
func newCategoryMutation(c config, op Op, opts ...categoryOption) *CategoryMutation {
	m := &CategoryMutation{
		config:        c,
		op:            op,
		typ:           TypeCategory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCategoryID sets the ID field of the mutation.
func withCategoryID(id string) categoryOption {
	return func(m *CategoryMutation) {
		var (
			err   error
			once  sync.Once
			value *Category
		)
		m.oldValue = func(ctx context.Context) (*Category, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Category.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCategory sets the old Category of the mutation.
func withCategory(node *Category) categoryOption {
	return func(m *CategoryMutation) {
		m.oldValue = func(context.Context) (*Category, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CategoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CategoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Category entities.
func (m *CategoryMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CategoryMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CategoryMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Category.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStatus sets the "status" field.
func (m *CategoryMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *CategoryMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Category entity.
// If the Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *CategoryMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CategoryMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CategoryMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Category entity.
// If the Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CategoryMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CategoryMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CategoryMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Category entity.
// If the Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CategoryMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *CategoryMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *CategoryMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Category entity.
// If the Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *CategoryMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[category.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *CategoryMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[category.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *CategoryMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, category.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *CategoryMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *CategoryMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Category entity.
// If the Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *CategoryMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[category.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *CategoryMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[category.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *CategoryMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, category.FieldUpdatedBy)
}

// SetMetadata sets the "metadata" field.
func (m *CategoryMutation) SetMetadata(value map[string]string) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *CategoryMutation) Metadata() (r map[string]string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the Category entity.
// If the Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryMutation) OldMetadata(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *CategoryMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[category.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *CategoryMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[category.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *CategoryMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, category.FieldMetadata)
}

// SetName sets the "name" field.
func (m *CategoryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CategoryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Category entity.
// If the Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CategoryMutation) ResetName() {
	m.name = nil
}

// SetLookupKey sets the "lookup_key" field.
func (m *CategoryMutation) SetLookupKey(s string) {
	m.lookup_key = &s
}

// LookupKey returns the value of the "lookup_key" field in the mutation.
func (m *CategoryMutation) LookupKey() (r string, exists bool) {
	v := m.lookup_key
	if v == nil {
		return
	}
	return *v, true
}

// OldLookupKey returns the old "lookup_key" field's value of the Category entity.
// If the Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryMutation) OldLookupKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLookupKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLookupKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLookupKey: %w", err)
	}
	return oldValue.LookupKey, nil
}

// ResetLookupKey resets all changes to the "lookup_key" field.
func (m *CategoryMutation) ResetLookupKey() {
	m.lookup_key = nil
}

// SetDescription sets the "description" field.
func (m *CategoryMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *CategoryMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Category entity.
// If the Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *CategoryMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[category.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *CategoryMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[category.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *CategoryMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, category.FieldDescription)
}

// AddInternshipIDs adds the "internships" edge to the Internship entity by ids.
func (m *CategoryMutation) AddInternshipIDs(ids ...string) {
	if m.internships == nil {
		m.internships = make(map[string]struct{})
	}
	for i := range ids {
		m.internships[ids[i]] = struct{}{}
	}
}

// ClearInternships clears the "internships" edge to the Internship entity.
func (m *CategoryMutation) ClearInternships() {
	m.clearedinternships = true
}

// InternshipsCleared reports if the "internships" edge to the Internship entity was cleared.
func (m *CategoryMutation) InternshipsCleared() bool {
	return m.clearedinternships
}

// RemoveInternshipIDs removes the "internships" edge to the Internship entity by IDs.
func (m *CategoryMutation) RemoveInternshipIDs(ids ...string) {
	if m.removedinternships == nil {
		m.removedinternships = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.internships, ids[i])
		m.removedinternships[ids[i]] = struct{}{}
	}
}

// RemovedInternships returns the removed IDs of the "internships" edge to the Internship entity.
func (m *CategoryMutation) RemovedInternshipsIDs() (ids []string) {
	for id := range m.removedinternships {
		ids = append(ids, id)
	}
	return
}

// InternshipsIDs returns the "internships" edge IDs in the mutation.
func (m *CategoryMutation) InternshipsIDs() (ids []string) {
	for id := range m.internships {
		ids = append(ids, id)
	}
	return
}

// ResetInternships resets all changes to the "internships" edge.
func (m *CategoryMutation) ResetInternships() {
	m.internships = nil
	m.clearedinternships = false
	m.removedinternships = nil
}

// Where appends a list predicates to the CategoryMutation builder.
func (m *CategoryMutation) Where(ps ...predicate.Category) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CategoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CategoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Category, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CategoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CategoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Category).
func (m *CategoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CategoryMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.status != nil {
		fields = append(fields, category.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, category.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, category.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, category.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, category.FieldUpdatedBy)
	}
	if m.metadata != nil {
		fields = append(fields, category.FieldMetadata)
	}
	if m.name != nil {
		fields = append(fields, category.FieldName)
	}
	if m.lookup_key != nil {
		fields = append(fields, category.FieldLookupKey)
	}
	if m.description != nil {
		fields = append(fields, category.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CategoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case category.FieldStatus:
		return m.Status()
	case category.FieldCreatedAt:
		return m.CreatedAt()
	case category.FieldUpdatedAt:
		return m.UpdatedAt()
	case category.FieldCreatedBy:
		return m.CreatedBy()
	case category.FieldUpdatedBy:
		return m.UpdatedBy()
	case category.FieldMetadata:
		return m.Metadata()
	case category.FieldName:
		return m.Name()
	case category.FieldLookupKey:
		return m.LookupKey()
	case category.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CategoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case category.FieldStatus:
		return m.OldStatus(ctx)
	case category.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case category.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case category.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case category.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case category.FieldMetadata:
		return m.OldMetadata(ctx)
	case category.FieldName:
		return m.OldName(ctx)
	case category.FieldLookupKey:
		return m.OldLookupKey(ctx)
	case category.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Category field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case category.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case category.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case category.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case category.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case category.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case category.FieldMetadata:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case category.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case category.FieldLookupKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLookupKey(v)
		return nil
	case category.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Category field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CategoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CategoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Category numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CategoryMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(category.FieldCreatedBy) {
		fields = append(fields, category.FieldCreatedBy)
	}
	if m.FieldCleared(category.FieldUpdatedBy) {
		fields = append(fields, category.FieldUpdatedBy)
	}
	if m.FieldCleared(category.FieldMetadata) {
		fields = append(fields, category.FieldMetadata)
	}
	if m.FieldCleared(category.FieldDescription) {
		fields = append(fields, category.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CategoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CategoryMutation) ClearField(name string) error {
	switch name {
	case category.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case category.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case category.FieldMetadata:
		m.ClearMetadata()
		return nil
	case category.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Category nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CategoryMutation) ResetField(name string) error {
	switch name {
	case category.FieldStatus:
		m.ResetStatus()
		return nil
	case category.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case category.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case category.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case category.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case category.FieldMetadata:
		m.ResetMetadata()
		return nil
	case category.FieldName:
		m.ResetName()
		return nil
	case category.FieldLookupKey:
		m.ResetLookupKey()
		return nil
	case category.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Category field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CategoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.internships != nil {
		edges = append(edges, category.EdgeInternships)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CategoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case category.EdgeInternships:
		ids := make([]ent.Value, 0, len(m.internships))
		for id := range m.internships {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CategoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedinternships != nil {
		edges = append(edges, category.EdgeInternships)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CategoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case category.EdgeInternships:
		ids := make([]ent.Value, 0, len(m.removedinternships))
		for id := range m.removedinternships {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CategoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedinternships {
		edges = append(edges, category.EdgeInternships)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CategoryMutation) EdgeCleared(name string) bool {
	switch name {
	case category.EdgeInternships:
		return m.clearedinternships
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CategoryMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Category unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CategoryMutation) ResetEdge(name string) error {
	switch name {
	case category.EdgeInternships:
		m.ResetInternships()
		return nil
	}
	return fmt.Errorf("unknown Category edge %s", name)
}

// DiscountMutation represents an operation that mutates the Discount nodes in the graph.
type DiscountMutation struct {
	config
	op              Op
	typ             string
	id              *string
	status          *string
	created_at      *time.Time
	updated_at      *time.Time
	created_by      *string
	updated_by      *string
	code            *string
	description     *string
	discount_type   *types.DiscountType
	discount_value  *decimal.Decimal
	valid_from      *time.Time
	valid_until     *time.Time
	is_active       *bool
	max_uses        *int
	addmax_uses     *int
	min_order_value *decimal.Decimal
	is_combinable   *bool
	metadata        *map[string]string
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*Discount, error)
	predicates      []predicate.Discount
}

var _ ent.Mutation = (*DiscountMutation)(nil)

// discountOption allows management of the mutation configuration using functional options.
type discountOption func(*DiscountMutation)

// newDiscountMutation creates new mutation for the Discount entity.
func newDiscountMutation(c config, op Op, opts ...discountOption) *DiscountMutation {
	m := &DiscountMutation{
		config:        c,
		op:            op,
		typ:           TypeDiscount,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDiscountID sets the ID field of the mutation.
func withDiscountID(id string) discountOption {
	return func(m *DiscountMutation) {
		var (
			err   error
			once  sync.Once
			value *Discount
		)
		m.oldValue = func(ctx context.Context) (*Discount, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Discount.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDiscount sets the old Discount of the mutation.
func withDiscount(node *Discount) discountOption {
	return func(m *DiscountMutation) {
		m.oldValue = func(context.Context) (*Discount, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DiscountMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DiscountMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Discount entities.
func (m *DiscountMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DiscountMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DiscountMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Discount.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStatus sets the "status" field.
func (m *DiscountMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *DiscountMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Discount entity.
// If the Discount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscountMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *DiscountMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *DiscountMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DiscountMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Discount entity.
// If the Discount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscountMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DiscountMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DiscountMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DiscountMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Discount entity.
// If the Discount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscountMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DiscountMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *DiscountMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *DiscountMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Discount entity.
// If the Discount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscountMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *DiscountMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[discount.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *DiscountMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[discount.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *DiscountMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, discount.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *DiscountMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *DiscountMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Discount entity.
// If the Discount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscountMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *DiscountMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[discount.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *DiscountMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[discount.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *DiscountMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, discount.FieldUpdatedBy)
}

// SetCode sets the "code" field.
func (m *DiscountMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *DiscountMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Discount entity.
// If the Discount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscountMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *DiscountMutation) ResetCode() {
	m.code = nil
}

// SetDescription sets the "description" field.
func (m *DiscountMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *DiscountMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Discount entity.
// If the Discount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscountMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *DiscountMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[discount.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *DiscountMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[discount.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *DiscountMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, discount.FieldDescription)
}

// SetDiscountType sets the "discount_type" field.
func (m *DiscountMutation) SetDiscountType(tt types.DiscountType) {
	m.discount_type = &tt
}

// DiscountType returns the value of the "discount_type" field in the mutation.
func (m *DiscountMutation) DiscountType() (r types.DiscountType, exists bool) {
	v := m.discount_type
	if v == nil {
		return
	}
	return *v, true
}

// OldDiscountType returns the old "discount_type" field's value of the Discount entity.
// If the Discount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscountMutation) OldDiscountType(ctx context.Context) (v types.DiscountType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDiscountType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDiscountType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiscountType: %w", err)
	}
	return oldValue.DiscountType, nil
}

// ResetDiscountType resets all changes to the "discount_type" field.
func (m *DiscountMutation) ResetDiscountType() {
	m.discount_type = nil
}

// SetDiscountValue sets the "discount_value" field.
func (m *DiscountMutation) SetDiscountValue(d decimal.Decimal) {
	m.discount_value = &d
}

// DiscountValue returns the value of the "discount_value" field in the mutation.
func (m *DiscountMutation) DiscountValue() (r decimal.Decimal, exists bool) {
	v := m.discount_value
	if v == nil {
		return
	}
	return *v, true
}

// OldDiscountValue returns the old "discount_value" field's value of the Discount entity.
// If the Discount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscountMutation) OldDiscountValue(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDiscountValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDiscountValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiscountValue: %w", err)
	}
	return oldValue.DiscountValue, nil
}

// ResetDiscountValue resets all changes to the "discount_value" field.
func (m *DiscountMutation) ResetDiscountValue() {
	m.discount_value = nil
}

// SetValidFrom sets the "valid_from" field.
func (m *DiscountMutation) SetValidFrom(t time.Time) {
	m.valid_from = &t
}

// ValidFrom returns the value of the "valid_from" field in the mutation.
func (m *DiscountMutation) ValidFrom() (r time.Time, exists bool) {
	v := m.valid_from
	if v == nil {
		return
	}
	return *v, true
}

// OldValidFrom returns the old "valid_from" field's value of the Discount entity.
// If the Discount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscountMutation) OldValidFrom(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValidFrom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValidFrom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValidFrom: %w", err)
	}
	return oldValue.ValidFrom, nil
}

// ResetValidFrom resets all changes to the "valid_from" field.
func (m *DiscountMutation) ResetValidFrom() {
	m.valid_from = nil
}

// SetValidUntil sets the "valid_until" field.
func (m *DiscountMutation) SetValidUntil(t time.Time) {
	m.valid_until = &t
}

// ValidUntil returns the value of the "valid_until" field in the mutation.
func (m *DiscountMutation) ValidUntil() (r time.Time, exists bool) {
	v := m.valid_until
	if v == nil {
		return
	}
	return *v, true
}

// OldValidUntil returns the old "valid_until" field's value of the Discount entity.
// If the Discount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscountMutation) OldValidUntil(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValidUntil is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValidUntil requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValidUntil: %w", err)
	}
	return oldValue.ValidUntil, nil
}

// ClearValidUntil clears the value of the "valid_until" field.
func (m *DiscountMutation) ClearValidUntil() {
	m.valid_until = nil
	m.clearedFields[discount.FieldValidUntil] = struct{}{}
}

// ValidUntilCleared returns if the "valid_until" field was cleared in this mutation.
func (m *DiscountMutation) ValidUntilCleared() bool {
	_, ok := m.clearedFields[discount.FieldValidUntil]
	return ok
}

// ResetValidUntil resets all changes to the "valid_until" field.
func (m *DiscountMutation) ResetValidUntil() {
	m.valid_until = nil
	delete(m.clearedFields, discount.FieldValidUntil)
}

// SetIsActive sets the "is_active" field.
func (m *DiscountMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *DiscountMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the Discount entity.
// If the Discount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscountMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *DiscountMutation) ResetIsActive() {
	m.is_active = nil
}

// SetMaxUses sets the "max_uses" field.
func (m *DiscountMutation) SetMaxUses(i int) {
	m.max_uses = &i
	m.addmax_uses = nil
}

// MaxUses returns the value of the "max_uses" field in the mutation.
func (m *DiscountMutation) MaxUses() (r int, exists bool) {
	v := m.max_uses
	if v == nil {
		return
	}
	return *v, true
}

// OldMaxUses returns the old "max_uses" field's value of the Discount entity.
// If the Discount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscountMutation) OldMaxUses(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaxUses is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaxUses requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaxUses: %w", err)
	}
	return oldValue.MaxUses, nil
}

// AddMaxUses adds i to the "max_uses" field.
func (m *DiscountMutation) AddMaxUses(i int) {
	if m.addmax_uses != nil {
		*m.addmax_uses += i
	} else {
		m.addmax_uses = &i
	}
}

// AddedMaxUses returns the value that was added to the "max_uses" field in this mutation.
func (m *DiscountMutation) AddedMaxUses() (r int, exists bool) {
	v := m.addmax_uses
	if v == nil {
		return
	}
	return *v, true
}

// ClearMaxUses clears the value of the "max_uses" field.
func (m *DiscountMutation) ClearMaxUses() {
	m.max_uses = nil
	m.addmax_uses = nil
	m.clearedFields[discount.FieldMaxUses] = struct{}{}
}

// MaxUsesCleared returns if the "max_uses" field was cleared in this mutation.
func (m *DiscountMutation) MaxUsesCleared() bool {
	_, ok := m.clearedFields[discount.FieldMaxUses]
	return ok
}

// ResetMaxUses resets all changes to the "max_uses" field.
func (m *DiscountMutation) ResetMaxUses() {
	m.max_uses = nil
	m.addmax_uses = nil
	delete(m.clearedFields, discount.FieldMaxUses)
}

// SetMinOrderValue sets the "min_order_value" field.
func (m *DiscountMutation) SetMinOrderValue(d decimal.Decimal) {
	m.min_order_value = &d
}

// MinOrderValue returns the value of the "min_order_value" field in the mutation.
func (m *DiscountMutation) MinOrderValue() (r decimal.Decimal, exists bool) {
	v := m.min_order_value
	if v == nil {
		return
	}
	return *v, true
}

// OldMinOrderValue returns the old "min_order_value" field's value of the Discount entity.
// If the Discount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscountMutation) OldMinOrderValue(ctx context.Context) (v *decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMinOrderValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMinOrderValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMinOrderValue: %w", err)
	}
	return oldValue.MinOrderValue, nil
}

// ClearMinOrderValue clears the value of the "min_order_value" field.
func (m *DiscountMutation) ClearMinOrderValue() {
	m.min_order_value = nil
	m.clearedFields[discount.FieldMinOrderValue] = struct{}{}
}

// MinOrderValueCleared returns if the "min_order_value" field was cleared in this mutation.
func (m *DiscountMutation) MinOrderValueCleared() bool {
	_, ok := m.clearedFields[discount.FieldMinOrderValue]
	return ok
}

// ResetMinOrderValue resets all changes to the "min_order_value" field.
func (m *DiscountMutation) ResetMinOrderValue() {
	m.min_order_value = nil
	delete(m.clearedFields, discount.FieldMinOrderValue)
}

// SetIsCombinable sets the "is_combinable" field.
func (m *DiscountMutation) SetIsCombinable(b bool) {
	m.is_combinable = &b
}

// IsCombinable returns the value of the "is_combinable" field in the mutation.
func (m *DiscountMutation) IsCombinable() (r bool, exists bool) {
	v := m.is_combinable
	if v == nil {
		return
	}
	return *v, true
}

// OldIsCombinable returns the old "is_combinable" field's value of the Discount entity.
// If the Discount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscountMutation) OldIsCombinable(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsCombinable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsCombinable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsCombinable: %w", err)
	}
	return oldValue.IsCombinable, nil
}

// ResetIsCombinable resets all changes to the "is_combinable" field.
func (m *DiscountMutation) ResetIsCombinable() {
	m.is_combinable = nil
}

// SetMetadata sets the "metadata" field.
func (m *DiscountMutation) SetMetadata(value map[string]string) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *DiscountMutation) Metadata() (r map[string]string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the Discount entity.
// If the Discount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscountMutation) OldMetadata(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *DiscountMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[discount.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *DiscountMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[discount.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *DiscountMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, discount.FieldMetadata)
}

// Where appends a list predicates to the DiscountMutation builder.
func (m *DiscountMutation) Where(ps ...predicate.Discount) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DiscountMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DiscountMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Discount, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DiscountMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DiscountMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Discount).
func (m *DiscountMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DiscountMutation) Fields() []string {
	fields := make([]string, 0, 16)
	if m.status != nil {
		fields = append(fields, discount.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, discount.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, discount.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, discount.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, discount.FieldUpdatedBy)
	}
	if m.code != nil {
		fields = append(fields, discount.FieldCode)
	}
	if m.description != nil {
		fields = append(fields, discount.FieldDescription)
	}
	if m.discount_type != nil {
		fields = append(fields, discount.FieldDiscountType)
	}
	if m.discount_value != nil {
		fields = append(fields, discount.FieldDiscountValue)
	}
	if m.valid_from != nil {
		fields = append(fields, discount.FieldValidFrom)
	}
	if m.valid_until != nil {
		fields = append(fields, discount.FieldValidUntil)
	}
	if m.is_active != nil {
		fields = append(fields, discount.FieldIsActive)
	}
	if m.max_uses != nil {
		fields = append(fields, discount.FieldMaxUses)
	}
	if m.min_order_value != nil {
		fields = append(fields, discount.FieldMinOrderValue)
	}
	if m.is_combinable != nil {
		fields = append(fields, discount.FieldIsCombinable)
	}
	if m.metadata != nil {
		fields = append(fields, discount.FieldMetadata)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DiscountMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case discount.FieldStatus:
		return m.Status()
	case discount.FieldCreatedAt:
		return m.CreatedAt()
	case discount.FieldUpdatedAt:
		return m.UpdatedAt()
	case discount.FieldCreatedBy:
		return m.CreatedBy()
	case discount.FieldUpdatedBy:
		return m.UpdatedBy()
	case discount.FieldCode:
		return m.Code()
	case discount.FieldDescription:
		return m.Description()
	case discount.FieldDiscountType:
		return m.DiscountType()
	case discount.FieldDiscountValue:
		return m.DiscountValue()
	case discount.FieldValidFrom:
		return m.ValidFrom()
	case discount.FieldValidUntil:
		return m.ValidUntil()
	case discount.FieldIsActive:
		return m.IsActive()
	case discount.FieldMaxUses:
		return m.MaxUses()
	case discount.FieldMinOrderValue:
		return m.MinOrderValue()
	case discount.FieldIsCombinable:
		return m.IsCombinable()
	case discount.FieldMetadata:
		return m.Metadata()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DiscountMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case discount.FieldStatus:
		return m.OldStatus(ctx)
	case discount.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case discount.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case discount.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case discount.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case discount.FieldCode:
		return m.OldCode(ctx)
	case discount.FieldDescription:
		return m.OldDescription(ctx)
	case discount.FieldDiscountType:
		return m.OldDiscountType(ctx)
	case discount.FieldDiscountValue:
		return m.OldDiscountValue(ctx)
	case discount.FieldValidFrom:
		return m.OldValidFrom(ctx)
	case discount.FieldValidUntil:
		return m.OldValidUntil(ctx)
	case discount.FieldIsActive:
		return m.OldIsActive(ctx)
	case discount.FieldMaxUses:
		return m.OldMaxUses(ctx)
	case discount.FieldMinOrderValue:
		return m.OldMinOrderValue(ctx)
	case discount.FieldIsCombinable:
		return m.OldIsCombinable(ctx)
	case discount.FieldMetadata:
		return m.OldMetadata(ctx)
	}
	return nil, fmt.Errorf("unknown Discount field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DiscountMutation) SetField(name string, value ent.Value) error {
	switch name {
	case discount.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case discount.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case discount.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case discount.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case discount.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case discount.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case discount.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case discount.FieldDiscountType:
		v, ok := value.(types.DiscountType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiscountType(v)
		return nil
	case discount.FieldDiscountValue:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiscountValue(v)
		return nil
	case discount.FieldValidFrom:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValidFrom(v)
		return nil
	case discount.FieldValidUntil:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValidUntil(v)
		return nil
	case discount.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case discount.FieldMaxUses:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaxUses(v)
		return nil
	case discount.FieldMinOrderValue:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMinOrderValue(v)
		return nil
	case discount.FieldIsCombinable:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsCombinable(v)
		return nil
	case discount.FieldMetadata:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	}
	return fmt.Errorf("unknown Discount field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DiscountMutation) AddedFields() []string {
	var fields []string
	if m.addmax_uses != nil {
		fields = append(fields, discount.FieldMaxUses)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DiscountMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case discount.FieldMaxUses:
		return m.AddedMaxUses()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DiscountMutation) AddField(name string, value ent.Value) error {
	switch name {
	case discount.FieldMaxUses:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMaxUses(v)
		return nil
	}
	return fmt.Errorf("unknown Discount numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DiscountMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(discount.FieldCreatedBy) {
		fields = append(fields, discount.FieldCreatedBy)
	}
	if m.FieldCleared(discount.FieldUpdatedBy) {
		fields = append(fields, discount.FieldUpdatedBy)
	}
	if m.FieldCleared(discount.FieldDescription) {
		fields = append(fields, discount.FieldDescription)
	}
	if m.FieldCleared(discount.FieldValidUntil) {
		fields = append(fields, discount.FieldValidUntil)
	}
	if m.FieldCleared(discount.FieldMaxUses) {
		fields = append(fields, discount.FieldMaxUses)
	}
	if m.FieldCleared(discount.FieldMinOrderValue) {
		fields = append(fields, discount.FieldMinOrderValue)
	}
	if m.FieldCleared(discount.FieldMetadata) {
		fields = append(fields, discount.FieldMetadata)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DiscountMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DiscountMutation) ClearField(name string) error {
	switch name {
	case discount.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case discount.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case discount.FieldDescription:
		m.ClearDescription()
		return nil
	case discount.FieldValidUntil:
		m.ClearValidUntil()
		return nil
	case discount.FieldMaxUses:
		m.ClearMaxUses()
		return nil
	case discount.FieldMinOrderValue:
		m.ClearMinOrderValue()
		return nil
	case discount.FieldMetadata:
		m.ClearMetadata()
		return nil
	}
	return fmt.Errorf("unknown Discount nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DiscountMutation) ResetField(name string) error {
	switch name {
	case discount.FieldStatus:
		m.ResetStatus()
		return nil
	case discount.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case discount.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case discount.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case discount.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case discount.FieldCode:
		m.ResetCode()
		return nil
	case discount.FieldDescription:
		m.ResetDescription()
		return nil
	case discount.FieldDiscountType:
		m.ResetDiscountType()
		return nil
	case discount.FieldDiscountValue:
		m.ResetDiscountValue()
		return nil
	case discount.FieldValidFrom:
		m.ResetValidFrom()
		return nil
	case discount.FieldValidUntil:
		m.ResetValidUntil()
		return nil
	case discount.FieldIsActive:
		m.ResetIsActive()
		return nil
	case discount.FieldMaxUses:
		m.ResetMaxUses()
		return nil
	case discount.FieldMinOrderValue:
		m.ResetMinOrderValue()
		return nil
	case discount.FieldIsCombinable:
		m.ResetIsCombinable()
		return nil
	case discount.FieldMetadata:
		m.ResetMetadata()
		return nil
	}
	return fmt.Errorf("unknown Discount field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DiscountMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DiscountMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DiscountMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DiscountMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DiscountMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DiscountMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DiscountMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Discount unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DiscountMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Discount edge %s", name)
}

// FileUploadMutation represents an operation that mutates the FileUpload nodes in the graph.
type FileUploadMutation struct {
	config
	op            Op
	typ           string
	id            *string
	status        *string
	created_at    *time.Time
	updated_at    *time.Time
	created_by    *string
	updated_by    *string
	file_name     *string
	file_type     *string
	extension     *string
	mime_type     *string
	public_url    *string
	secure_url    *string
	provider      *string
	external_id   *string
	size_bytes    *int64
	addsize_bytes *int64
	file_size     *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*FileUpload, error)
	predicates    []predicate.FileUpload
}

var _ ent.Mutation = (*FileUploadMutation)(nil)

// fileuploadOption allows management of the mutation configuration using functional options.
type fileuploadOption func(*FileUploadMutation)

// newFileUploadMutation creates new mutation for the FileUpload entity.
func newFileUploadMutation(c config, op Op, opts ...fileuploadOption) *FileUploadMutation {
	m := &FileUploadMutation{
		config:        c,
		op:            op,
		typ:           TypeFileUpload,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFileUploadID sets the ID field of the mutation.
func withFileUploadID(id string) fileuploadOption {
	return func(m *FileUploadMutation) {
		var (
			err   error
			once  sync.Once
			value *FileUpload
		)
		m.oldValue = func(ctx context.Context) (*FileUpload, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FileUpload.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFileUpload sets the old FileUpload of the mutation.
func withFileUpload(node *FileUpload) fileuploadOption {
	return func(m *FileUploadMutation) {
		m.oldValue = func(context.Context) (*FileUpload, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FileUploadMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FileUploadMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of FileUpload entities.
func (m *FileUploadMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FileUploadMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FileUploadMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FileUpload.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStatus sets the "status" field.
func (m *FileUploadMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *FileUploadMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the FileUpload entity.
// If the FileUpload object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileUploadMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *FileUploadMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *FileUploadMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FileUploadMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the FileUpload entity.
// If the FileUpload object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileUploadMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FileUploadMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *FileUploadMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *FileUploadMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the FileUpload entity.
// If the FileUpload object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileUploadMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *FileUploadMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *FileUploadMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *FileUploadMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the FileUpload entity.
// If the FileUpload object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileUploadMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *FileUploadMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[fileupload.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *FileUploadMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[fileupload.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *FileUploadMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, fileupload.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *FileUploadMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *FileUploadMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the FileUpload entity.
// If the FileUpload object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileUploadMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *FileUploadMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[fileupload.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *FileUploadMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[fileupload.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *FileUploadMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, fileupload.FieldUpdatedBy)
}

// SetFileName sets the "file_name" field.
func (m *FileUploadMutation) SetFileName(s string) {
	m.file_name = &s
}

// FileName returns the value of the "file_name" field in the mutation.
func (m *FileUploadMutation) FileName() (r string, exists bool) {
	v := m.file_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFileName returns the old "file_name" field's value of the FileUpload entity.
// If the FileUpload object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileUploadMutation) OldFileName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileName: %w", err)
	}
	return oldValue.FileName, nil
}

// ResetFileName resets all changes to the "file_name" field.
func (m *FileUploadMutation) ResetFileName() {
	m.file_name = nil
}

// SetFileType sets the "file_type" field.
func (m *FileUploadMutation) SetFileType(s string) {
	m.file_type = &s
}

// FileType returns the value of the "file_type" field in the mutation.
func (m *FileUploadMutation) FileType() (r string, exists bool) {
	v := m.file_type
	if v == nil {
		return
	}
	return *v, true
}

// OldFileType returns the old "file_type" field's value of the FileUpload entity.
// If the FileUpload object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileUploadMutation) OldFileType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileType: %w", err)
	}
	return oldValue.FileType, nil
}

// ResetFileType resets all changes to the "file_type" field.
func (m *FileUploadMutation) ResetFileType() {
	m.file_type = nil
}

// SetExtension sets the "extension" field.
func (m *FileUploadMutation) SetExtension(s string) {
	m.extension = &s
}

// Extension returns the value of the "extension" field in the mutation.
func (m *FileUploadMutation) Extension() (r string, exists bool) {
	v := m.extension
	if v == nil {
		return
	}
	return *v, true
}

// OldExtension returns the old "extension" field's value of the FileUpload entity.
// If the FileUpload object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileUploadMutation) OldExtension(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtension is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtension requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtension: %w", err)
	}
	return oldValue.Extension, nil
}

// ResetExtension resets all changes to the "extension" field.
func (m *FileUploadMutation) ResetExtension() {
	m.extension = nil
}

// SetMimeType sets the "mime_type" field.
func (m *FileUploadMutation) SetMimeType(s string) {
	m.mime_type = &s
}

// MimeType returns the value of the "mime_type" field in the mutation.
func (m *FileUploadMutation) MimeType() (r string, exists bool) {
	v := m.mime_type
	if v == nil {
		return
	}
	return *v, true
}

// OldMimeType returns the old "mime_type" field's value of the FileUpload entity.
// If the FileUpload object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileUploadMutation) OldMimeType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMimeType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMimeType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMimeType: %w", err)
	}
	return oldValue.MimeType, nil
}

// ResetMimeType resets all changes to the "mime_type" field.
func (m *FileUploadMutation) ResetMimeType() {
	m.mime_type = nil
}

// SetPublicURL sets the "public_url" field.
func (m *FileUploadMutation) SetPublicURL(s string) {
	m.public_url = &s
}

// PublicURL returns the value of the "public_url" field in the mutation.
func (m *FileUploadMutation) PublicURL() (r string, exists bool) {
	v := m.public_url
	if v == nil {
		return
	}
	return *v, true
}

// OldPublicURL returns the old "public_url" field's value of the FileUpload entity.
// If the FileUpload object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileUploadMutation) OldPublicURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublicURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublicURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublicURL: %w", err)
	}
	return oldValue.PublicURL, nil
}

// ResetPublicURL resets all changes to the "public_url" field.
func (m *FileUploadMutation) ResetPublicURL() {
	m.public_url = nil
}

// SetSecureURL sets the "secure_url" field.
func (m *FileUploadMutation) SetSecureURL(s string) {
	m.secure_url = &s
}

// SecureURL returns the value of the "secure_url" field in the mutation.
func (m *FileUploadMutation) SecureURL() (r string, exists bool) {
	v := m.secure_url
	if v == nil {
		return
	}
	return *v, true
}

// OldSecureURL returns the old "secure_url" field's value of the FileUpload entity.
// If the FileUpload object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileUploadMutation) OldSecureURL(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSecureURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSecureURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSecureURL: %w", err)
	}
	return oldValue.SecureURL, nil
}

// ClearSecureURL clears the value of the "secure_url" field.
func (m *FileUploadMutation) ClearSecureURL() {
	m.secure_url = nil
	m.clearedFields[fileupload.FieldSecureURL] = struct{}{}
}

// SecureURLCleared returns if the "secure_url" field was cleared in this mutation.
func (m *FileUploadMutation) SecureURLCleared() bool {
	_, ok := m.clearedFields[fileupload.FieldSecureURL]
	return ok
}

// ResetSecureURL resets all changes to the "secure_url" field.
func (m *FileUploadMutation) ResetSecureURL() {
	m.secure_url = nil
	delete(m.clearedFields, fileupload.FieldSecureURL)
}

// SetProvider sets the "provider" field.
func (m *FileUploadMutation) SetProvider(s string) {
	m.provider = &s
}

// Provider returns the value of the "provider" field in the mutation.
func (m *FileUploadMutation) Provider() (r string, exists bool) {
	v := m.provider
	if v == nil {
		return
	}
	return *v, true
}

// OldProvider returns the old "provider" field's value of the FileUpload entity.
// If the FileUpload object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileUploadMutation) OldProvider(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProvider is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProvider requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProvider: %w", err)
	}
	return oldValue.Provider, nil
}

// ResetProvider resets all changes to the "provider" field.
func (m *FileUploadMutation) ResetProvider() {
	m.provider = nil
}

// SetExternalID sets the "external_id" field.
func (m *FileUploadMutation) SetExternalID(s string) {
	m.external_id = &s
}

// ExternalID returns the value of the "external_id" field in the mutation.
func (m *FileUploadMutation) ExternalID() (r string, exists bool) {
	v := m.external_id
	if v == nil {
		return
	}
	return *v, true
}

// OldExternalID returns the old "external_id" field's value of the FileUpload entity.
// If the FileUpload object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileUploadMutation) OldExternalID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExternalID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExternalID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExternalID: %w", err)
	}
	return oldValue.ExternalID, nil
}

// ResetExternalID resets all changes to the "external_id" field.
func (m *FileUploadMutation) ResetExternalID() {
	m.external_id = nil
}

// SetSizeBytes sets the "size_bytes" field.
func (m *FileUploadMutation) SetSizeBytes(i int64) {
	m.size_bytes = &i
	m.addsize_bytes = nil
}

// SizeBytes returns the value of the "size_bytes" field in the mutation.
func (m *FileUploadMutation) SizeBytes() (r int64, exists bool) {
	v := m.size_bytes
	if v == nil {
		return
	}
	return *v, true
}

// OldSizeBytes returns the old "size_bytes" field's value of the FileUpload entity.
// If the FileUpload object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileUploadMutation) OldSizeBytes(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSizeBytes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSizeBytes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSizeBytes: %w", err)
	}
	return oldValue.SizeBytes, nil
}

// AddSizeBytes adds i to the "size_bytes" field.
func (m *FileUploadMutation) AddSizeBytes(i int64) {
	if m.addsize_bytes != nil {
		*m.addsize_bytes += i
	} else {
		m.addsize_bytes = &i
	}
}

// AddedSizeBytes returns the value that was added to the "size_bytes" field in this mutation.
func (m *FileUploadMutation) AddedSizeBytes() (r int64, exists bool) {
	v := m.addsize_bytes
	if v == nil {
		return
	}
	return *v, true
}

// ResetSizeBytes resets all changes to the "size_bytes" field.
func (m *FileUploadMutation) ResetSizeBytes() {
	m.size_bytes = nil
	m.addsize_bytes = nil
}

// SetFileSize sets the "file_size" field.
func (m *FileUploadMutation) SetFileSize(s string) {
	m.file_size = &s
}

// FileSize returns the value of the "file_size" field in the mutation.
func (m *FileUploadMutation) FileSize() (r string, exists bool) {
	v := m.file_size
	if v == nil {
		return
	}
	return *v, true
}

// OldFileSize returns the old "file_size" field's value of the FileUpload entity.
// If the FileUpload object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileUploadMutation) OldFileSize(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileSize: %w", err)
	}
	return oldValue.FileSize, nil
}

// ClearFileSize clears the value of the "file_size" field.
func (m *FileUploadMutation) ClearFileSize() {
	m.file_size = nil
	m.clearedFields[fileupload.FieldFileSize] = struct{}{}
}

// FileSizeCleared returns if the "file_size" field was cleared in this mutation.
func (m *FileUploadMutation) FileSizeCleared() bool {
	_, ok := m.clearedFields[fileupload.FieldFileSize]
	return ok
}

// ResetFileSize resets all changes to the "file_size" field.
func (m *FileUploadMutation) ResetFileSize() {
	m.file_size = nil
	delete(m.clearedFields, fileupload.FieldFileSize)
}

// Where appends a list predicates to the FileUploadMutation builder.
func (m *FileUploadMutation) Where(ps ...predicate.FileUpload) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FileUploadMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FileUploadMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FileUpload, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FileUploadMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FileUploadMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FileUpload).
func (m *FileUploadMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FileUploadMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.status != nil {
		fields = append(fields, fileupload.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, fileupload.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, fileupload.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, fileupload.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, fileupload.FieldUpdatedBy)
	}
	if m.file_name != nil {
		fields = append(fields, fileupload.FieldFileName)
	}
	if m.file_type != nil {
		fields = append(fields, fileupload.FieldFileType)
	}
	if m.extension != nil {
		fields = append(fields, fileupload.FieldExtension)
	}
	if m.mime_type != nil {
		fields = append(fields, fileupload.FieldMimeType)
	}
	if m.public_url != nil {
		fields = append(fields, fileupload.FieldPublicURL)
	}
	if m.secure_url != nil {
		fields = append(fields, fileupload.FieldSecureURL)
	}
	if m.provider != nil {
		fields = append(fields, fileupload.FieldProvider)
	}
	if m.external_id != nil {
		fields = append(fields, fileupload.FieldExternalID)
	}
	if m.size_bytes != nil {
		fields = append(fields, fileupload.FieldSizeBytes)
	}
	if m.file_size != nil {
		fields = append(fields, fileupload.FieldFileSize)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FileUploadMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case fileupload.FieldStatus:
		return m.Status()
	case fileupload.FieldCreatedAt:
		return m.CreatedAt()
	case fileupload.FieldUpdatedAt:
		return m.UpdatedAt()
	case fileupload.FieldCreatedBy:
		return m.CreatedBy()
	case fileupload.FieldUpdatedBy:
		return m.UpdatedBy()
	case fileupload.FieldFileName:
		return m.FileName()
	case fileupload.FieldFileType:
		return m.FileType()
	case fileupload.FieldExtension:
		return m.Extension()
	case fileupload.FieldMimeType:
		return m.MimeType()
	case fileupload.FieldPublicURL:
		return m.PublicURL()
	case fileupload.FieldSecureURL:
		return m.SecureURL()
	case fileupload.FieldProvider:
		return m.Provider()
	case fileupload.FieldExternalID:
		return m.ExternalID()
	case fileupload.FieldSizeBytes:
		return m.SizeBytes()
	case fileupload.FieldFileSize:
		return m.FileSize()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FileUploadMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case fileupload.FieldStatus:
		return m.OldStatus(ctx)
	case fileupload.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case fileupload.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case fileupload.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case fileupload.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case fileupload.FieldFileName:
		return m.OldFileName(ctx)
	case fileupload.FieldFileType:
		return m.OldFileType(ctx)
	case fileupload.FieldExtension:
		return m.OldExtension(ctx)
	case fileupload.FieldMimeType:
		return m.OldMimeType(ctx)
	case fileupload.FieldPublicURL:
		return m.OldPublicURL(ctx)
	case fileupload.FieldSecureURL:
		return m.OldSecureURL(ctx)
	case fileupload.FieldProvider:
		return m.OldProvider(ctx)
	case fileupload.FieldExternalID:
		return m.OldExternalID(ctx)
	case fileupload.FieldSizeBytes:
		return m.OldSizeBytes(ctx)
	case fileupload.FieldFileSize:
		return m.OldFileSize(ctx)
	}
	return nil, fmt.Errorf("unknown FileUpload field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileUploadMutation) SetField(name string, value ent.Value) error {
	switch name {
	case fileupload.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case fileupload.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case fileupload.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case fileupload.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case fileupload.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case fileupload.FieldFileName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileName(v)
		return nil
	case fileupload.FieldFileType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileType(v)
		return nil
	case fileupload.FieldExtension:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtension(v)
		return nil
	case fileupload.FieldMimeType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMimeType(v)
		return nil
	case fileupload.FieldPublicURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublicURL(v)
		return nil
	case fileupload.FieldSecureURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSecureURL(v)
		return nil
	case fileupload.FieldProvider:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProvider(v)
		return nil
	case fileupload.FieldExternalID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExternalID(v)
		return nil
	case fileupload.FieldSizeBytes:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSizeBytes(v)
		return nil
	case fileupload.FieldFileSize:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileSize(v)
		return nil
	}
	return fmt.Errorf("unknown FileUpload field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FileUploadMutation) AddedFields() []string {
	var fields []string
	if m.addsize_bytes != nil {
		fields = append(fields, fileupload.FieldSizeBytes)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FileUploadMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case fileupload.FieldSizeBytes:
		return m.AddedSizeBytes()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileUploadMutation) AddField(name string, value ent.Value) error {
	switch name {
	case fileupload.FieldSizeBytes:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSizeBytes(v)
		return nil
	}
	return fmt.Errorf("unknown FileUpload numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FileUploadMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(fileupload.FieldCreatedBy) {
		fields = append(fields, fileupload.FieldCreatedBy)
	}
	if m.FieldCleared(fileupload.FieldUpdatedBy) {
		fields = append(fields, fileupload.FieldUpdatedBy)
	}
	if m.FieldCleared(fileupload.FieldSecureURL) {
		fields = append(fields, fileupload.FieldSecureURL)
	}
	if m.FieldCleared(fileupload.FieldFileSize) {
		fields = append(fields, fileupload.FieldFileSize)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FileUploadMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FileUploadMutation) ClearField(name string) error {
	switch name {
	case fileupload.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case fileupload.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case fileupload.FieldSecureURL:
		m.ClearSecureURL()
		return nil
	case fileupload.FieldFileSize:
		m.ClearFileSize()
		return nil
	}
	return fmt.Errorf("unknown FileUpload nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FileUploadMutation) ResetField(name string) error {
	switch name {
	case fileupload.FieldStatus:
		m.ResetStatus()
		return nil
	case fileupload.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case fileupload.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case fileupload.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case fileupload.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case fileupload.FieldFileName:
		m.ResetFileName()
		return nil
	case fileupload.FieldFileType:
		m.ResetFileType()
		return nil
	case fileupload.FieldExtension:
		m.ResetExtension()
		return nil
	case fileupload.FieldMimeType:
		m.ResetMimeType()
		return nil
	case fileupload.FieldPublicURL:
		m.ResetPublicURL()
		return nil
	case fileupload.FieldSecureURL:
		m.ResetSecureURL()
		return nil
	case fileupload.FieldProvider:
		m.ResetProvider()
		return nil
	case fileupload.FieldExternalID:
		m.ResetExternalID()
		return nil
	case fileupload.FieldSizeBytes:
		m.ResetSizeBytes()
		return nil
	case fileupload.FieldFileSize:
		m.ResetFileSize()
		return nil
	}
	return fmt.Errorf("unknown FileUpload field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FileUploadMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FileUploadMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FileUploadMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FileUploadMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FileUploadMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FileUploadMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FileUploadMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown FileUpload unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FileUploadMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown FileUpload edge %s", name)
}

// InternshipMutation represents an operation that mutates the Internship nodes in the graph.
type InternshipMutation struct {
	config
	op                      Op
	typ                     string
	id                      *string
	status                  *string
	created_at              *time.Time
	updated_at              *time.Time
	created_by              *string
	updated_by              *string
	title                   *string
	lookup_key              *string
	description             *string
	skills                  *[]string
	appendskills            []string
	level                   *string
	mode                    *string
	duration_in_weeks       *int
	addduration_in_weeks    *int
	learning_outcomes       *[]string
	appendlearning_outcomes []string
	prerequisites           *[]string
	appendprerequisites     []string
	benefits                *[]string
	appendbenefits          []string
	currency                *string
	price                   *decimal.Decimal
	flat_discount           *decimal.Decimal
	percentage_discount     *decimal.Decimal
	clearedFields           map[string]struct{}
	categories              map[string]struct{}
	removedcategories       map[string]struct{}
	clearedcategories       bool
	done                    bool
	oldValue                func(context.Context) (*Internship, error)
	predicates              []predicate.Internship
}

var _ ent.Mutation = (*InternshipMutation)(nil)

// internshipOption allows management of the mutation configuration using functional options.
type internshipOption func(*InternshipMutation)

// newInternshipMutation creates new mutation for the Internship entity.
func newInternshipMutation(c config, op Op, opts ...internshipOption) *InternshipMutation {
	m := &InternshipMutation{
		config:        c,
		op:            op,
		typ:           TypeInternship,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInternshipID sets the ID field of the mutation.
func withInternshipID(id string) internshipOption {
	return func(m *InternshipMutation) {
		var (
			err   error
			once  sync.Once
			value *Internship
		)
		m.oldValue = func(ctx context.Context) (*Internship, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Internship.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInternship sets the old Internship of the mutation.
func withInternship(node *Internship) internshipOption {
	return func(m *InternshipMutation) {
		m.oldValue = func(context.Context) (*Internship, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InternshipMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InternshipMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Internship entities.
func (m *InternshipMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *InternshipMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *InternshipMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Internship.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStatus sets the "status" field.
func (m *InternshipMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *InternshipMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Internship entity.
// If the Internship object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *InternshipMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *InternshipMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *InternshipMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Internship entity.
// If the Internship object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *InternshipMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *InternshipMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *InternshipMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Internship entity.
// If the Internship object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *InternshipMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *InternshipMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *InternshipMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Internship entity.
// If the Internship object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *InternshipMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[internship.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *InternshipMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[internship.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *InternshipMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, internship.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *InternshipMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *InternshipMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Internship entity.
// If the Internship object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *InternshipMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[internship.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *InternshipMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[internship.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *InternshipMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, internship.FieldUpdatedBy)
}

// SetTitle sets the "title" field.
func (m *InternshipMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *InternshipMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Internship entity.
// If the Internship object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *InternshipMutation) ResetTitle() {
	m.title = nil
}

// SetLookupKey sets the "lookup_key" field.
func (m *InternshipMutation) SetLookupKey(s string) {
	m.lookup_key = &s
}

// LookupKey returns the value of the "lookup_key" field in the mutation.
func (m *InternshipMutation) LookupKey() (r string, exists bool) {
	v := m.lookup_key
	if v == nil {
		return
	}
	return *v, true
}

// OldLookupKey returns the old "lookup_key" field's value of the Internship entity.
// If the Internship object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipMutation) OldLookupKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLookupKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLookupKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLookupKey: %w", err)
	}
	return oldValue.LookupKey, nil
}

// ResetLookupKey resets all changes to the "lookup_key" field.
func (m *InternshipMutation) ResetLookupKey() {
	m.lookup_key = nil
}

// SetDescription sets the "description" field.
func (m *InternshipMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *InternshipMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Internship entity.
// If the Internship object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *InternshipMutation) ResetDescription() {
	m.description = nil
}

// SetSkills sets the "skills" field.
func (m *InternshipMutation) SetSkills(s []string) {
	m.skills = &s
	m.appendskills = nil
}

// Skills returns the value of the "skills" field in the mutation.
func (m *InternshipMutation) Skills() (r []string, exists bool) {
	v := m.skills
	if v == nil {
		return
	}
	return *v, true
}

// OldSkills returns the old "skills" field's value of the Internship entity.
// If the Internship object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipMutation) OldSkills(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSkills is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSkills requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSkills: %w", err)
	}
	return oldValue.Skills, nil
}

// AppendSkills adds s to the "skills" field.
func (m *InternshipMutation) AppendSkills(s []string) {
	m.appendskills = append(m.appendskills, s...)
}

// AppendedSkills returns the list of values that were appended to the "skills" field in this mutation.
func (m *InternshipMutation) AppendedSkills() ([]string, bool) {
	if len(m.appendskills) == 0 {
		return nil, false
	}
	return m.appendskills, true
}

// ClearSkills clears the value of the "skills" field.
func (m *InternshipMutation) ClearSkills() {
	m.skills = nil
	m.appendskills = nil
	m.clearedFields[internship.FieldSkills] = struct{}{}
}

// SkillsCleared returns if the "skills" field was cleared in this mutation.
func (m *InternshipMutation) SkillsCleared() bool {
	_, ok := m.clearedFields[internship.FieldSkills]
	return ok
}

// ResetSkills resets all changes to the "skills" field.
func (m *InternshipMutation) ResetSkills() {
	m.skills = nil
	m.appendskills = nil
	delete(m.clearedFields, internship.FieldSkills)
}

// SetLevel sets the "level" field.
func (m *InternshipMutation) SetLevel(s string) {
	m.level = &s
}

// Level returns the value of the "level" field in the mutation.
func (m *InternshipMutation) Level() (r string, exists bool) {
	v := m.level
	if v == nil {
		return
	}
	return *v, true
}

// OldLevel returns the old "level" field's value of the Internship entity.
// If the Internship object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipMutation) OldLevel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLevel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLevel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLevel: %w", err)
	}
	return oldValue.Level, nil
}

// ClearLevel clears the value of the "level" field.
func (m *InternshipMutation) ClearLevel() {
	m.level = nil
	m.clearedFields[internship.FieldLevel] = struct{}{}
}

// LevelCleared returns if the "level" field was cleared in this mutation.
func (m *InternshipMutation) LevelCleared() bool {
	_, ok := m.clearedFields[internship.FieldLevel]
	return ok
}

// ResetLevel resets all changes to the "level" field.
func (m *InternshipMutation) ResetLevel() {
	m.level = nil
	delete(m.clearedFields, internship.FieldLevel)
}

// SetMode sets the "mode" field.
func (m *InternshipMutation) SetMode(s string) {
	m.mode = &s
}

// Mode returns the value of the "mode" field in the mutation.
func (m *InternshipMutation) Mode() (r string, exists bool) {
	v := m.mode
	if v == nil {
		return
	}
	return *v, true
}

// OldMode returns the old "mode" field's value of the Internship entity.
// If the Internship object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipMutation) OldMode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMode: %w", err)
	}
	return oldValue.Mode, nil
}

// ResetMode resets all changes to the "mode" field.
func (m *InternshipMutation) ResetMode() {
	m.mode = nil
}

// SetDurationInWeeks sets the "duration_in_weeks" field.
func (m *InternshipMutation) SetDurationInWeeks(i int) {
	m.duration_in_weeks = &i
	m.addduration_in_weeks = nil
}

// DurationInWeeks returns the value of the "duration_in_weeks" field in the mutation.
func (m *InternshipMutation) DurationInWeeks() (r int, exists bool) {
	v := m.duration_in_weeks
	if v == nil {
		return
	}
	return *v, true
}

// OldDurationInWeeks returns the old "duration_in_weeks" field's value of the Internship entity.
// If the Internship object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipMutation) OldDurationInWeeks(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDurationInWeeks is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDurationInWeeks requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDurationInWeeks: %w", err)
	}
	return oldValue.DurationInWeeks, nil
}

// AddDurationInWeeks adds i to the "duration_in_weeks" field.
func (m *InternshipMutation) AddDurationInWeeks(i int) {
	if m.addduration_in_weeks != nil {
		*m.addduration_in_weeks += i
	} else {
		m.addduration_in_weeks = &i
	}
}

// AddedDurationInWeeks returns the value that was added to the "duration_in_weeks" field in this mutation.
func (m *InternshipMutation) AddedDurationInWeeks() (r int, exists bool) {
	v := m.addduration_in_weeks
	if v == nil {
		return
	}
	return *v, true
}

// ClearDurationInWeeks clears the value of the "duration_in_weeks" field.
func (m *InternshipMutation) ClearDurationInWeeks() {
	m.duration_in_weeks = nil
	m.addduration_in_weeks = nil
	m.clearedFields[internship.FieldDurationInWeeks] = struct{}{}
}

// DurationInWeeksCleared returns if the "duration_in_weeks" field was cleared in this mutation.
func (m *InternshipMutation) DurationInWeeksCleared() bool {
	_, ok := m.clearedFields[internship.FieldDurationInWeeks]
	return ok
}

// ResetDurationInWeeks resets all changes to the "duration_in_weeks" field.
func (m *InternshipMutation) ResetDurationInWeeks() {
	m.duration_in_weeks = nil
	m.addduration_in_weeks = nil
	delete(m.clearedFields, internship.FieldDurationInWeeks)
}

// SetLearningOutcomes sets the "learning_outcomes" field.
func (m *InternshipMutation) SetLearningOutcomes(s []string) {
	m.learning_outcomes = &s
	m.appendlearning_outcomes = nil
}

// LearningOutcomes returns the value of the "learning_outcomes" field in the mutation.
func (m *InternshipMutation) LearningOutcomes() (r []string, exists bool) {
	v := m.learning_outcomes
	if v == nil {
		return
	}
	return *v, true
}

// OldLearningOutcomes returns the old "learning_outcomes" field's value of the Internship entity.
// If the Internship object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipMutation) OldLearningOutcomes(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLearningOutcomes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLearningOutcomes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLearningOutcomes: %w", err)
	}
	return oldValue.LearningOutcomes, nil
}

// AppendLearningOutcomes adds s to the "learning_outcomes" field.
func (m *InternshipMutation) AppendLearningOutcomes(s []string) {
	m.appendlearning_outcomes = append(m.appendlearning_outcomes, s...)
}

// AppendedLearningOutcomes returns the list of values that were appended to the "learning_outcomes" field in this mutation.
func (m *InternshipMutation) AppendedLearningOutcomes() ([]string, bool) {
	if len(m.appendlearning_outcomes) == 0 {
		return nil, false
	}
	return m.appendlearning_outcomes, true
}

// ClearLearningOutcomes clears the value of the "learning_outcomes" field.
func (m *InternshipMutation) ClearLearningOutcomes() {
	m.learning_outcomes = nil
	m.appendlearning_outcomes = nil
	m.clearedFields[internship.FieldLearningOutcomes] = struct{}{}
}

// LearningOutcomesCleared returns if the "learning_outcomes" field was cleared in this mutation.
func (m *InternshipMutation) LearningOutcomesCleared() bool {
	_, ok := m.clearedFields[internship.FieldLearningOutcomes]
	return ok
}

// ResetLearningOutcomes resets all changes to the "learning_outcomes" field.
func (m *InternshipMutation) ResetLearningOutcomes() {
	m.learning_outcomes = nil
	m.appendlearning_outcomes = nil
	delete(m.clearedFields, internship.FieldLearningOutcomes)
}

// SetPrerequisites sets the "prerequisites" field.
func (m *InternshipMutation) SetPrerequisites(s []string) {
	m.prerequisites = &s
	m.appendprerequisites = nil
}

// Prerequisites returns the value of the "prerequisites" field in the mutation.
func (m *InternshipMutation) Prerequisites() (r []string, exists bool) {
	v := m.prerequisites
	if v == nil {
		return
	}
	return *v, true
}

// OldPrerequisites returns the old "prerequisites" field's value of the Internship entity.
// If the Internship object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipMutation) OldPrerequisites(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrerequisites is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrerequisites requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrerequisites: %w", err)
	}
	return oldValue.Prerequisites, nil
}

// AppendPrerequisites adds s to the "prerequisites" field.
func (m *InternshipMutation) AppendPrerequisites(s []string) {
	m.appendprerequisites = append(m.appendprerequisites, s...)
}

// AppendedPrerequisites returns the list of values that were appended to the "prerequisites" field in this mutation.
func (m *InternshipMutation) AppendedPrerequisites() ([]string, bool) {
	if len(m.appendprerequisites) == 0 {
		return nil, false
	}
	return m.appendprerequisites, true
}

// ClearPrerequisites clears the value of the "prerequisites" field.
func (m *InternshipMutation) ClearPrerequisites() {
	m.prerequisites = nil
	m.appendprerequisites = nil
	m.clearedFields[internship.FieldPrerequisites] = struct{}{}
}

// PrerequisitesCleared returns if the "prerequisites" field was cleared in this mutation.
func (m *InternshipMutation) PrerequisitesCleared() bool {
	_, ok := m.clearedFields[internship.FieldPrerequisites]
	return ok
}

// ResetPrerequisites resets all changes to the "prerequisites" field.
func (m *InternshipMutation) ResetPrerequisites() {
	m.prerequisites = nil
	m.appendprerequisites = nil
	delete(m.clearedFields, internship.FieldPrerequisites)
}

// SetBenefits sets the "benefits" field.
func (m *InternshipMutation) SetBenefits(s []string) {
	m.benefits = &s
	m.appendbenefits = nil
}

// Benefits returns the value of the "benefits" field in the mutation.
func (m *InternshipMutation) Benefits() (r []string, exists bool) {
	v := m.benefits
	if v == nil {
		return
	}
	return *v, true
}

// OldBenefits returns the old "benefits" field's value of the Internship entity.
// If the Internship object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipMutation) OldBenefits(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBenefits is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBenefits requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBenefits: %w", err)
	}
	return oldValue.Benefits, nil
}

// AppendBenefits adds s to the "benefits" field.
func (m *InternshipMutation) AppendBenefits(s []string) {
	m.appendbenefits = append(m.appendbenefits, s...)
}

// AppendedBenefits returns the list of values that were appended to the "benefits" field in this mutation.
func (m *InternshipMutation) AppendedBenefits() ([]string, bool) {
	if len(m.appendbenefits) == 0 {
		return nil, false
	}
	return m.appendbenefits, true
}

// ClearBenefits clears the value of the "benefits" field.
func (m *InternshipMutation) ClearBenefits() {
	m.benefits = nil
	m.appendbenefits = nil
	m.clearedFields[internship.FieldBenefits] = struct{}{}
}

// BenefitsCleared returns if the "benefits" field was cleared in this mutation.
func (m *InternshipMutation) BenefitsCleared() bool {
	_, ok := m.clearedFields[internship.FieldBenefits]
	return ok
}

// ResetBenefits resets all changes to the "benefits" field.
func (m *InternshipMutation) ResetBenefits() {
	m.benefits = nil
	m.appendbenefits = nil
	delete(m.clearedFields, internship.FieldBenefits)
}

// SetCurrency sets the "currency" field.
func (m *InternshipMutation) SetCurrency(s string) {
	m.currency = &s
}

// Currency returns the value of the "currency" field in the mutation.
func (m *InternshipMutation) Currency() (r string, exists bool) {
	v := m.currency
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrency returns the old "currency" field's value of the Internship entity.
// If the Internship object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipMutation) OldCurrency(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrency: %w", err)
	}
	return oldValue.Currency, nil
}

// ClearCurrency clears the value of the "currency" field.
func (m *InternshipMutation) ClearCurrency() {
	m.currency = nil
	m.clearedFields[internship.FieldCurrency] = struct{}{}
}

// CurrencyCleared returns if the "currency" field was cleared in this mutation.
func (m *InternshipMutation) CurrencyCleared() bool {
	_, ok := m.clearedFields[internship.FieldCurrency]
	return ok
}

// ResetCurrency resets all changes to the "currency" field.
func (m *InternshipMutation) ResetCurrency() {
	m.currency = nil
	delete(m.clearedFields, internship.FieldCurrency)
}

// SetPrice sets the "price" field.
func (m *InternshipMutation) SetPrice(d decimal.Decimal) {
	m.price = &d
}

// Price returns the value of the "price" field in the mutation.
func (m *InternshipMutation) Price() (r decimal.Decimal, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the Internship entity.
// If the Internship object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipMutation) OldPrice(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// ClearPrice clears the value of the "price" field.
func (m *InternshipMutation) ClearPrice() {
	m.price = nil
	m.clearedFields[internship.FieldPrice] = struct{}{}
}

// PriceCleared returns if the "price" field was cleared in this mutation.
func (m *InternshipMutation) PriceCleared() bool {
	_, ok := m.clearedFields[internship.FieldPrice]
	return ok
}

// ResetPrice resets all changes to the "price" field.
func (m *InternshipMutation) ResetPrice() {
	m.price = nil
	delete(m.clearedFields, internship.FieldPrice)
}

// SetFlatDiscount sets the "flat_discount" field.
func (m *InternshipMutation) SetFlatDiscount(d decimal.Decimal) {
	m.flat_discount = &d
}

// FlatDiscount returns the value of the "flat_discount" field in the mutation.
func (m *InternshipMutation) FlatDiscount() (r decimal.Decimal, exists bool) {
	v := m.flat_discount
	if v == nil {
		return
	}
	return *v, true
}

// OldFlatDiscount returns the old "flat_discount" field's value of the Internship entity.
// If the Internship object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipMutation) OldFlatDiscount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFlatDiscount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFlatDiscount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFlatDiscount: %w", err)
	}
	return oldValue.FlatDiscount, nil
}

// ClearFlatDiscount clears the value of the "flat_discount" field.
func (m *InternshipMutation) ClearFlatDiscount() {
	m.flat_discount = nil
	m.clearedFields[internship.FieldFlatDiscount] = struct{}{}
}

// FlatDiscountCleared returns if the "flat_discount" field was cleared in this mutation.
func (m *InternshipMutation) FlatDiscountCleared() bool {
	_, ok := m.clearedFields[internship.FieldFlatDiscount]
	return ok
}

// ResetFlatDiscount resets all changes to the "flat_discount" field.
func (m *InternshipMutation) ResetFlatDiscount() {
	m.flat_discount = nil
	delete(m.clearedFields, internship.FieldFlatDiscount)
}

// SetPercentageDiscount sets the "percentage_discount" field.
func (m *InternshipMutation) SetPercentageDiscount(d decimal.Decimal) {
	m.percentage_discount = &d
}

// PercentageDiscount returns the value of the "percentage_discount" field in the mutation.
func (m *InternshipMutation) PercentageDiscount() (r decimal.Decimal, exists bool) {
	v := m.percentage_discount
	if v == nil {
		return
	}
	return *v, true
}

// OldPercentageDiscount returns the old "percentage_discount" field's value of the Internship entity.
// If the Internship object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipMutation) OldPercentageDiscount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPercentageDiscount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPercentageDiscount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPercentageDiscount: %w", err)
	}
	return oldValue.PercentageDiscount, nil
}

// ClearPercentageDiscount clears the value of the "percentage_discount" field.
func (m *InternshipMutation) ClearPercentageDiscount() {
	m.percentage_discount = nil
	m.clearedFields[internship.FieldPercentageDiscount] = struct{}{}
}

// PercentageDiscountCleared returns if the "percentage_discount" field was cleared in this mutation.
func (m *InternshipMutation) PercentageDiscountCleared() bool {
	_, ok := m.clearedFields[internship.FieldPercentageDiscount]
	return ok
}

// ResetPercentageDiscount resets all changes to the "percentage_discount" field.
func (m *InternshipMutation) ResetPercentageDiscount() {
	m.percentage_discount = nil
	delete(m.clearedFields, internship.FieldPercentageDiscount)
}

// AddCategoryIDs adds the "categories" edge to the Category entity by ids.
func (m *InternshipMutation) AddCategoryIDs(ids ...string) {
	if m.categories == nil {
		m.categories = make(map[string]struct{})
	}
	for i := range ids {
		m.categories[ids[i]] = struct{}{}
	}
}

// ClearCategories clears the "categories" edge to the Category entity.
func (m *InternshipMutation) ClearCategories() {
	m.clearedcategories = true
}

// CategoriesCleared reports if the "categories" edge to the Category entity was cleared.
func (m *InternshipMutation) CategoriesCleared() bool {
	return m.clearedcategories
}

// RemoveCategoryIDs removes the "categories" edge to the Category entity by IDs.
func (m *InternshipMutation) RemoveCategoryIDs(ids ...string) {
	if m.removedcategories == nil {
		m.removedcategories = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.categories, ids[i])
		m.removedcategories[ids[i]] = struct{}{}
	}
}

// RemovedCategories returns the removed IDs of the "categories" edge to the Category entity.
func (m *InternshipMutation) RemovedCategoriesIDs() (ids []string) {
	for id := range m.removedcategories {
		ids = append(ids, id)
	}
	return
}

// CategoriesIDs returns the "categories" edge IDs in the mutation.
func (m *InternshipMutation) CategoriesIDs() (ids []string) {
	for id := range m.categories {
		ids = append(ids, id)
	}
	return
}

// ResetCategories resets all changes to the "categories" edge.
func (m *InternshipMutation) ResetCategories() {
	m.categories = nil
	m.clearedcategories = false
	m.removedcategories = nil
}

// Where appends a list predicates to the InternshipMutation builder.
func (m *InternshipMutation) Where(ps ...predicate.Internship) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the InternshipMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *InternshipMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Internship, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *InternshipMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *InternshipMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Internship).
func (m *InternshipMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *InternshipMutation) Fields() []string {
	fields := make([]string, 0, 19)
	if m.status != nil {
		fields = append(fields, internship.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, internship.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, internship.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, internship.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, internship.FieldUpdatedBy)
	}
	if m.title != nil {
		fields = append(fields, internship.FieldTitle)
	}
	if m.lookup_key != nil {
		fields = append(fields, internship.FieldLookupKey)
	}
	if m.description != nil {
		fields = append(fields, internship.FieldDescription)
	}
	if m.skills != nil {
		fields = append(fields, internship.FieldSkills)
	}
	if m.level != nil {
		fields = append(fields, internship.FieldLevel)
	}
	if m.mode != nil {
		fields = append(fields, internship.FieldMode)
	}
	if m.duration_in_weeks != nil {
		fields = append(fields, internship.FieldDurationInWeeks)
	}
	if m.learning_outcomes != nil {
		fields = append(fields, internship.FieldLearningOutcomes)
	}
	if m.prerequisites != nil {
		fields = append(fields, internship.FieldPrerequisites)
	}
	if m.benefits != nil {
		fields = append(fields, internship.FieldBenefits)
	}
	if m.currency != nil {
		fields = append(fields, internship.FieldCurrency)
	}
	if m.price != nil {
		fields = append(fields, internship.FieldPrice)
	}
	if m.flat_discount != nil {
		fields = append(fields, internship.FieldFlatDiscount)
	}
	if m.percentage_discount != nil {
		fields = append(fields, internship.FieldPercentageDiscount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *InternshipMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case internship.FieldStatus:
		return m.Status()
	case internship.FieldCreatedAt:
		return m.CreatedAt()
	case internship.FieldUpdatedAt:
		return m.UpdatedAt()
	case internship.FieldCreatedBy:
		return m.CreatedBy()
	case internship.FieldUpdatedBy:
		return m.UpdatedBy()
	case internship.FieldTitle:
		return m.Title()
	case internship.FieldLookupKey:
		return m.LookupKey()
	case internship.FieldDescription:
		return m.Description()
	case internship.FieldSkills:
		return m.Skills()
	case internship.FieldLevel:
		return m.Level()
	case internship.FieldMode:
		return m.Mode()
	case internship.FieldDurationInWeeks:
		return m.DurationInWeeks()
	case internship.FieldLearningOutcomes:
		return m.LearningOutcomes()
	case internship.FieldPrerequisites:
		return m.Prerequisites()
	case internship.FieldBenefits:
		return m.Benefits()
	case internship.FieldCurrency:
		return m.Currency()
	case internship.FieldPrice:
		return m.Price()
	case internship.FieldFlatDiscount:
		return m.FlatDiscount()
	case internship.FieldPercentageDiscount:
		return m.PercentageDiscount()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *InternshipMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case internship.FieldStatus:
		return m.OldStatus(ctx)
	case internship.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case internship.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case internship.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case internship.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case internship.FieldTitle:
		return m.OldTitle(ctx)
	case internship.FieldLookupKey:
		return m.OldLookupKey(ctx)
	case internship.FieldDescription:
		return m.OldDescription(ctx)
	case internship.FieldSkills:
		return m.OldSkills(ctx)
	case internship.FieldLevel:
		return m.OldLevel(ctx)
	case internship.FieldMode:
		return m.OldMode(ctx)
	case internship.FieldDurationInWeeks:
		return m.OldDurationInWeeks(ctx)
	case internship.FieldLearningOutcomes:
		return m.OldLearningOutcomes(ctx)
	case internship.FieldPrerequisites:
		return m.OldPrerequisites(ctx)
	case internship.FieldBenefits:
		return m.OldBenefits(ctx)
	case internship.FieldCurrency:
		return m.OldCurrency(ctx)
	case internship.FieldPrice:
		return m.OldPrice(ctx)
	case internship.FieldFlatDiscount:
		return m.OldFlatDiscount(ctx)
	case internship.FieldPercentageDiscount:
		return m.OldPercentageDiscount(ctx)
	}
	return nil, fmt.Errorf("unknown Internship field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InternshipMutation) SetField(name string, value ent.Value) error {
	switch name {
	case internship.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case internship.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case internship.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case internship.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case internship.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case internship.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case internship.FieldLookupKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLookupKey(v)
		return nil
	case internship.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case internship.FieldSkills:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSkills(v)
		return nil
	case internship.FieldLevel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLevel(v)
		return nil
	case internship.FieldMode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMode(v)
		return nil
	case internship.FieldDurationInWeeks:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDurationInWeeks(v)
		return nil
	case internship.FieldLearningOutcomes:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLearningOutcomes(v)
		return nil
	case internship.FieldPrerequisites:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrerequisites(v)
		return nil
	case internship.FieldBenefits:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBenefits(v)
		return nil
	case internship.FieldCurrency:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrency(v)
		return nil
	case internship.FieldPrice:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case internship.FieldFlatDiscount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFlatDiscount(v)
		return nil
	case internship.FieldPercentageDiscount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPercentageDiscount(v)
		return nil
	}
	return fmt.Errorf("unknown Internship field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *InternshipMutation) AddedFields() []string {
	var fields []string
	if m.addduration_in_weeks != nil {
		fields = append(fields, internship.FieldDurationInWeeks)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *InternshipMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case internship.FieldDurationInWeeks:
		return m.AddedDurationInWeeks()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InternshipMutation) AddField(name string, value ent.Value) error {
	switch name {
	case internship.FieldDurationInWeeks:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDurationInWeeks(v)
		return nil
	}
	return fmt.Errorf("unknown Internship numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *InternshipMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(internship.FieldCreatedBy) {
		fields = append(fields, internship.FieldCreatedBy)
	}
	if m.FieldCleared(internship.FieldUpdatedBy) {
		fields = append(fields, internship.FieldUpdatedBy)
	}
	if m.FieldCleared(internship.FieldSkills) {
		fields = append(fields, internship.FieldSkills)
	}
	if m.FieldCleared(internship.FieldLevel) {
		fields = append(fields, internship.FieldLevel)
	}
	if m.FieldCleared(internship.FieldDurationInWeeks) {
		fields = append(fields, internship.FieldDurationInWeeks)
	}
	if m.FieldCleared(internship.FieldLearningOutcomes) {
		fields = append(fields, internship.FieldLearningOutcomes)
	}
	if m.FieldCleared(internship.FieldPrerequisites) {
		fields = append(fields, internship.FieldPrerequisites)
	}
	if m.FieldCleared(internship.FieldBenefits) {
		fields = append(fields, internship.FieldBenefits)
	}
	if m.FieldCleared(internship.FieldCurrency) {
		fields = append(fields, internship.FieldCurrency)
	}
	if m.FieldCleared(internship.FieldPrice) {
		fields = append(fields, internship.FieldPrice)
	}
	if m.FieldCleared(internship.FieldFlatDiscount) {
		fields = append(fields, internship.FieldFlatDiscount)
	}
	if m.FieldCleared(internship.FieldPercentageDiscount) {
		fields = append(fields, internship.FieldPercentageDiscount)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *InternshipMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *InternshipMutation) ClearField(name string) error {
	switch name {
	case internship.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case internship.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case internship.FieldSkills:
		m.ClearSkills()
		return nil
	case internship.FieldLevel:
		m.ClearLevel()
		return nil
	case internship.FieldDurationInWeeks:
		m.ClearDurationInWeeks()
		return nil
	case internship.FieldLearningOutcomes:
		m.ClearLearningOutcomes()
		return nil
	case internship.FieldPrerequisites:
		m.ClearPrerequisites()
		return nil
	case internship.FieldBenefits:
		m.ClearBenefits()
		return nil
	case internship.FieldCurrency:
		m.ClearCurrency()
		return nil
	case internship.FieldPrice:
		m.ClearPrice()
		return nil
	case internship.FieldFlatDiscount:
		m.ClearFlatDiscount()
		return nil
	case internship.FieldPercentageDiscount:
		m.ClearPercentageDiscount()
		return nil
	}
	return fmt.Errorf("unknown Internship nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *InternshipMutation) ResetField(name string) error {
	switch name {
	case internship.FieldStatus:
		m.ResetStatus()
		return nil
	case internship.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case internship.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case internship.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case internship.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case internship.FieldTitle:
		m.ResetTitle()
		return nil
	case internship.FieldLookupKey:
		m.ResetLookupKey()
		return nil
	case internship.FieldDescription:
		m.ResetDescription()
		return nil
	case internship.FieldSkills:
		m.ResetSkills()
		return nil
	case internship.FieldLevel:
		m.ResetLevel()
		return nil
	case internship.FieldMode:
		m.ResetMode()
		return nil
	case internship.FieldDurationInWeeks:
		m.ResetDurationInWeeks()
		return nil
	case internship.FieldLearningOutcomes:
		m.ResetLearningOutcomes()
		return nil
	case internship.FieldPrerequisites:
		m.ResetPrerequisites()
		return nil
	case internship.FieldBenefits:
		m.ResetBenefits()
		return nil
	case internship.FieldCurrency:
		m.ResetCurrency()
		return nil
	case internship.FieldPrice:
		m.ResetPrice()
		return nil
	case internship.FieldFlatDiscount:
		m.ResetFlatDiscount()
		return nil
	case internship.FieldPercentageDiscount:
		m.ResetPercentageDiscount()
		return nil
	}
	return fmt.Errorf("unknown Internship field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *InternshipMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.categories != nil {
		edges = append(edges, internship.EdgeCategories)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *InternshipMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case internship.EdgeCategories:
		ids := make([]ent.Value, 0, len(m.categories))
		for id := range m.categories {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *InternshipMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedcategories != nil {
		edges = append(edges, internship.EdgeCategories)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *InternshipMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case internship.EdgeCategories:
		ids := make([]ent.Value, 0, len(m.removedcategories))
		for id := range m.removedcategories {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *InternshipMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcategories {
		edges = append(edges, internship.EdgeCategories)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *InternshipMutation) EdgeCleared(name string) bool {
	switch name {
	case internship.EdgeCategories:
		return m.clearedcategories
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *InternshipMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Internship unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *InternshipMutation) ResetEdge(name string) error {
	switch name {
	case internship.EdgeCategories:
		m.ResetCategories()
		return nil
	}
	return fmt.Errorf("unknown Internship edge %s", name)
}

// InternshipBatchMutation represents an operation that mutates the InternshipBatch nodes in the graph.
type InternshipBatchMutation struct {
	config
	op            Op
	typ           string
	id            *string
	status        *string
	created_at    *time.Time
	updated_at    *time.Time
	created_by    *string
	updated_by    *string
	metadata      *map[string]string
	internship_id *string
	name          *string
	description   *string
	start_date    *time.Time
	end_date      *time.Time
	batch_status  *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*InternshipBatch, error)
	predicates    []predicate.InternshipBatch
}

var _ ent.Mutation = (*InternshipBatchMutation)(nil)

// internshipbatchOption allows management of the mutation configuration using functional options.
type internshipbatchOption func(*InternshipBatchMutation)

// newInternshipBatchMutation creates new mutation for the InternshipBatch entity.
func newInternshipBatchMutation(c config, op Op, opts ...internshipbatchOption) *InternshipBatchMutation {
	m := &InternshipBatchMutation{
		config:        c,
		op:            op,
		typ:           TypeInternshipBatch,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInternshipBatchID sets the ID field of the mutation.
func withInternshipBatchID(id string) internshipbatchOption {
	return func(m *InternshipBatchMutation) {
		var (
			err   error
			once  sync.Once
			value *InternshipBatch
		)
		m.oldValue = func(ctx context.Context) (*InternshipBatch, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().InternshipBatch.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInternshipBatch sets the old InternshipBatch of the mutation.
func withInternshipBatch(node *InternshipBatch) internshipbatchOption {
	return func(m *InternshipBatchMutation) {
		m.oldValue = func(context.Context) (*InternshipBatch, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InternshipBatchMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InternshipBatchMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of InternshipBatch entities.
func (m *InternshipBatchMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *InternshipBatchMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *InternshipBatchMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().InternshipBatch.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStatus sets the "status" field.
func (m *InternshipBatchMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *InternshipBatchMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the InternshipBatch entity.
// If the InternshipBatch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipBatchMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *InternshipBatchMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *InternshipBatchMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *InternshipBatchMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the InternshipBatch entity.
// If the InternshipBatch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipBatchMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *InternshipBatchMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *InternshipBatchMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *InternshipBatchMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the InternshipBatch entity.
// If the InternshipBatch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipBatchMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *InternshipBatchMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *InternshipBatchMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *InternshipBatchMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the InternshipBatch entity.
// If the InternshipBatch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipBatchMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *InternshipBatchMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[internshipbatch.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *InternshipBatchMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[internshipbatch.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *InternshipBatchMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, internshipbatch.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *InternshipBatchMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *InternshipBatchMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the InternshipBatch entity.
// If the InternshipBatch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipBatchMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *InternshipBatchMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[internshipbatch.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *InternshipBatchMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[internshipbatch.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *InternshipBatchMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, internshipbatch.FieldUpdatedBy)
}

// SetMetadata sets the "metadata" field.
func (m *InternshipBatchMutation) SetMetadata(value map[string]string) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *InternshipBatchMutation) Metadata() (r map[string]string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the InternshipBatch entity.
// If the InternshipBatch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipBatchMutation) OldMetadata(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *InternshipBatchMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[internshipbatch.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *InternshipBatchMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[internshipbatch.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *InternshipBatchMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, internshipbatch.FieldMetadata)
}

// SetInternshipID sets the "internship_id" field.
func (m *InternshipBatchMutation) SetInternshipID(s string) {
	m.internship_id = &s
}

// InternshipID returns the value of the "internship_id" field in the mutation.
func (m *InternshipBatchMutation) InternshipID() (r string, exists bool) {
	v := m.internship_id
	if v == nil {
		return
	}
	return *v, true
}

// OldInternshipID returns the old "internship_id" field's value of the InternshipBatch entity.
// If the InternshipBatch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipBatchMutation) OldInternshipID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInternshipID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInternshipID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInternshipID: %w", err)
	}
	return oldValue.InternshipID, nil
}

// ResetInternshipID resets all changes to the "internship_id" field.
func (m *InternshipBatchMutation) ResetInternshipID() {
	m.internship_id = nil
}

// SetName sets the "name" field.
func (m *InternshipBatchMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *InternshipBatchMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the InternshipBatch entity.
// If the InternshipBatch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipBatchMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *InternshipBatchMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *InternshipBatchMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *InternshipBatchMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the InternshipBatch entity.
// If the InternshipBatch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipBatchMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *InternshipBatchMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[internshipbatch.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *InternshipBatchMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[internshipbatch.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *InternshipBatchMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, internshipbatch.FieldDescription)
}

// SetStartDate sets the "start_date" field.
func (m *InternshipBatchMutation) SetStartDate(t time.Time) {
	m.start_date = &t
}

// StartDate returns the value of the "start_date" field in the mutation.
func (m *InternshipBatchMutation) StartDate() (r time.Time, exists bool) {
	v := m.start_date
	if v == nil {
		return
	}
	return *v, true
}

// OldStartDate returns the old "start_date" field's value of the InternshipBatch entity.
// If the InternshipBatch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipBatchMutation) OldStartDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartDate: %w", err)
	}
	return oldValue.StartDate, nil
}

// ClearStartDate clears the value of the "start_date" field.
func (m *InternshipBatchMutation) ClearStartDate() {
	m.start_date = nil
	m.clearedFields[internshipbatch.FieldStartDate] = struct{}{}
}

// StartDateCleared returns if the "start_date" field was cleared in this mutation.
func (m *InternshipBatchMutation) StartDateCleared() bool {
	_, ok := m.clearedFields[internshipbatch.FieldStartDate]
	return ok
}

// ResetStartDate resets all changes to the "start_date" field.
func (m *InternshipBatchMutation) ResetStartDate() {
	m.start_date = nil
	delete(m.clearedFields, internshipbatch.FieldStartDate)
}

// SetEndDate sets the "end_date" field.
func (m *InternshipBatchMutation) SetEndDate(t time.Time) {
	m.end_date = &t
}

// EndDate returns the value of the "end_date" field in the mutation.
func (m *InternshipBatchMutation) EndDate() (r time.Time, exists bool) {
	v := m.end_date
	if v == nil {
		return
	}
	return *v, true
}

// OldEndDate returns the old "end_date" field's value of the InternshipBatch entity.
// If the InternshipBatch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipBatchMutation) OldEndDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndDate: %w", err)
	}
	return oldValue.EndDate, nil
}

// ClearEndDate clears the value of the "end_date" field.
func (m *InternshipBatchMutation) ClearEndDate() {
	m.end_date = nil
	m.clearedFields[internshipbatch.FieldEndDate] = struct{}{}
}

// EndDateCleared returns if the "end_date" field was cleared in this mutation.
func (m *InternshipBatchMutation) EndDateCleared() bool {
	_, ok := m.clearedFields[internshipbatch.FieldEndDate]
	return ok
}

// ResetEndDate resets all changes to the "end_date" field.
func (m *InternshipBatchMutation) ResetEndDate() {
	m.end_date = nil
	delete(m.clearedFields, internshipbatch.FieldEndDate)
}

// SetBatchStatus sets the "batch_status" field.
func (m *InternshipBatchMutation) SetBatchStatus(s string) {
	m.batch_status = &s
}

// BatchStatus returns the value of the "batch_status" field in the mutation.
func (m *InternshipBatchMutation) BatchStatus() (r string, exists bool) {
	v := m.batch_status
	if v == nil {
		return
	}
	return *v, true
}

// OldBatchStatus returns the old "batch_status" field's value of the InternshipBatch entity.
// If the InternshipBatch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipBatchMutation) OldBatchStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBatchStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBatchStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBatchStatus: %w", err)
	}
	return oldValue.BatchStatus, nil
}

// ResetBatchStatus resets all changes to the "batch_status" field.
func (m *InternshipBatchMutation) ResetBatchStatus() {
	m.batch_status = nil
}

// Where appends a list predicates to the InternshipBatchMutation builder.
func (m *InternshipBatchMutation) Where(ps ...predicate.InternshipBatch) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the InternshipBatchMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *InternshipBatchMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.InternshipBatch, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *InternshipBatchMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *InternshipBatchMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (InternshipBatch).
func (m *InternshipBatchMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *InternshipBatchMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.status != nil {
		fields = append(fields, internshipbatch.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, internshipbatch.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, internshipbatch.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, internshipbatch.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, internshipbatch.FieldUpdatedBy)
	}
	if m.metadata != nil {
		fields = append(fields, internshipbatch.FieldMetadata)
	}
	if m.internship_id != nil {
		fields = append(fields, internshipbatch.FieldInternshipID)
	}
	if m.name != nil {
		fields = append(fields, internshipbatch.FieldName)
	}
	if m.description != nil {
		fields = append(fields, internshipbatch.FieldDescription)
	}
	if m.start_date != nil {
		fields = append(fields, internshipbatch.FieldStartDate)
	}
	if m.end_date != nil {
		fields = append(fields, internshipbatch.FieldEndDate)
	}
	if m.batch_status != nil {
		fields = append(fields, internshipbatch.FieldBatchStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *InternshipBatchMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case internshipbatch.FieldStatus:
		return m.Status()
	case internshipbatch.FieldCreatedAt:
		return m.CreatedAt()
	case internshipbatch.FieldUpdatedAt:
		return m.UpdatedAt()
	case internshipbatch.FieldCreatedBy:
		return m.CreatedBy()
	case internshipbatch.FieldUpdatedBy:
		return m.UpdatedBy()
	case internshipbatch.FieldMetadata:
		return m.Metadata()
	case internshipbatch.FieldInternshipID:
		return m.InternshipID()
	case internshipbatch.FieldName:
		return m.Name()
	case internshipbatch.FieldDescription:
		return m.Description()
	case internshipbatch.FieldStartDate:
		return m.StartDate()
	case internshipbatch.FieldEndDate:
		return m.EndDate()
	case internshipbatch.FieldBatchStatus:
		return m.BatchStatus()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *InternshipBatchMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case internshipbatch.FieldStatus:
		return m.OldStatus(ctx)
	case internshipbatch.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case internshipbatch.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case internshipbatch.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case internshipbatch.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case internshipbatch.FieldMetadata:
		return m.OldMetadata(ctx)
	case internshipbatch.FieldInternshipID:
		return m.OldInternshipID(ctx)
	case internshipbatch.FieldName:
		return m.OldName(ctx)
	case internshipbatch.FieldDescription:
		return m.OldDescription(ctx)
	case internshipbatch.FieldStartDate:
		return m.OldStartDate(ctx)
	case internshipbatch.FieldEndDate:
		return m.OldEndDate(ctx)
	case internshipbatch.FieldBatchStatus:
		return m.OldBatchStatus(ctx)
	}
	return nil, fmt.Errorf("unknown InternshipBatch field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InternshipBatchMutation) SetField(name string, value ent.Value) error {
	switch name {
	case internshipbatch.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case internshipbatch.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case internshipbatch.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case internshipbatch.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case internshipbatch.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case internshipbatch.FieldMetadata:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case internshipbatch.FieldInternshipID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInternshipID(v)
		return nil
	case internshipbatch.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case internshipbatch.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case internshipbatch.FieldStartDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartDate(v)
		return nil
	case internshipbatch.FieldEndDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndDate(v)
		return nil
	case internshipbatch.FieldBatchStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBatchStatus(v)
		return nil
	}
	return fmt.Errorf("unknown InternshipBatch field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *InternshipBatchMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *InternshipBatchMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InternshipBatchMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown InternshipBatch numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *InternshipBatchMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(internshipbatch.FieldCreatedBy) {
		fields = append(fields, internshipbatch.FieldCreatedBy)
	}
	if m.FieldCleared(internshipbatch.FieldUpdatedBy) {
		fields = append(fields, internshipbatch.FieldUpdatedBy)
	}
	if m.FieldCleared(internshipbatch.FieldMetadata) {
		fields = append(fields, internshipbatch.FieldMetadata)
	}
	if m.FieldCleared(internshipbatch.FieldDescription) {
		fields = append(fields, internshipbatch.FieldDescription)
	}
	if m.FieldCleared(internshipbatch.FieldStartDate) {
		fields = append(fields, internshipbatch.FieldStartDate)
	}
	if m.FieldCleared(internshipbatch.FieldEndDate) {
		fields = append(fields, internshipbatch.FieldEndDate)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *InternshipBatchMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *InternshipBatchMutation) ClearField(name string) error {
	switch name {
	case internshipbatch.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case internshipbatch.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case internshipbatch.FieldMetadata:
		m.ClearMetadata()
		return nil
	case internshipbatch.FieldDescription:
		m.ClearDescription()
		return nil
	case internshipbatch.FieldStartDate:
		m.ClearStartDate()
		return nil
	case internshipbatch.FieldEndDate:
		m.ClearEndDate()
		return nil
	}
	return fmt.Errorf("unknown InternshipBatch nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *InternshipBatchMutation) ResetField(name string) error {
	switch name {
	case internshipbatch.FieldStatus:
		m.ResetStatus()
		return nil
	case internshipbatch.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case internshipbatch.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case internshipbatch.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case internshipbatch.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case internshipbatch.FieldMetadata:
		m.ResetMetadata()
		return nil
	case internshipbatch.FieldInternshipID:
		m.ResetInternshipID()
		return nil
	case internshipbatch.FieldName:
		m.ResetName()
		return nil
	case internshipbatch.FieldDescription:
		m.ResetDescription()
		return nil
	case internshipbatch.FieldStartDate:
		m.ResetStartDate()
		return nil
	case internshipbatch.FieldEndDate:
		m.ResetEndDate()
		return nil
	case internshipbatch.FieldBatchStatus:
		m.ResetBatchStatus()
		return nil
	}
	return fmt.Errorf("unknown InternshipBatch field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *InternshipBatchMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *InternshipBatchMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *InternshipBatchMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *InternshipBatchMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *InternshipBatchMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *InternshipBatchMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *InternshipBatchMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown InternshipBatch unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *InternshipBatchMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown InternshipBatch edge %s", name)
}

// InternshipEnrollmentMutation represents an operation that mutates the InternshipEnrollment nodes in the graph.
type InternshipEnrollmentMutation struct {
	config
	op                  Op
	typ                 string
	id                  *string
	status              *string
	created_at          *time.Time
	updated_at          *time.Time
	created_by          *string
	updated_by          *string
	metadata            *map[string]string
	user_id             *string
	internship_id       *string
	internship_batch_id *string
	enrollment_status   *types.EnrollmentStatus
	payment_status      *types.PaymentStatus
	enrolled_at         *time.Time
	payment_id          *string
	refunded_at         *time.Time
	cancellation_reason *string
	refund_reason       *string
	idempotency_key     *string
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*InternshipEnrollment, error)
	predicates          []predicate.InternshipEnrollment
}

var _ ent.Mutation = (*InternshipEnrollmentMutation)(nil)

// internshipenrollmentOption allows management of the mutation configuration using functional options.
type internshipenrollmentOption func(*InternshipEnrollmentMutation)

// newInternshipEnrollmentMutation creates new mutation for the InternshipEnrollment entity.
func newInternshipEnrollmentMutation(c config, op Op, opts ...internshipenrollmentOption) *InternshipEnrollmentMutation {
	m := &InternshipEnrollmentMutation{
		config:        c,
		op:            op,
		typ:           TypeInternshipEnrollment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInternshipEnrollmentID sets the ID field of the mutation.
func withInternshipEnrollmentID(id string) internshipenrollmentOption {
	return func(m *InternshipEnrollmentMutation) {
		var (
			err   error
			once  sync.Once
			value *InternshipEnrollment
		)
		m.oldValue = func(ctx context.Context) (*InternshipEnrollment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().InternshipEnrollment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInternshipEnrollment sets the old InternshipEnrollment of the mutation.
func withInternshipEnrollment(node *InternshipEnrollment) internshipenrollmentOption {
	return func(m *InternshipEnrollmentMutation) {
		m.oldValue = func(context.Context) (*InternshipEnrollment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InternshipEnrollmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InternshipEnrollmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of InternshipEnrollment entities.
func (m *InternshipEnrollmentMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *InternshipEnrollmentMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *InternshipEnrollmentMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().InternshipEnrollment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStatus sets the "status" field.
func (m *InternshipEnrollmentMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *InternshipEnrollmentMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the InternshipEnrollment entity.
// If the InternshipEnrollment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipEnrollmentMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *InternshipEnrollmentMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *InternshipEnrollmentMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *InternshipEnrollmentMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the InternshipEnrollment entity.
// If the InternshipEnrollment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipEnrollmentMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *InternshipEnrollmentMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *InternshipEnrollmentMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *InternshipEnrollmentMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the InternshipEnrollment entity.
// If the InternshipEnrollment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipEnrollmentMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *InternshipEnrollmentMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *InternshipEnrollmentMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *InternshipEnrollmentMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the InternshipEnrollment entity.
// If the InternshipEnrollment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipEnrollmentMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *InternshipEnrollmentMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[internshipenrollment.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *InternshipEnrollmentMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[internshipenrollment.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *InternshipEnrollmentMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, internshipenrollment.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *InternshipEnrollmentMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *InternshipEnrollmentMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the InternshipEnrollment entity.
// If the InternshipEnrollment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipEnrollmentMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *InternshipEnrollmentMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[internshipenrollment.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *InternshipEnrollmentMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[internshipenrollment.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *InternshipEnrollmentMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, internshipenrollment.FieldUpdatedBy)
}

// SetMetadata sets the "metadata" field.
func (m *InternshipEnrollmentMutation) SetMetadata(value map[string]string) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *InternshipEnrollmentMutation) Metadata() (r map[string]string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the InternshipEnrollment entity.
// If the InternshipEnrollment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipEnrollmentMutation) OldMetadata(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *InternshipEnrollmentMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[internshipenrollment.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *InternshipEnrollmentMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[internshipenrollment.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *InternshipEnrollmentMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, internshipenrollment.FieldMetadata)
}

// SetUserID sets the "user_id" field.
func (m *InternshipEnrollmentMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *InternshipEnrollmentMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the InternshipEnrollment entity.
// If the InternshipEnrollment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipEnrollmentMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *InternshipEnrollmentMutation) ResetUserID() {
	m.user_id = nil
}

// SetInternshipID sets the "internship_id" field.
func (m *InternshipEnrollmentMutation) SetInternshipID(s string) {
	m.internship_id = &s
}

// InternshipID returns the value of the "internship_id" field in the mutation.
func (m *InternshipEnrollmentMutation) InternshipID() (r string, exists bool) {
	v := m.internship_id
	if v == nil {
		return
	}
	return *v, true
}

// OldInternshipID returns the old "internship_id" field's value of the InternshipEnrollment entity.
// If the InternshipEnrollment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipEnrollmentMutation) OldInternshipID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInternshipID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInternshipID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInternshipID: %w", err)
	}
	return oldValue.InternshipID, nil
}

// ResetInternshipID resets all changes to the "internship_id" field.
func (m *InternshipEnrollmentMutation) ResetInternshipID() {
	m.internship_id = nil
}

// SetInternshipBatchID sets the "internship_batch_id" field.
func (m *InternshipEnrollmentMutation) SetInternshipBatchID(s string) {
	m.internship_batch_id = &s
}

// InternshipBatchID returns the value of the "internship_batch_id" field in the mutation.
func (m *InternshipEnrollmentMutation) InternshipBatchID() (r string, exists bool) {
	v := m.internship_batch_id
	if v == nil {
		return
	}
	return *v, true
}

// OldInternshipBatchID returns the old "internship_batch_id" field's value of the InternshipEnrollment entity.
// If the InternshipEnrollment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipEnrollmentMutation) OldInternshipBatchID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInternshipBatchID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInternshipBatchID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInternshipBatchID: %w", err)
	}
	return oldValue.InternshipBatchID, nil
}

// ResetInternshipBatchID resets all changes to the "internship_batch_id" field.
func (m *InternshipEnrollmentMutation) ResetInternshipBatchID() {
	m.internship_batch_id = nil
}

// SetEnrollmentStatus sets the "enrollment_status" field.
func (m *InternshipEnrollmentMutation) SetEnrollmentStatus(ts types.EnrollmentStatus) {
	m.enrollment_status = &ts
}

// EnrollmentStatus returns the value of the "enrollment_status" field in the mutation.
func (m *InternshipEnrollmentMutation) EnrollmentStatus() (r types.EnrollmentStatus, exists bool) {
	v := m.enrollment_status
	if v == nil {
		return
	}
	return *v, true
}

// OldEnrollmentStatus returns the old "enrollment_status" field's value of the InternshipEnrollment entity.
// If the InternshipEnrollment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipEnrollmentMutation) OldEnrollmentStatus(ctx context.Context) (v types.EnrollmentStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnrollmentStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnrollmentStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnrollmentStatus: %w", err)
	}
	return oldValue.EnrollmentStatus, nil
}

// ResetEnrollmentStatus resets all changes to the "enrollment_status" field.
func (m *InternshipEnrollmentMutation) ResetEnrollmentStatus() {
	m.enrollment_status = nil
}

// SetPaymentStatus sets the "payment_status" field.
func (m *InternshipEnrollmentMutation) SetPaymentStatus(ts types.PaymentStatus) {
	m.payment_status = &ts
}

// PaymentStatus returns the value of the "payment_status" field in the mutation.
func (m *InternshipEnrollmentMutation) PaymentStatus() (r types.PaymentStatus, exists bool) {
	v := m.payment_status
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentStatus returns the old "payment_status" field's value of the InternshipEnrollment entity.
// If the InternshipEnrollment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipEnrollmentMutation) OldPaymentStatus(ctx context.Context) (v types.PaymentStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentStatus: %w", err)
	}
	return oldValue.PaymentStatus, nil
}

// ResetPaymentStatus resets all changes to the "payment_status" field.
func (m *InternshipEnrollmentMutation) ResetPaymentStatus() {
	m.payment_status = nil
}

// SetEnrolledAt sets the "enrolled_at" field.
func (m *InternshipEnrollmentMutation) SetEnrolledAt(t time.Time) {
	m.enrolled_at = &t
}

// EnrolledAt returns the value of the "enrolled_at" field in the mutation.
func (m *InternshipEnrollmentMutation) EnrolledAt() (r time.Time, exists bool) {
	v := m.enrolled_at
	if v == nil {
		return
	}
	return *v, true
}

// OldEnrolledAt returns the old "enrolled_at" field's value of the InternshipEnrollment entity.
// If the InternshipEnrollment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipEnrollmentMutation) OldEnrolledAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnrolledAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnrolledAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnrolledAt: %w", err)
	}
	return oldValue.EnrolledAt, nil
}

// ClearEnrolledAt clears the value of the "enrolled_at" field.
func (m *InternshipEnrollmentMutation) ClearEnrolledAt() {
	m.enrolled_at = nil
	m.clearedFields[internshipenrollment.FieldEnrolledAt] = struct{}{}
}

// EnrolledAtCleared returns if the "enrolled_at" field was cleared in this mutation.
func (m *InternshipEnrollmentMutation) EnrolledAtCleared() bool {
	_, ok := m.clearedFields[internshipenrollment.FieldEnrolledAt]
	return ok
}

// ResetEnrolledAt resets all changes to the "enrolled_at" field.
func (m *InternshipEnrollmentMutation) ResetEnrolledAt() {
	m.enrolled_at = nil
	delete(m.clearedFields, internshipenrollment.FieldEnrolledAt)
}

// SetPaymentID sets the "payment_id" field.
func (m *InternshipEnrollmentMutation) SetPaymentID(s string) {
	m.payment_id = &s
}

// PaymentID returns the value of the "payment_id" field in the mutation.
func (m *InternshipEnrollmentMutation) PaymentID() (r string, exists bool) {
	v := m.payment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentID returns the old "payment_id" field's value of the InternshipEnrollment entity.
// If the InternshipEnrollment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipEnrollmentMutation) OldPaymentID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentID: %w", err)
	}
	return oldValue.PaymentID, nil
}

// ClearPaymentID clears the value of the "payment_id" field.
func (m *InternshipEnrollmentMutation) ClearPaymentID() {
	m.payment_id = nil
	m.clearedFields[internshipenrollment.FieldPaymentID] = struct{}{}
}

// PaymentIDCleared returns if the "payment_id" field was cleared in this mutation.
func (m *InternshipEnrollmentMutation) PaymentIDCleared() bool {
	_, ok := m.clearedFields[internshipenrollment.FieldPaymentID]
	return ok
}

// ResetPaymentID resets all changes to the "payment_id" field.
func (m *InternshipEnrollmentMutation) ResetPaymentID() {
	m.payment_id = nil
	delete(m.clearedFields, internshipenrollment.FieldPaymentID)
}

// SetRefundedAt sets the "refunded_at" field.
func (m *InternshipEnrollmentMutation) SetRefundedAt(t time.Time) {
	m.refunded_at = &t
}

// RefundedAt returns the value of the "refunded_at" field in the mutation.
func (m *InternshipEnrollmentMutation) RefundedAt() (r time.Time, exists bool) {
	v := m.refunded_at
	if v == nil {
		return
	}
	return *v, true
}

// OldRefundedAt returns the old "refunded_at" field's value of the InternshipEnrollment entity.
// If the InternshipEnrollment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipEnrollmentMutation) OldRefundedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRefundedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRefundedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRefundedAt: %w", err)
	}
	return oldValue.RefundedAt, nil
}

// ClearRefundedAt clears the value of the "refunded_at" field.
func (m *InternshipEnrollmentMutation) ClearRefundedAt() {
	m.refunded_at = nil
	m.clearedFields[internshipenrollment.FieldRefundedAt] = struct{}{}
}

// RefundedAtCleared returns if the "refunded_at" field was cleared in this mutation.
func (m *InternshipEnrollmentMutation) RefundedAtCleared() bool {
	_, ok := m.clearedFields[internshipenrollment.FieldRefundedAt]
	return ok
}

// ResetRefundedAt resets all changes to the "refunded_at" field.
func (m *InternshipEnrollmentMutation) ResetRefundedAt() {
	m.refunded_at = nil
	delete(m.clearedFields, internshipenrollment.FieldRefundedAt)
}

// SetCancellationReason sets the "cancellation_reason" field.
func (m *InternshipEnrollmentMutation) SetCancellationReason(s string) {
	m.cancellation_reason = &s
}

// CancellationReason returns the value of the "cancellation_reason" field in the mutation.
func (m *InternshipEnrollmentMutation) CancellationReason() (r string, exists bool) {
	v := m.cancellation_reason
	if v == nil {
		return
	}
	return *v, true
}

// OldCancellationReason returns the old "cancellation_reason" field's value of the InternshipEnrollment entity.
// If the InternshipEnrollment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipEnrollmentMutation) OldCancellationReason(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCancellationReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCancellationReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCancellationReason: %w", err)
	}
	return oldValue.CancellationReason, nil
}

// ClearCancellationReason clears the value of the "cancellation_reason" field.
func (m *InternshipEnrollmentMutation) ClearCancellationReason() {
	m.cancellation_reason = nil
	m.clearedFields[internshipenrollment.FieldCancellationReason] = struct{}{}
}

// CancellationReasonCleared returns if the "cancellation_reason" field was cleared in this mutation.
func (m *InternshipEnrollmentMutation) CancellationReasonCleared() bool {
	_, ok := m.clearedFields[internshipenrollment.FieldCancellationReason]
	return ok
}

// ResetCancellationReason resets all changes to the "cancellation_reason" field.
func (m *InternshipEnrollmentMutation) ResetCancellationReason() {
	m.cancellation_reason = nil
	delete(m.clearedFields, internshipenrollment.FieldCancellationReason)
}

// SetRefundReason sets the "refund_reason" field.
func (m *InternshipEnrollmentMutation) SetRefundReason(s string) {
	m.refund_reason = &s
}

// RefundReason returns the value of the "refund_reason" field in the mutation.
func (m *InternshipEnrollmentMutation) RefundReason() (r string, exists bool) {
	v := m.refund_reason
	if v == nil {
		return
	}
	return *v, true
}

// OldRefundReason returns the old "refund_reason" field's value of the InternshipEnrollment entity.
// If the InternshipEnrollment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipEnrollmentMutation) OldRefundReason(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRefundReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRefundReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRefundReason: %w", err)
	}
	return oldValue.RefundReason, nil
}

// ClearRefundReason clears the value of the "refund_reason" field.
func (m *InternshipEnrollmentMutation) ClearRefundReason() {
	m.refund_reason = nil
	m.clearedFields[internshipenrollment.FieldRefundReason] = struct{}{}
}

// RefundReasonCleared returns if the "refund_reason" field was cleared in this mutation.
func (m *InternshipEnrollmentMutation) RefundReasonCleared() bool {
	_, ok := m.clearedFields[internshipenrollment.FieldRefundReason]
	return ok
}

// ResetRefundReason resets all changes to the "refund_reason" field.
func (m *InternshipEnrollmentMutation) ResetRefundReason() {
	m.refund_reason = nil
	delete(m.clearedFields, internshipenrollment.FieldRefundReason)
}

// SetIdempotencyKey sets the "idempotency_key" field.
func (m *InternshipEnrollmentMutation) SetIdempotencyKey(s string) {
	m.idempotency_key = &s
}

// IdempotencyKey returns the value of the "idempotency_key" field in the mutation.
func (m *InternshipEnrollmentMutation) IdempotencyKey() (r string, exists bool) {
	v := m.idempotency_key
	if v == nil {
		return
	}
	return *v, true
}

// OldIdempotencyKey returns the old "idempotency_key" field's value of the InternshipEnrollment entity.
// If the InternshipEnrollment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InternshipEnrollmentMutation) OldIdempotencyKey(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdempotencyKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdempotencyKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdempotencyKey: %w", err)
	}
	return oldValue.IdempotencyKey, nil
}

// ClearIdempotencyKey clears the value of the "idempotency_key" field.
func (m *InternshipEnrollmentMutation) ClearIdempotencyKey() {
	m.idempotency_key = nil
	m.clearedFields[internshipenrollment.FieldIdempotencyKey] = struct{}{}
}

// IdempotencyKeyCleared returns if the "idempotency_key" field was cleared in this mutation.
func (m *InternshipEnrollmentMutation) IdempotencyKeyCleared() bool {
	_, ok := m.clearedFields[internshipenrollment.FieldIdempotencyKey]
	return ok
}

// ResetIdempotencyKey resets all changes to the "idempotency_key" field.
func (m *InternshipEnrollmentMutation) ResetIdempotencyKey() {
	m.idempotency_key = nil
	delete(m.clearedFields, internshipenrollment.FieldIdempotencyKey)
}

// Where appends a list predicates to the InternshipEnrollmentMutation builder.
func (m *InternshipEnrollmentMutation) Where(ps ...predicate.InternshipEnrollment) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the InternshipEnrollmentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *InternshipEnrollmentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.InternshipEnrollment, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *InternshipEnrollmentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *InternshipEnrollmentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (InternshipEnrollment).
func (m *InternshipEnrollmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *InternshipEnrollmentMutation) Fields() []string {
	fields := make([]string, 0, 17)
	if m.status != nil {
		fields = append(fields, internshipenrollment.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, internshipenrollment.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, internshipenrollment.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, internshipenrollment.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, internshipenrollment.FieldUpdatedBy)
	}
	if m.metadata != nil {
		fields = append(fields, internshipenrollment.FieldMetadata)
	}
	if m.user_id != nil {
		fields = append(fields, internshipenrollment.FieldUserID)
	}
	if m.internship_id != nil {
		fields = append(fields, internshipenrollment.FieldInternshipID)
	}
	if m.internship_batch_id != nil {
		fields = append(fields, internshipenrollment.FieldInternshipBatchID)
	}
	if m.enrollment_status != nil {
		fields = append(fields, internshipenrollment.FieldEnrollmentStatus)
	}
	if m.payment_status != nil {
		fields = append(fields, internshipenrollment.FieldPaymentStatus)
	}
	if m.enrolled_at != nil {
		fields = append(fields, internshipenrollment.FieldEnrolledAt)
	}
	if m.payment_id != nil {
		fields = append(fields, internshipenrollment.FieldPaymentID)
	}
	if m.refunded_at != nil {
		fields = append(fields, internshipenrollment.FieldRefundedAt)
	}
	if m.cancellation_reason != nil {
		fields = append(fields, internshipenrollment.FieldCancellationReason)
	}
	if m.refund_reason != nil {
		fields = append(fields, internshipenrollment.FieldRefundReason)
	}
	if m.idempotency_key != nil {
		fields = append(fields, internshipenrollment.FieldIdempotencyKey)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *InternshipEnrollmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case internshipenrollment.FieldStatus:
		return m.Status()
	case internshipenrollment.FieldCreatedAt:
		return m.CreatedAt()
	case internshipenrollment.FieldUpdatedAt:
		return m.UpdatedAt()
	case internshipenrollment.FieldCreatedBy:
		return m.CreatedBy()
	case internshipenrollment.FieldUpdatedBy:
		return m.UpdatedBy()
	case internshipenrollment.FieldMetadata:
		return m.Metadata()
	case internshipenrollment.FieldUserID:
		return m.UserID()
	case internshipenrollment.FieldInternshipID:
		return m.InternshipID()
	case internshipenrollment.FieldInternshipBatchID:
		return m.InternshipBatchID()
	case internshipenrollment.FieldEnrollmentStatus:
		return m.EnrollmentStatus()
	case internshipenrollment.FieldPaymentStatus:
		return m.PaymentStatus()
	case internshipenrollment.FieldEnrolledAt:
		return m.EnrolledAt()
	case internshipenrollment.FieldPaymentID:
		return m.PaymentID()
	case internshipenrollment.FieldRefundedAt:
		return m.RefundedAt()
	case internshipenrollment.FieldCancellationReason:
		return m.CancellationReason()
	case internshipenrollment.FieldRefundReason:
		return m.RefundReason()
	case internshipenrollment.FieldIdempotencyKey:
		return m.IdempotencyKey()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *InternshipEnrollmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case internshipenrollment.FieldStatus:
		return m.OldStatus(ctx)
	case internshipenrollment.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case internshipenrollment.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case internshipenrollment.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case internshipenrollment.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case internshipenrollment.FieldMetadata:
		return m.OldMetadata(ctx)
	case internshipenrollment.FieldUserID:
		return m.OldUserID(ctx)
	case internshipenrollment.FieldInternshipID:
		return m.OldInternshipID(ctx)
	case internshipenrollment.FieldInternshipBatchID:
		return m.OldInternshipBatchID(ctx)
	case internshipenrollment.FieldEnrollmentStatus:
		return m.OldEnrollmentStatus(ctx)
	case internshipenrollment.FieldPaymentStatus:
		return m.OldPaymentStatus(ctx)
	case internshipenrollment.FieldEnrolledAt:
		return m.OldEnrolledAt(ctx)
	case internshipenrollment.FieldPaymentID:
		return m.OldPaymentID(ctx)
	case internshipenrollment.FieldRefundedAt:
		return m.OldRefundedAt(ctx)
	case internshipenrollment.FieldCancellationReason:
		return m.OldCancellationReason(ctx)
	case internshipenrollment.FieldRefundReason:
		return m.OldRefundReason(ctx)
	case internshipenrollment.FieldIdempotencyKey:
		return m.OldIdempotencyKey(ctx)
	}
	return nil, fmt.Errorf("unknown InternshipEnrollment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InternshipEnrollmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case internshipenrollment.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case internshipenrollment.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case internshipenrollment.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case internshipenrollment.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case internshipenrollment.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case internshipenrollment.FieldMetadata:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case internshipenrollment.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case internshipenrollment.FieldInternshipID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInternshipID(v)
		return nil
	case internshipenrollment.FieldInternshipBatchID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInternshipBatchID(v)
		return nil
	case internshipenrollment.FieldEnrollmentStatus:
		v, ok := value.(types.EnrollmentStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnrollmentStatus(v)
		return nil
	case internshipenrollment.FieldPaymentStatus:
		v, ok := value.(types.PaymentStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentStatus(v)
		return nil
	case internshipenrollment.FieldEnrolledAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnrolledAt(v)
		return nil
	case internshipenrollment.FieldPaymentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentID(v)
		return nil
	case internshipenrollment.FieldRefundedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRefundedAt(v)
		return nil
	case internshipenrollment.FieldCancellationReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCancellationReason(v)
		return nil
	case internshipenrollment.FieldRefundReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRefundReason(v)
		return nil
	case internshipenrollment.FieldIdempotencyKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdempotencyKey(v)
		return nil
	}
	return fmt.Errorf("unknown InternshipEnrollment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *InternshipEnrollmentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *InternshipEnrollmentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InternshipEnrollmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown InternshipEnrollment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *InternshipEnrollmentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(internshipenrollment.FieldCreatedBy) {
		fields = append(fields, internshipenrollment.FieldCreatedBy)
	}
	if m.FieldCleared(internshipenrollment.FieldUpdatedBy) {
		fields = append(fields, internshipenrollment.FieldUpdatedBy)
	}
	if m.FieldCleared(internshipenrollment.FieldMetadata) {
		fields = append(fields, internshipenrollment.FieldMetadata)
	}
	if m.FieldCleared(internshipenrollment.FieldEnrolledAt) {
		fields = append(fields, internshipenrollment.FieldEnrolledAt)
	}
	if m.FieldCleared(internshipenrollment.FieldPaymentID) {
		fields = append(fields, internshipenrollment.FieldPaymentID)
	}
	if m.FieldCleared(internshipenrollment.FieldRefundedAt) {
		fields = append(fields, internshipenrollment.FieldRefundedAt)
	}
	if m.FieldCleared(internshipenrollment.FieldCancellationReason) {
		fields = append(fields, internshipenrollment.FieldCancellationReason)
	}
	if m.FieldCleared(internshipenrollment.FieldRefundReason) {
		fields = append(fields, internshipenrollment.FieldRefundReason)
	}
	if m.FieldCleared(internshipenrollment.FieldIdempotencyKey) {
		fields = append(fields, internshipenrollment.FieldIdempotencyKey)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *InternshipEnrollmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *InternshipEnrollmentMutation) ClearField(name string) error {
	switch name {
	case internshipenrollment.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case internshipenrollment.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case internshipenrollment.FieldMetadata:
		m.ClearMetadata()
		return nil
	case internshipenrollment.FieldEnrolledAt:
		m.ClearEnrolledAt()
		return nil
	case internshipenrollment.FieldPaymentID:
		m.ClearPaymentID()
		return nil
	case internshipenrollment.FieldRefundedAt:
		m.ClearRefundedAt()
		return nil
	case internshipenrollment.FieldCancellationReason:
		m.ClearCancellationReason()
		return nil
	case internshipenrollment.FieldRefundReason:
		m.ClearRefundReason()
		return nil
	case internshipenrollment.FieldIdempotencyKey:
		m.ClearIdempotencyKey()
		return nil
	}
	return fmt.Errorf("unknown InternshipEnrollment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *InternshipEnrollmentMutation) ResetField(name string) error {
	switch name {
	case internshipenrollment.FieldStatus:
		m.ResetStatus()
		return nil
	case internshipenrollment.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case internshipenrollment.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case internshipenrollment.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case internshipenrollment.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case internshipenrollment.FieldMetadata:
		m.ResetMetadata()
		return nil
	case internshipenrollment.FieldUserID:
		m.ResetUserID()
		return nil
	case internshipenrollment.FieldInternshipID:
		m.ResetInternshipID()
		return nil
	case internshipenrollment.FieldInternshipBatchID:
		m.ResetInternshipBatchID()
		return nil
	case internshipenrollment.FieldEnrollmentStatus:
		m.ResetEnrollmentStatus()
		return nil
	case internshipenrollment.FieldPaymentStatus:
		m.ResetPaymentStatus()
		return nil
	case internshipenrollment.FieldEnrolledAt:
		m.ResetEnrolledAt()
		return nil
	case internshipenrollment.FieldPaymentID:
		m.ResetPaymentID()
		return nil
	case internshipenrollment.FieldRefundedAt:
		m.ResetRefundedAt()
		return nil
	case internshipenrollment.FieldCancellationReason:
		m.ResetCancellationReason()
		return nil
	case internshipenrollment.FieldRefundReason:
		m.ResetRefundReason()
		return nil
	case internshipenrollment.FieldIdempotencyKey:
		m.ResetIdempotencyKey()
		return nil
	}
	return fmt.Errorf("unknown InternshipEnrollment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *InternshipEnrollmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *InternshipEnrollmentMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *InternshipEnrollmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *InternshipEnrollmentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *InternshipEnrollmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *InternshipEnrollmentMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *InternshipEnrollmentMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown InternshipEnrollment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *InternshipEnrollmentMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown InternshipEnrollment edge %s", name)
}

// PaymentMutation represents an operation that mutates the Payment nodes in the graph.
type PaymentMutation struct {
	config
	op                       Op
	typ                      string
	id                       *string
	status                   *string
	created_at               *time.Time
	updated_at               *time.Time
	created_by               *string
	updated_by               *string
	idempotency_key          *string
	destination_type         *types.PaymentDestinationType
	destination_id           *string
	payment_method_type      *types.PaymentMethodType
	payment_method_id        *string
	payment_gateway_provider *types.PaymentGatewayProvider
	gateway_payment_id       *string
	amount                   *decimal.Decimal
	currency                 *types.Currency
	payment_status           *types.PaymentStatus
	track_attempts           *bool
	metadata                 *map[string]string
	succeeded_at             *time.Time
	failed_at                *time.Time
	refunded_at              *time.Time
	error_message            *string
	clearedFields            map[string]struct{}
	attempts                 map[string]struct{}
	removedattempts          map[string]struct{}
	clearedattempts          bool
	done                     bool
	oldValue                 func(context.Context) (*Payment, error)
	predicates               []predicate.Payment
}

var _ ent.Mutation = (*PaymentMutation)(nil)

// paymentOption allows management of the mutation configuration using functional options.
type paymentOption func(*PaymentMutation)

// newPaymentMutation creates new mutation for the Payment entity.
func newPaymentMutation(c config, op Op, opts ...paymentOption) *PaymentMutation {
	m := &PaymentMutation{
		config:        c,
		op:            op,
		typ:           TypePayment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPaymentID sets the ID field of the mutation.
func withPaymentID(id string) paymentOption {
	return func(m *PaymentMutation) {
		var (
			err   error
			once  sync.Once
			value *Payment
		)
		m.oldValue = func(ctx context.Context) (*Payment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Payment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPayment sets the old Payment of the mutation.
func withPayment(node *Payment) paymentOption {
	return func(m *PaymentMutation) {
		m.oldValue = func(context.Context) (*Payment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PaymentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PaymentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Payment entities.
func (m *PaymentMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PaymentMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PaymentMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Payment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStatus sets the "status" field.
func (m *PaymentMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *PaymentMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *PaymentMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *PaymentMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PaymentMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PaymentMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PaymentMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PaymentMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PaymentMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *PaymentMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *PaymentMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *PaymentMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[payment.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *PaymentMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[payment.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *PaymentMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, payment.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *PaymentMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *PaymentMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *PaymentMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[payment.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *PaymentMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[payment.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *PaymentMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, payment.FieldUpdatedBy)
}

// SetIdempotencyKey sets the "idempotency_key" field.
func (m *PaymentMutation) SetIdempotencyKey(s string) {
	m.idempotency_key = &s
}

// IdempotencyKey returns the value of the "idempotency_key" field in the mutation.
func (m *PaymentMutation) IdempotencyKey() (r string, exists bool) {
	v := m.idempotency_key
	if v == nil {
		return
	}
	return *v, true
}

// OldIdempotencyKey returns the old "idempotency_key" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldIdempotencyKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdempotencyKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdempotencyKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdempotencyKey: %w", err)
	}
	return oldValue.IdempotencyKey, nil
}

// ResetIdempotencyKey resets all changes to the "idempotency_key" field.
func (m *PaymentMutation) ResetIdempotencyKey() {
	m.idempotency_key = nil
}

// SetDestinationType sets the "destination_type" field.
func (m *PaymentMutation) SetDestinationType(tdt types.PaymentDestinationType) {
	m.destination_type = &tdt
}

// DestinationType returns the value of the "destination_type" field in the mutation.
func (m *PaymentMutation) DestinationType() (r types.PaymentDestinationType, exists bool) {
	v := m.destination_type
	if v == nil {
		return
	}
	return *v, true
}

// OldDestinationType returns the old "destination_type" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldDestinationType(ctx context.Context) (v types.PaymentDestinationType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDestinationType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDestinationType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDestinationType: %w", err)
	}
	return oldValue.DestinationType, nil
}

// ResetDestinationType resets all changes to the "destination_type" field.
func (m *PaymentMutation) ResetDestinationType() {
	m.destination_type = nil
}

// SetDestinationID sets the "destination_id" field.
func (m *PaymentMutation) SetDestinationID(s string) {
	m.destination_id = &s
}

// DestinationID returns the value of the "destination_id" field in the mutation.
func (m *PaymentMutation) DestinationID() (r string, exists bool) {
	v := m.destination_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDestinationID returns the old "destination_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldDestinationID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDestinationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDestinationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDestinationID: %w", err)
	}
	return oldValue.DestinationID, nil
}

// ResetDestinationID resets all changes to the "destination_id" field.
func (m *PaymentMutation) ResetDestinationID() {
	m.destination_id = nil
}

// SetPaymentMethodType sets the "payment_method_type" field.
func (m *PaymentMutation) SetPaymentMethodType(tmt types.PaymentMethodType) {
	m.payment_method_type = &tmt
}

// PaymentMethodType returns the value of the "payment_method_type" field in the mutation.
func (m *PaymentMutation) PaymentMethodType() (r types.PaymentMethodType, exists bool) {
	v := m.payment_method_type
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentMethodType returns the old "payment_method_type" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldPaymentMethodType(ctx context.Context) (v *types.PaymentMethodType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentMethodType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentMethodType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentMethodType: %w", err)
	}
	return oldValue.PaymentMethodType, nil
}

// ClearPaymentMethodType clears the value of the "payment_method_type" field.
func (m *PaymentMutation) ClearPaymentMethodType() {
	m.payment_method_type = nil
	m.clearedFields[payment.FieldPaymentMethodType] = struct{}{}
}

// PaymentMethodTypeCleared returns if the "payment_method_type" field was cleared in this mutation.
func (m *PaymentMutation) PaymentMethodTypeCleared() bool {
	_, ok := m.clearedFields[payment.FieldPaymentMethodType]
	return ok
}

// ResetPaymentMethodType resets all changes to the "payment_method_type" field.
func (m *PaymentMutation) ResetPaymentMethodType() {
	m.payment_method_type = nil
	delete(m.clearedFields, payment.FieldPaymentMethodType)
}

// SetPaymentMethodID sets the "payment_method_id" field.
func (m *PaymentMutation) SetPaymentMethodID(s string) {
	m.payment_method_id = &s
}

// PaymentMethodID returns the value of the "payment_method_id" field in the mutation.
func (m *PaymentMutation) PaymentMethodID() (r string, exists bool) {
	v := m.payment_method_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentMethodID returns the old "payment_method_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldPaymentMethodID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentMethodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentMethodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentMethodID: %w", err)
	}
	return oldValue.PaymentMethodID, nil
}

// ClearPaymentMethodID clears the value of the "payment_method_id" field.
func (m *PaymentMutation) ClearPaymentMethodID() {
	m.payment_method_id = nil
	m.clearedFields[payment.FieldPaymentMethodID] = struct{}{}
}

// PaymentMethodIDCleared returns if the "payment_method_id" field was cleared in this mutation.
func (m *PaymentMutation) PaymentMethodIDCleared() bool {
	_, ok := m.clearedFields[payment.FieldPaymentMethodID]
	return ok
}

// ResetPaymentMethodID resets all changes to the "payment_method_id" field.
func (m *PaymentMutation) ResetPaymentMethodID() {
	m.payment_method_id = nil
	delete(m.clearedFields, payment.FieldPaymentMethodID)
}

// SetPaymentGatewayProvider sets the "payment_gateway_provider" field.
func (m *PaymentMutation) SetPaymentGatewayProvider(tgp types.PaymentGatewayProvider) {
	m.payment_gateway_provider = &tgp
}

// PaymentGatewayProvider returns the value of the "payment_gateway_provider" field in the mutation.
func (m *PaymentMutation) PaymentGatewayProvider() (r types.PaymentGatewayProvider, exists bool) {
	v := m.payment_gateway_provider
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentGatewayProvider returns the old "payment_gateway_provider" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldPaymentGatewayProvider(ctx context.Context) (v types.PaymentGatewayProvider, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentGatewayProvider is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentGatewayProvider requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentGatewayProvider: %w", err)
	}
	return oldValue.PaymentGatewayProvider, nil
}

// ResetPaymentGatewayProvider resets all changes to the "payment_gateway_provider" field.
func (m *PaymentMutation) ResetPaymentGatewayProvider() {
	m.payment_gateway_provider = nil
}

// SetGatewayPaymentID sets the "gateway_payment_id" field.
func (m *PaymentMutation) SetGatewayPaymentID(s string) {
	m.gateway_payment_id = &s
}

// GatewayPaymentID returns the value of the "gateway_payment_id" field in the mutation.
func (m *PaymentMutation) GatewayPaymentID() (r string, exists bool) {
	v := m.gateway_payment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGatewayPaymentID returns the old "gateway_payment_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldGatewayPaymentID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGatewayPaymentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGatewayPaymentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGatewayPaymentID: %w", err)
	}
	return oldValue.GatewayPaymentID, nil
}

// ClearGatewayPaymentID clears the value of the "gateway_payment_id" field.
func (m *PaymentMutation) ClearGatewayPaymentID() {
	m.gateway_payment_id = nil
	m.clearedFields[payment.FieldGatewayPaymentID] = struct{}{}
}

// GatewayPaymentIDCleared returns if the "gateway_payment_id" field was cleared in this mutation.
func (m *PaymentMutation) GatewayPaymentIDCleared() bool {
	_, ok := m.clearedFields[payment.FieldGatewayPaymentID]
	return ok
}

// ResetGatewayPaymentID resets all changes to the "gateway_payment_id" field.
func (m *PaymentMutation) ResetGatewayPaymentID() {
	m.gateway_payment_id = nil
	delete(m.clearedFields, payment.FieldGatewayPaymentID)
}

// SetAmount sets the "amount" field.
func (m *PaymentMutation) SetAmount(d decimal.Decimal) {
	m.amount = &d
}

// Amount returns the value of the "amount" field in the mutation.
func (m *PaymentMutation) Amount() (r decimal.Decimal, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// ResetAmount resets all changes to the "amount" field.
func (m *PaymentMutation) ResetAmount() {
	m.amount = nil
}

// SetCurrency sets the "currency" field.
func (m *PaymentMutation) SetCurrency(t types.Currency) {
	m.currency = &t
}

// Currency returns the value of the "currency" field in the mutation.
func (m *PaymentMutation) Currency() (r types.Currency, exists bool) {
	v := m.currency
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrency returns the old "currency" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldCurrency(ctx context.Context) (v types.Currency, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrency: %w", err)
	}
	return oldValue.Currency, nil
}

// ResetCurrency resets all changes to the "currency" field.
func (m *PaymentMutation) ResetCurrency() {
	m.currency = nil
}

// SetPaymentStatus sets the "payment_status" field.
func (m *PaymentMutation) SetPaymentStatus(ts types.PaymentStatus) {
	m.payment_status = &ts
}

// PaymentStatus returns the value of the "payment_status" field in the mutation.
func (m *PaymentMutation) PaymentStatus() (r types.PaymentStatus, exists bool) {
	v := m.payment_status
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentStatus returns the old "payment_status" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldPaymentStatus(ctx context.Context) (v types.PaymentStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentStatus: %w", err)
	}
	return oldValue.PaymentStatus, nil
}

// ResetPaymentStatus resets all changes to the "payment_status" field.
func (m *PaymentMutation) ResetPaymentStatus() {
	m.payment_status = nil
}

// SetTrackAttempts sets the "track_attempts" field.
func (m *PaymentMutation) SetTrackAttempts(b bool) {
	m.track_attempts = &b
}

// TrackAttempts returns the value of the "track_attempts" field in the mutation.
func (m *PaymentMutation) TrackAttempts() (r bool, exists bool) {
	v := m.track_attempts
	if v == nil {
		return
	}
	return *v, true
}

// OldTrackAttempts returns the old "track_attempts" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldTrackAttempts(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTrackAttempts is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTrackAttempts requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTrackAttempts: %w", err)
	}
	return oldValue.TrackAttempts, nil
}

// ResetTrackAttempts resets all changes to the "track_attempts" field.
func (m *PaymentMutation) ResetTrackAttempts() {
	m.track_attempts = nil
}

// SetMetadata sets the "metadata" field.
func (m *PaymentMutation) SetMetadata(value map[string]string) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *PaymentMutation) Metadata() (r map[string]string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldMetadata(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *PaymentMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[payment.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *PaymentMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[payment.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *PaymentMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, payment.FieldMetadata)
}

// SetSucceededAt sets the "succeeded_at" field.
func (m *PaymentMutation) SetSucceededAt(t time.Time) {
	m.succeeded_at = &t
}

// SucceededAt returns the value of the "succeeded_at" field in the mutation.
func (m *PaymentMutation) SucceededAt() (r time.Time, exists bool) {
	v := m.succeeded_at
	if v == nil {
		return
	}
	return *v, true
}

// OldSucceededAt returns the old "succeeded_at" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldSucceededAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSucceededAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSucceededAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSucceededAt: %w", err)
	}
	return oldValue.SucceededAt, nil
}

// ClearSucceededAt clears the value of the "succeeded_at" field.
func (m *PaymentMutation) ClearSucceededAt() {
	m.succeeded_at = nil
	m.clearedFields[payment.FieldSucceededAt] = struct{}{}
}

// SucceededAtCleared returns if the "succeeded_at" field was cleared in this mutation.
func (m *PaymentMutation) SucceededAtCleared() bool {
	_, ok := m.clearedFields[payment.FieldSucceededAt]
	return ok
}

// ResetSucceededAt resets all changes to the "succeeded_at" field.
func (m *PaymentMutation) ResetSucceededAt() {
	m.succeeded_at = nil
	delete(m.clearedFields, payment.FieldSucceededAt)
}

// SetFailedAt sets the "failed_at" field.
func (m *PaymentMutation) SetFailedAt(t time.Time) {
	m.failed_at = &t
}

// FailedAt returns the value of the "failed_at" field in the mutation.
func (m *PaymentMutation) FailedAt() (r time.Time, exists bool) {
	v := m.failed_at
	if v == nil {
		return
	}
	return *v, true
}

// OldFailedAt returns the old "failed_at" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldFailedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFailedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFailedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFailedAt: %w", err)
	}
	return oldValue.FailedAt, nil
}

// ClearFailedAt clears the value of the "failed_at" field.
func (m *PaymentMutation) ClearFailedAt() {
	m.failed_at = nil
	m.clearedFields[payment.FieldFailedAt] = struct{}{}
}

// FailedAtCleared returns if the "failed_at" field was cleared in this mutation.
func (m *PaymentMutation) FailedAtCleared() bool {
	_, ok := m.clearedFields[payment.FieldFailedAt]
	return ok
}

// ResetFailedAt resets all changes to the "failed_at" field.
func (m *PaymentMutation) ResetFailedAt() {
	m.failed_at = nil
	delete(m.clearedFields, payment.FieldFailedAt)
}

// SetRefundedAt sets the "refunded_at" field.
func (m *PaymentMutation) SetRefundedAt(t time.Time) {
	m.refunded_at = &t
}

// RefundedAt returns the value of the "refunded_at" field in the mutation.
func (m *PaymentMutation) RefundedAt() (r time.Time, exists bool) {
	v := m.refunded_at
	if v == nil {
		return
	}
	return *v, true
}

// OldRefundedAt returns the old "refunded_at" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldRefundedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRefundedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRefundedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRefundedAt: %w", err)
	}
	return oldValue.RefundedAt, nil
}

// ClearRefundedAt clears the value of the "refunded_at" field.
func (m *PaymentMutation) ClearRefundedAt() {
	m.refunded_at = nil
	m.clearedFields[payment.FieldRefundedAt] = struct{}{}
}

// RefundedAtCleared returns if the "refunded_at" field was cleared in this mutation.
func (m *PaymentMutation) RefundedAtCleared() bool {
	_, ok := m.clearedFields[payment.FieldRefundedAt]
	return ok
}

// ResetRefundedAt resets all changes to the "refunded_at" field.
func (m *PaymentMutation) ResetRefundedAt() {
	m.refunded_at = nil
	delete(m.clearedFields, payment.FieldRefundedAt)
}

// SetErrorMessage sets the "error_message" field.
func (m *PaymentMutation) SetErrorMessage(s string) {
	m.error_message = &s
}

// ErrorMessage returns the value of the "error_message" field in the mutation.
func (m *PaymentMutation) ErrorMessage() (r string, exists bool) {
	v := m.error_message
	if v == nil {
		return
	}
	return *v, true
}

// OldErrorMessage returns the old "error_message" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldErrorMessage(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldErrorMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldErrorMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldErrorMessage: %w", err)
	}
	return oldValue.ErrorMessage, nil
}

// ClearErrorMessage clears the value of the "error_message" field.
func (m *PaymentMutation) ClearErrorMessage() {
	m.error_message = nil
	m.clearedFields[payment.FieldErrorMessage] = struct{}{}
}

// ErrorMessageCleared returns if the "error_message" field was cleared in this mutation.
func (m *PaymentMutation) ErrorMessageCleared() bool {
	_, ok := m.clearedFields[payment.FieldErrorMessage]
	return ok
}

// ResetErrorMessage resets all changes to the "error_message" field.
func (m *PaymentMutation) ResetErrorMessage() {
	m.error_message = nil
	delete(m.clearedFields, payment.FieldErrorMessage)
}

// AddAttemptIDs adds the "attempts" edge to the PaymentAttempt entity by ids.
func (m *PaymentMutation) AddAttemptIDs(ids ...string) {
	if m.attempts == nil {
		m.attempts = make(map[string]struct{})
	}
	for i := range ids {
		m.attempts[ids[i]] = struct{}{}
	}
}

// ClearAttempts clears the "attempts" edge to the PaymentAttempt entity.
func (m *PaymentMutation) ClearAttempts() {
	m.clearedattempts = true
}

// AttemptsCleared reports if the "attempts" edge to the PaymentAttempt entity was cleared.
func (m *PaymentMutation) AttemptsCleared() bool {
	return m.clearedattempts
}

// RemoveAttemptIDs removes the "attempts" edge to the PaymentAttempt entity by IDs.
func (m *PaymentMutation) RemoveAttemptIDs(ids ...string) {
	if m.removedattempts == nil {
		m.removedattempts = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.attempts, ids[i])
		m.removedattempts[ids[i]] = struct{}{}
	}
}

// RemovedAttempts returns the removed IDs of the "attempts" edge to the PaymentAttempt entity.
func (m *PaymentMutation) RemovedAttemptsIDs() (ids []string) {
	for id := range m.removedattempts {
		ids = append(ids, id)
	}
	return
}

// AttemptsIDs returns the "attempts" edge IDs in the mutation.
func (m *PaymentMutation) AttemptsIDs() (ids []string) {
	for id := range m.attempts {
		ids = append(ids, id)
	}
	return
}

// ResetAttempts resets all changes to the "attempts" edge.
func (m *PaymentMutation) ResetAttempts() {
	m.attempts = nil
	m.clearedattempts = false
	m.removedattempts = nil
}

// Where appends a list predicates to the PaymentMutation builder.
func (m *PaymentMutation) Where(ps ...predicate.Payment) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PaymentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PaymentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Payment, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PaymentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PaymentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Payment).
func (m *PaymentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PaymentMutation) Fields() []string {
	fields := make([]string, 0, 21)
	if m.status != nil {
		fields = append(fields, payment.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, payment.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, payment.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, payment.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, payment.FieldUpdatedBy)
	}
	if m.idempotency_key != nil {
		fields = append(fields, payment.FieldIdempotencyKey)
	}
	if m.destination_type != nil {
		fields = append(fields, payment.FieldDestinationType)
	}
	if m.destination_id != nil {
		fields = append(fields, payment.FieldDestinationID)
	}
	if m.payment_method_type != nil {
		fields = append(fields, payment.FieldPaymentMethodType)
	}
	if m.payment_method_id != nil {
		fields = append(fields, payment.FieldPaymentMethodID)
	}
	if m.payment_gateway_provider != nil {
		fields = append(fields, payment.FieldPaymentGatewayProvider)
	}
	if m.gateway_payment_id != nil {
		fields = append(fields, payment.FieldGatewayPaymentID)
	}
	if m.amount != nil {
		fields = append(fields, payment.FieldAmount)
	}
	if m.currency != nil {
		fields = append(fields, payment.FieldCurrency)
	}
	if m.payment_status != nil {
		fields = append(fields, payment.FieldPaymentStatus)
	}
	if m.track_attempts != nil {
		fields = append(fields, payment.FieldTrackAttempts)
	}
	if m.metadata != nil {
		fields = append(fields, payment.FieldMetadata)
	}
	if m.succeeded_at != nil {
		fields = append(fields, payment.FieldSucceededAt)
	}
	if m.failed_at != nil {
		fields = append(fields, payment.FieldFailedAt)
	}
	if m.refunded_at != nil {
		fields = append(fields, payment.FieldRefundedAt)
	}
	if m.error_message != nil {
		fields = append(fields, payment.FieldErrorMessage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PaymentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case payment.FieldStatus:
		return m.Status()
	case payment.FieldCreatedAt:
		return m.CreatedAt()
	case payment.FieldUpdatedAt:
		return m.UpdatedAt()
	case payment.FieldCreatedBy:
		return m.CreatedBy()
	case payment.FieldUpdatedBy:
		return m.UpdatedBy()
	case payment.FieldIdempotencyKey:
		return m.IdempotencyKey()
	case payment.FieldDestinationType:
		return m.DestinationType()
	case payment.FieldDestinationID:
		return m.DestinationID()
	case payment.FieldPaymentMethodType:
		return m.PaymentMethodType()
	case payment.FieldPaymentMethodID:
		return m.PaymentMethodID()
	case payment.FieldPaymentGatewayProvider:
		return m.PaymentGatewayProvider()
	case payment.FieldGatewayPaymentID:
		return m.GatewayPaymentID()
	case payment.FieldAmount:
		return m.Amount()
	case payment.FieldCurrency:
		return m.Currency()
	case payment.FieldPaymentStatus:
		return m.PaymentStatus()
	case payment.FieldTrackAttempts:
		return m.TrackAttempts()
	case payment.FieldMetadata:
		return m.Metadata()
	case payment.FieldSucceededAt:
		return m.SucceededAt()
	case payment.FieldFailedAt:
		return m.FailedAt()
	case payment.FieldRefundedAt:
		return m.RefundedAt()
	case payment.FieldErrorMessage:
		return m.ErrorMessage()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PaymentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case payment.FieldStatus:
		return m.OldStatus(ctx)
	case payment.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case payment.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case payment.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case payment.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case payment.FieldIdempotencyKey:
		return m.OldIdempotencyKey(ctx)
	case payment.FieldDestinationType:
		return m.OldDestinationType(ctx)
	case payment.FieldDestinationID:
		return m.OldDestinationID(ctx)
	case payment.FieldPaymentMethodType:
		return m.OldPaymentMethodType(ctx)
	case payment.FieldPaymentMethodID:
		return m.OldPaymentMethodID(ctx)
	case payment.FieldPaymentGatewayProvider:
		return m.OldPaymentGatewayProvider(ctx)
	case payment.FieldGatewayPaymentID:
		return m.OldGatewayPaymentID(ctx)
	case payment.FieldAmount:
		return m.OldAmount(ctx)
	case payment.FieldCurrency:
		return m.OldCurrency(ctx)
	case payment.FieldPaymentStatus:
		return m.OldPaymentStatus(ctx)
	case payment.FieldTrackAttempts:
		return m.OldTrackAttempts(ctx)
	case payment.FieldMetadata:
		return m.OldMetadata(ctx)
	case payment.FieldSucceededAt:
		return m.OldSucceededAt(ctx)
	case payment.FieldFailedAt:
		return m.OldFailedAt(ctx)
	case payment.FieldRefundedAt:
		return m.OldRefundedAt(ctx)
	case payment.FieldErrorMessage:
		return m.OldErrorMessage(ctx)
	}
	return nil, fmt.Errorf("unknown Payment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PaymentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case payment.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case payment.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case payment.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case payment.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case payment.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case payment.FieldIdempotencyKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdempotencyKey(v)
		return nil
	case payment.FieldDestinationType:
		v, ok := value.(types.PaymentDestinationType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDestinationType(v)
		return nil
	case payment.FieldDestinationID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDestinationID(v)
		return nil
	case payment.FieldPaymentMethodType:
		v, ok := value.(types.PaymentMethodType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentMethodType(v)
		return nil
	case payment.FieldPaymentMethodID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentMethodID(v)
		return nil
	case payment.FieldPaymentGatewayProvider:
		v, ok := value.(types.PaymentGatewayProvider)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentGatewayProvider(v)
		return nil
	case payment.FieldGatewayPaymentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGatewayPaymentID(v)
		return nil
	case payment.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case payment.FieldCurrency:
		v, ok := value.(types.Currency)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrency(v)
		return nil
	case payment.FieldPaymentStatus:
		v, ok := value.(types.PaymentStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentStatus(v)
		return nil
	case payment.FieldTrackAttempts:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTrackAttempts(v)
		return nil
	case payment.FieldMetadata:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case payment.FieldSucceededAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSucceededAt(v)
		return nil
	case payment.FieldFailedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFailedAt(v)
		return nil
	case payment.FieldRefundedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRefundedAt(v)
		return nil
	case payment.FieldErrorMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetErrorMessage(v)
		return nil
	}
	return fmt.Errorf("unknown Payment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PaymentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PaymentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PaymentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Payment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PaymentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(payment.FieldCreatedBy) {
		fields = append(fields, payment.FieldCreatedBy)
	}
	if m.FieldCleared(payment.FieldUpdatedBy) {
		fields = append(fields, payment.FieldUpdatedBy)
	}
	if m.FieldCleared(payment.FieldPaymentMethodType) {
		fields = append(fields, payment.FieldPaymentMethodType)
	}
	if m.FieldCleared(payment.FieldPaymentMethodID) {
		fields = append(fields, payment.FieldPaymentMethodID)
	}
	if m.FieldCleared(payment.FieldGatewayPaymentID) {
		fields = append(fields, payment.FieldGatewayPaymentID)
	}
	if m.FieldCleared(payment.FieldMetadata) {
		fields = append(fields, payment.FieldMetadata)
	}
	if m.FieldCleared(payment.FieldSucceededAt) {
		fields = append(fields, payment.FieldSucceededAt)
	}
	if m.FieldCleared(payment.FieldFailedAt) {
		fields = append(fields, payment.FieldFailedAt)
	}
	if m.FieldCleared(payment.FieldRefundedAt) {
		fields = append(fields, payment.FieldRefundedAt)
	}
	if m.FieldCleared(payment.FieldErrorMessage) {
		fields = append(fields, payment.FieldErrorMessage)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PaymentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PaymentMutation) ClearField(name string) error {
	switch name {
	case payment.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case payment.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case payment.FieldPaymentMethodType:
		m.ClearPaymentMethodType()
		return nil
	case payment.FieldPaymentMethodID:
		m.ClearPaymentMethodID()
		return nil
	case payment.FieldGatewayPaymentID:
		m.ClearGatewayPaymentID()
		return nil
	case payment.FieldMetadata:
		m.ClearMetadata()
		return nil
	case payment.FieldSucceededAt:
		m.ClearSucceededAt()
		return nil
	case payment.FieldFailedAt:
		m.ClearFailedAt()
		return nil
	case payment.FieldRefundedAt:
		m.ClearRefundedAt()
		return nil
	case payment.FieldErrorMessage:
		m.ClearErrorMessage()
		return nil
	}
	return fmt.Errorf("unknown Payment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PaymentMutation) ResetField(name string) error {
	switch name {
	case payment.FieldStatus:
		m.ResetStatus()
		return nil
	case payment.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case payment.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case payment.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case payment.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case payment.FieldIdempotencyKey:
		m.ResetIdempotencyKey()
		return nil
	case payment.FieldDestinationType:
		m.ResetDestinationType()
		return nil
	case payment.FieldDestinationID:
		m.ResetDestinationID()
		return nil
	case payment.FieldPaymentMethodType:
		m.ResetPaymentMethodType()
		return nil
	case payment.FieldPaymentMethodID:
		m.ResetPaymentMethodID()
		return nil
	case payment.FieldPaymentGatewayProvider:
		m.ResetPaymentGatewayProvider()
		return nil
	case payment.FieldGatewayPaymentID:
		m.ResetGatewayPaymentID()
		return nil
	case payment.FieldAmount:
		m.ResetAmount()
		return nil
	case payment.FieldCurrency:
		m.ResetCurrency()
		return nil
	case payment.FieldPaymentStatus:
		m.ResetPaymentStatus()
		return nil
	case payment.FieldTrackAttempts:
		m.ResetTrackAttempts()
		return nil
	case payment.FieldMetadata:
		m.ResetMetadata()
		return nil
	case payment.FieldSucceededAt:
		m.ResetSucceededAt()
		return nil
	case payment.FieldFailedAt:
		m.ResetFailedAt()
		return nil
	case payment.FieldRefundedAt:
		m.ResetRefundedAt()
		return nil
	case payment.FieldErrorMessage:
		m.ResetErrorMessage()
		return nil
	}
	return fmt.Errorf("unknown Payment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PaymentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.attempts != nil {
		edges = append(edges, payment.EdgeAttempts)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PaymentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case payment.EdgeAttempts:
		ids := make([]ent.Value, 0, len(m.attempts))
		for id := range m.attempts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PaymentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedattempts != nil {
		edges = append(edges, payment.EdgeAttempts)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PaymentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case payment.EdgeAttempts:
		ids := make([]ent.Value, 0, len(m.removedattempts))
		for id := range m.removedattempts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PaymentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedattempts {
		edges = append(edges, payment.EdgeAttempts)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PaymentMutation) EdgeCleared(name string) bool {
	switch name {
	case payment.EdgeAttempts:
		return m.clearedattempts
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PaymentMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Payment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PaymentMutation) ResetEdge(name string) error {
	switch name {
	case payment.EdgeAttempts:
		m.ResetAttempts()
		return nil
	}
	return fmt.Errorf("unknown Payment edge %s", name)
}

// PaymentAttemptMutation represents an operation that mutates the PaymentAttempt nodes in the graph.
type PaymentAttemptMutation struct {
	config
	op                 Op
	typ                string
	id                 *string
	status             *string
	created_at         *time.Time
	updated_at         *time.Time
	created_by         *string
	updated_by         *string
	payment_status     *string
	attempt_number     *int
	addattempt_number  *int
	gateway_attempt_id *string
	error_message      *string
	metadata           *map[string]string
	clearedFields      map[string]struct{}
	payment            *string
	clearedpayment     bool
	done               bool
	oldValue           func(context.Context) (*PaymentAttempt, error)
	predicates         []predicate.PaymentAttempt
}

var _ ent.Mutation = (*PaymentAttemptMutation)(nil)

// paymentattemptOption allows management of the mutation configuration using functional options.
type paymentattemptOption func(*PaymentAttemptMutation)

// newPaymentAttemptMutation creates new mutation for the PaymentAttempt entity.
func newPaymentAttemptMutation(c config, op Op, opts ...paymentattemptOption) *PaymentAttemptMutation {
	m := &PaymentAttemptMutation{
		config:        c,
		op:            op,
		typ:           TypePaymentAttempt,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPaymentAttemptID sets the ID field of the mutation.
func withPaymentAttemptID(id string) paymentattemptOption {
	return func(m *PaymentAttemptMutation) {
		var (
			err   error
			once  sync.Once
			value *PaymentAttempt
		)
		m.oldValue = func(ctx context.Context) (*PaymentAttempt, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PaymentAttempt.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPaymentAttempt sets the old PaymentAttempt of the mutation.
func withPaymentAttempt(node *PaymentAttempt) paymentattemptOption {
	return func(m *PaymentAttemptMutation) {
		m.oldValue = func(context.Context) (*PaymentAttempt, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PaymentAttemptMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PaymentAttemptMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PaymentAttempt entities.
func (m *PaymentAttemptMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PaymentAttemptMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PaymentAttemptMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PaymentAttempt.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStatus sets the "status" field.
func (m *PaymentAttemptMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *PaymentAttemptMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *PaymentAttemptMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *PaymentAttemptMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PaymentAttemptMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PaymentAttemptMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PaymentAttemptMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PaymentAttemptMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PaymentAttemptMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *PaymentAttemptMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *PaymentAttemptMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *PaymentAttemptMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[paymentattempt.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *PaymentAttemptMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[paymentattempt.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *PaymentAttemptMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, paymentattempt.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *PaymentAttemptMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *PaymentAttemptMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *PaymentAttemptMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[paymentattempt.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *PaymentAttemptMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[paymentattempt.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *PaymentAttemptMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, paymentattempt.FieldUpdatedBy)
}

// SetPaymentID sets the "payment_id" field.
func (m *PaymentAttemptMutation) SetPaymentID(s string) {
	m.payment = &s
}

// PaymentID returns the value of the "payment_id" field in the mutation.
func (m *PaymentAttemptMutation) PaymentID() (r string, exists bool) {
	v := m.payment
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentID returns the old "payment_id" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldPaymentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentID: %w", err)
	}
	return oldValue.PaymentID, nil
}

// ResetPaymentID resets all changes to the "payment_id" field.
func (m *PaymentAttemptMutation) ResetPaymentID() {
	m.payment = nil
}

// SetPaymentStatus sets the "payment_status" field.
func (m *PaymentAttemptMutation) SetPaymentStatus(s string) {
	m.payment_status = &s
}

// PaymentStatus returns the value of the "payment_status" field in the mutation.
func (m *PaymentAttemptMutation) PaymentStatus() (r string, exists bool) {
	v := m.payment_status
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentStatus returns the old "payment_status" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldPaymentStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentStatus: %w", err)
	}
	return oldValue.PaymentStatus, nil
}

// ResetPaymentStatus resets all changes to the "payment_status" field.
func (m *PaymentAttemptMutation) ResetPaymentStatus() {
	m.payment_status = nil
}

// SetAttemptNumber sets the "attempt_number" field.
func (m *PaymentAttemptMutation) SetAttemptNumber(i int) {
	m.attempt_number = &i
	m.addattempt_number = nil
}

// AttemptNumber returns the value of the "attempt_number" field in the mutation.
func (m *PaymentAttemptMutation) AttemptNumber() (r int, exists bool) {
	v := m.attempt_number
	if v == nil {
		return
	}
	return *v, true
}

// OldAttemptNumber returns the old "attempt_number" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldAttemptNumber(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAttemptNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAttemptNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAttemptNumber: %w", err)
	}
	return oldValue.AttemptNumber, nil
}

// AddAttemptNumber adds i to the "attempt_number" field.
func (m *PaymentAttemptMutation) AddAttemptNumber(i int) {
	if m.addattempt_number != nil {
		*m.addattempt_number += i
	} else {
		m.addattempt_number = &i
	}
}

// AddedAttemptNumber returns the value that was added to the "attempt_number" field in this mutation.
func (m *PaymentAttemptMutation) AddedAttemptNumber() (r int, exists bool) {
	v := m.addattempt_number
	if v == nil {
		return
	}
	return *v, true
}

// ResetAttemptNumber resets all changes to the "attempt_number" field.
func (m *PaymentAttemptMutation) ResetAttemptNumber() {
	m.attempt_number = nil
	m.addattempt_number = nil
}

// SetGatewayAttemptID sets the "gateway_attempt_id" field.
func (m *PaymentAttemptMutation) SetGatewayAttemptID(s string) {
	m.gateway_attempt_id = &s
}

// GatewayAttemptID returns the value of the "gateway_attempt_id" field in the mutation.
func (m *PaymentAttemptMutation) GatewayAttemptID() (r string, exists bool) {
	v := m.gateway_attempt_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGatewayAttemptID returns the old "gateway_attempt_id" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldGatewayAttemptID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGatewayAttemptID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGatewayAttemptID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGatewayAttemptID: %w", err)
	}
	return oldValue.GatewayAttemptID, nil
}

// ClearGatewayAttemptID clears the value of the "gateway_attempt_id" field.
func (m *PaymentAttemptMutation) ClearGatewayAttemptID() {
	m.gateway_attempt_id = nil
	m.clearedFields[paymentattempt.FieldGatewayAttemptID] = struct{}{}
}

// GatewayAttemptIDCleared returns if the "gateway_attempt_id" field was cleared in this mutation.
func (m *PaymentAttemptMutation) GatewayAttemptIDCleared() bool {
	_, ok := m.clearedFields[paymentattempt.FieldGatewayAttemptID]
	return ok
}

// ResetGatewayAttemptID resets all changes to the "gateway_attempt_id" field.
func (m *PaymentAttemptMutation) ResetGatewayAttemptID() {
	m.gateway_attempt_id = nil
	delete(m.clearedFields, paymentattempt.FieldGatewayAttemptID)
}

// SetErrorMessage sets the "error_message" field.
func (m *PaymentAttemptMutation) SetErrorMessage(s string) {
	m.error_message = &s
}

// ErrorMessage returns the value of the "error_message" field in the mutation.
func (m *PaymentAttemptMutation) ErrorMessage() (r string, exists bool) {
	v := m.error_message
	if v == nil {
		return
	}
	return *v, true
}

// OldErrorMessage returns the old "error_message" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldErrorMessage(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldErrorMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldErrorMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldErrorMessage: %w", err)
	}
	return oldValue.ErrorMessage, nil
}

// ClearErrorMessage clears the value of the "error_message" field.
func (m *PaymentAttemptMutation) ClearErrorMessage() {
	m.error_message = nil
	m.clearedFields[paymentattempt.FieldErrorMessage] = struct{}{}
}

// ErrorMessageCleared returns if the "error_message" field was cleared in this mutation.
func (m *PaymentAttemptMutation) ErrorMessageCleared() bool {
	_, ok := m.clearedFields[paymentattempt.FieldErrorMessage]
	return ok
}

// ResetErrorMessage resets all changes to the "error_message" field.
func (m *PaymentAttemptMutation) ResetErrorMessage() {
	m.error_message = nil
	delete(m.clearedFields, paymentattempt.FieldErrorMessage)
}

// SetMetadata sets the "metadata" field.
func (m *PaymentAttemptMutation) SetMetadata(value map[string]string) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *PaymentAttemptMutation) Metadata() (r map[string]string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the PaymentAttempt entity.
// If the PaymentAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentAttemptMutation) OldMetadata(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *PaymentAttemptMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[paymentattempt.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *PaymentAttemptMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[paymentattempt.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *PaymentAttemptMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, paymentattempt.FieldMetadata)
}

// ClearPayment clears the "payment" edge to the Payment entity.
func (m *PaymentAttemptMutation) ClearPayment() {
	m.clearedpayment = true
	m.clearedFields[paymentattempt.FieldPaymentID] = struct{}{}
}

// PaymentCleared reports if the "payment" edge to the Payment entity was cleared.
func (m *PaymentAttemptMutation) PaymentCleared() bool {
	return m.clearedpayment
}

// PaymentIDs returns the "payment" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PaymentID instead. It exists only for internal usage by the builders.
func (m *PaymentAttemptMutation) PaymentIDs() (ids []string) {
	if id := m.payment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPayment resets all changes to the "payment" edge.
func (m *PaymentAttemptMutation) ResetPayment() {
	m.payment = nil
	m.clearedpayment = false
}

// Where appends a list predicates to the PaymentAttemptMutation builder.
func (m *PaymentAttemptMutation) Where(ps ...predicate.PaymentAttempt) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PaymentAttemptMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PaymentAttemptMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PaymentAttempt, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PaymentAttemptMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PaymentAttemptMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PaymentAttempt).
func (m *PaymentAttemptMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PaymentAttemptMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.status != nil {
		fields = append(fields, paymentattempt.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, paymentattempt.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, paymentattempt.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, paymentattempt.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, paymentattempt.FieldUpdatedBy)
	}
	if m.payment != nil {
		fields = append(fields, paymentattempt.FieldPaymentID)
	}
	if m.payment_status != nil {
		fields = append(fields, paymentattempt.FieldPaymentStatus)
	}
	if m.attempt_number != nil {
		fields = append(fields, paymentattempt.FieldAttemptNumber)
	}
	if m.gateway_attempt_id != nil {
		fields = append(fields, paymentattempt.FieldGatewayAttemptID)
	}
	if m.error_message != nil {
		fields = append(fields, paymentattempt.FieldErrorMessage)
	}
	if m.metadata != nil {
		fields = append(fields, paymentattempt.FieldMetadata)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PaymentAttemptMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case paymentattempt.FieldStatus:
		return m.Status()
	case paymentattempt.FieldCreatedAt:
		return m.CreatedAt()
	case paymentattempt.FieldUpdatedAt:
		return m.UpdatedAt()
	case paymentattempt.FieldCreatedBy:
		return m.CreatedBy()
	case paymentattempt.FieldUpdatedBy:
		return m.UpdatedBy()
	case paymentattempt.FieldPaymentID:
		return m.PaymentID()
	case paymentattempt.FieldPaymentStatus:
		return m.PaymentStatus()
	case paymentattempt.FieldAttemptNumber:
		return m.AttemptNumber()
	case paymentattempt.FieldGatewayAttemptID:
		return m.GatewayAttemptID()
	case paymentattempt.FieldErrorMessage:
		return m.ErrorMessage()
	case paymentattempt.FieldMetadata:
		return m.Metadata()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PaymentAttemptMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case paymentattempt.FieldStatus:
		return m.OldStatus(ctx)
	case paymentattempt.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case paymentattempt.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case paymentattempt.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case paymentattempt.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case paymentattempt.FieldPaymentID:
		return m.OldPaymentID(ctx)
	case paymentattempt.FieldPaymentStatus:
		return m.OldPaymentStatus(ctx)
	case paymentattempt.FieldAttemptNumber:
		return m.OldAttemptNumber(ctx)
	case paymentattempt.FieldGatewayAttemptID:
		return m.OldGatewayAttemptID(ctx)
	case paymentattempt.FieldErrorMessage:
		return m.OldErrorMessage(ctx)
	case paymentattempt.FieldMetadata:
		return m.OldMetadata(ctx)
	}
	return nil, fmt.Errorf("unknown PaymentAttempt field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PaymentAttemptMutation) SetField(name string, value ent.Value) error {
	switch name {
	case paymentattempt.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case paymentattempt.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case paymentattempt.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case paymentattempt.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case paymentattempt.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case paymentattempt.FieldPaymentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentID(v)
		return nil
	case paymentattempt.FieldPaymentStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentStatus(v)
		return nil
	case paymentattempt.FieldAttemptNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAttemptNumber(v)
		return nil
	case paymentattempt.FieldGatewayAttemptID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGatewayAttemptID(v)
		return nil
	case paymentattempt.FieldErrorMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetErrorMessage(v)
		return nil
	case paymentattempt.FieldMetadata:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	}
	return fmt.Errorf("unknown PaymentAttempt field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PaymentAttemptMutation) AddedFields() []string {
	var fields []string
	if m.addattempt_number != nil {
		fields = append(fields, paymentattempt.FieldAttemptNumber)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PaymentAttemptMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case paymentattempt.FieldAttemptNumber:
		return m.AddedAttemptNumber()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PaymentAttemptMutation) AddField(name string, value ent.Value) error {
	switch name {
	case paymentattempt.FieldAttemptNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAttemptNumber(v)
		return nil
	}
	return fmt.Errorf("unknown PaymentAttempt numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PaymentAttemptMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(paymentattempt.FieldCreatedBy) {
		fields = append(fields, paymentattempt.FieldCreatedBy)
	}
	if m.FieldCleared(paymentattempt.FieldUpdatedBy) {
		fields = append(fields, paymentattempt.FieldUpdatedBy)
	}
	if m.FieldCleared(paymentattempt.FieldGatewayAttemptID) {
		fields = append(fields, paymentattempt.FieldGatewayAttemptID)
	}
	if m.FieldCleared(paymentattempt.FieldErrorMessage) {
		fields = append(fields, paymentattempt.FieldErrorMessage)
	}
	if m.FieldCleared(paymentattempt.FieldMetadata) {
		fields = append(fields, paymentattempt.FieldMetadata)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PaymentAttemptMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PaymentAttemptMutation) ClearField(name string) error {
	switch name {
	case paymentattempt.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case paymentattempt.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case paymentattempt.FieldGatewayAttemptID:
		m.ClearGatewayAttemptID()
		return nil
	case paymentattempt.FieldErrorMessage:
		m.ClearErrorMessage()
		return nil
	case paymentattempt.FieldMetadata:
		m.ClearMetadata()
		return nil
	}
	return fmt.Errorf("unknown PaymentAttempt nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PaymentAttemptMutation) ResetField(name string) error {
	switch name {
	case paymentattempt.FieldStatus:
		m.ResetStatus()
		return nil
	case paymentattempt.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case paymentattempt.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case paymentattempt.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case paymentattempt.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case paymentattempt.FieldPaymentID:
		m.ResetPaymentID()
		return nil
	case paymentattempt.FieldPaymentStatus:
		m.ResetPaymentStatus()
		return nil
	case paymentattempt.FieldAttemptNumber:
		m.ResetAttemptNumber()
		return nil
	case paymentattempt.FieldGatewayAttemptID:
		m.ResetGatewayAttemptID()
		return nil
	case paymentattempt.FieldErrorMessage:
		m.ResetErrorMessage()
		return nil
	case paymentattempt.FieldMetadata:
		m.ResetMetadata()
		return nil
	}
	return fmt.Errorf("unknown PaymentAttempt field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PaymentAttemptMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.payment != nil {
		edges = append(edges, paymentattempt.EdgePayment)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PaymentAttemptMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case paymentattempt.EdgePayment:
		if id := m.payment; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PaymentAttemptMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PaymentAttemptMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PaymentAttemptMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpayment {
		edges = append(edges, paymentattempt.EdgePayment)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PaymentAttemptMutation) EdgeCleared(name string) bool {
	switch name {
	case paymentattempt.EdgePayment:
		return m.clearedpayment
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PaymentAttemptMutation) ClearEdge(name string) error {
	switch name {
	case paymentattempt.EdgePayment:
		m.ClearPayment()
		return nil
	}
	return fmt.Errorf("unknown PaymentAttempt unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PaymentAttemptMutation) ResetEdge(name string) error {
	switch name {
	case paymentattempt.EdgePayment:
		m.ResetPayment()
		return nil
	}
	return fmt.Errorf("unknown PaymentAttempt edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *string
	status        *string
	created_at    *time.Time
	updated_at    *time.Time
	created_by    *string
	updated_by    *string
	full_name     *string
	email         *string
	phone_number  *string
	role          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id string) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStatus sets the "status" field.
func (m *UserMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *UserMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *UserMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *UserMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *UserMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *UserMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[user.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *UserMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[user.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *UserMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, user.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *UserMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *UserMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *UserMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[user.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *UserMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[user.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *UserMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, user.FieldUpdatedBy)
}

// SetFullName sets the "full_name" field.
func (m *UserMutation) SetFullName(s string) {
	m.full_name = &s
}

// FullName returns the value of the "full_name" field in the mutation.
func (m *UserMutation) FullName() (r string, exists bool) {
	v := m.full_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFullName returns the old "full_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFullName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFullName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFullName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFullName: %w", err)
	}
	return oldValue.FullName, nil
}

// ResetFullName resets all changes to the "full_name" field.
func (m *UserMutation) ResetFullName() {
	m.full_name = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPhoneNumber sets the "phone_number" field.
func (m *UserMutation) SetPhoneNumber(s string) {
	m.phone_number = &s
}

// PhoneNumber returns the value of the "phone_number" field in the mutation.
func (m *UserMutation) PhoneNumber() (r string, exists bool) {
	v := m.phone_number
	if v == nil {
		return
	}
	return *v, true
}

// OldPhoneNumber returns the old "phone_number" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPhoneNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhoneNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhoneNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhoneNumber: %w", err)
	}
	return oldValue.PhoneNumber, nil
}

// ResetPhoneNumber resets all changes to the "phone_number" field.
func (m *UserMutation) ResetPhoneNumber() {
	m.phone_number = nil
}

// SetRole sets the "role" field.
func (m *UserMutation) SetRole(s string) {
	m.role = &s
}

// Role returns the value of the "role" field in the mutation.
func (m *UserMutation) Role() (r string, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRole(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *UserMutation) ResetRole() {
	m.role = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.status != nil {
		fields = append(fields, user.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, user.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, user.FieldUpdatedBy)
	}
	if m.full_name != nil {
		fields = append(fields, user.FieldFullName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.phone_number != nil {
		fields = append(fields, user.FieldPhoneNumber)
	}
	if m.role != nil {
		fields = append(fields, user.FieldRole)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldStatus:
		return m.Status()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldCreatedBy:
		return m.CreatedBy()
	case user.FieldUpdatedBy:
		return m.UpdatedBy()
	case user.FieldFullName:
		return m.FullName()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPhoneNumber:
		return m.PhoneNumber()
	case user.FieldRole:
		return m.Role()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldStatus:
		return m.OldStatus(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case user.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case user.FieldFullName:
		return m.OldFullName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPhoneNumber:
		return m.OldPhoneNumber(ctx)
	case user.FieldRole:
		return m.OldRole(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case user.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case user.FieldFullName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFullName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPhoneNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhoneNumber(v)
		return nil
	case user.FieldRole:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldCreatedBy) {
		fields = append(fields, user.FieldCreatedBy)
	}
	if m.FieldCleared(user.FieldUpdatedBy) {
		fields = append(fields, user.FieldUpdatedBy)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case user.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldStatus:
		m.ResetStatus()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case user.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case user.FieldFullName:
		m.ResetFullName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPhoneNumber:
		m.ResetPhoneNumber()
		return nil
	case user.FieldRole:
		m.ResetRole()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
