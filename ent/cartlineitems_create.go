// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/omkar273/codegeeky/ent/cart"
	"github.com/omkar273/codegeeky/ent/cartlineitems"
	"github.com/shopspring/decimal"
)

// CartLineItemsCreate is the builder for creating a CartLineItems entity.
type CartLineItemsCreate struct {
	config
	mutation *CartLineItemsMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (clic *CartLineItemsCreate) SetStatus(s string) *CartLineItemsCreate {
	clic.mutation.SetStatus(s)
	return clic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (clic *CartLineItemsCreate) SetNillableStatus(s *string) *CartLineItemsCreate {
	if s != nil {
		clic.SetStatus(*s)
	}
	return clic
}

// SetCreatedAt sets the "created_at" field.
func (clic *CartLineItemsCreate) SetCreatedAt(t time.Time) *CartLineItemsCreate {
	clic.mutation.SetCreatedAt(t)
	return clic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (clic *CartLineItemsCreate) SetNillableCreatedAt(t *time.Time) *CartLineItemsCreate {
	if t != nil {
		clic.SetCreatedAt(*t)
	}
	return clic
}

// SetUpdatedAt sets the "updated_at" field.
func (clic *CartLineItemsCreate) SetUpdatedAt(t time.Time) *CartLineItemsCreate {
	clic.mutation.SetUpdatedAt(t)
	return clic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (clic *CartLineItemsCreate) SetNillableUpdatedAt(t *time.Time) *CartLineItemsCreate {
	if t != nil {
		clic.SetUpdatedAt(*t)
	}
	return clic
}

// SetCreatedBy sets the "created_by" field.
func (clic *CartLineItemsCreate) SetCreatedBy(s string) *CartLineItemsCreate {
	clic.mutation.SetCreatedBy(s)
	return clic
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (clic *CartLineItemsCreate) SetNillableCreatedBy(s *string) *CartLineItemsCreate {
	if s != nil {
		clic.SetCreatedBy(*s)
	}
	return clic
}

// SetUpdatedBy sets the "updated_by" field.
func (clic *CartLineItemsCreate) SetUpdatedBy(s string) *CartLineItemsCreate {
	clic.mutation.SetUpdatedBy(s)
	return clic
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (clic *CartLineItemsCreate) SetNillableUpdatedBy(s *string) *CartLineItemsCreate {
	if s != nil {
		clic.SetUpdatedBy(*s)
	}
	return clic
}

// SetMetadata sets the "metadata" field.
func (clic *CartLineItemsCreate) SetMetadata(m map[string]string) *CartLineItemsCreate {
	clic.mutation.SetMetadata(m)
	return clic
}

// SetCartID sets the "cart_id" field.
func (clic *CartLineItemsCreate) SetCartID(s string) *CartLineItemsCreate {
	clic.mutation.SetCartID(s)
	return clic
}

// SetEntityID sets the "entity_id" field.
func (clic *CartLineItemsCreate) SetEntityID(s string) *CartLineItemsCreate {
	clic.mutation.SetEntityID(s)
	return clic
}

// SetEntityType sets the "entity_type" field.
func (clic *CartLineItemsCreate) SetEntityType(s string) *CartLineItemsCreate {
	clic.mutation.SetEntityType(s)
	return clic
}

// SetQuantity sets the "quantity" field.
func (clic *CartLineItemsCreate) SetQuantity(i int) *CartLineItemsCreate {
	clic.mutation.SetQuantity(i)
	return clic
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (clic *CartLineItemsCreate) SetNillableQuantity(i *int) *CartLineItemsCreate {
	if i != nil {
		clic.SetQuantity(*i)
	}
	return clic
}

// SetPerUnitPrice sets the "per_unit_price" field.
func (clic *CartLineItemsCreate) SetPerUnitPrice(d decimal.Decimal) *CartLineItemsCreate {
	clic.mutation.SetPerUnitPrice(d)
	return clic
}

// SetNillablePerUnitPrice sets the "per_unit_price" field if the given value is not nil.
func (clic *CartLineItemsCreate) SetNillablePerUnitPrice(d *decimal.Decimal) *CartLineItemsCreate {
	if d != nil {
		clic.SetPerUnitPrice(*d)
	}
	return clic
}

// SetTaxAmount sets the "tax_amount" field.
func (clic *CartLineItemsCreate) SetTaxAmount(d decimal.Decimal) *CartLineItemsCreate {
	clic.mutation.SetTaxAmount(d)
	return clic
}

// SetNillableTaxAmount sets the "tax_amount" field if the given value is not nil.
func (clic *CartLineItemsCreate) SetNillableTaxAmount(d *decimal.Decimal) *CartLineItemsCreate {
	if d != nil {
		clic.SetTaxAmount(*d)
	}
	return clic
}

// SetDiscountAmount sets the "discount_amount" field.
func (clic *CartLineItemsCreate) SetDiscountAmount(d decimal.Decimal) *CartLineItemsCreate {
	clic.mutation.SetDiscountAmount(d)
	return clic
}

// SetNillableDiscountAmount sets the "discount_amount" field if the given value is not nil.
func (clic *CartLineItemsCreate) SetNillableDiscountAmount(d *decimal.Decimal) *CartLineItemsCreate {
	if d != nil {
		clic.SetDiscountAmount(*d)
	}
	return clic
}

// SetSubtotal sets the "subtotal" field.
func (clic *CartLineItemsCreate) SetSubtotal(d decimal.Decimal) *CartLineItemsCreate {
	clic.mutation.SetSubtotal(d)
	return clic
}

// SetNillableSubtotal sets the "subtotal" field if the given value is not nil.
func (clic *CartLineItemsCreate) SetNillableSubtotal(d *decimal.Decimal) *CartLineItemsCreate {
	if d != nil {
		clic.SetSubtotal(*d)
	}
	return clic
}

// SetTotal sets the "total" field.
func (clic *CartLineItemsCreate) SetTotal(d decimal.Decimal) *CartLineItemsCreate {
	clic.mutation.SetTotal(d)
	return clic
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (clic *CartLineItemsCreate) SetNillableTotal(d *decimal.Decimal) *CartLineItemsCreate {
	if d != nil {
		clic.SetTotal(*d)
	}
	return clic
}

// SetID sets the "id" field.
func (clic *CartLineItemsCreate) SetID(s string) *CartLineItemsCreate {
	clic.mutation.SetID(s)
	return clic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (clic *CartLineItemsCreate) SetNillableID(s *string) *CartLineItemsCreate {
	if s != nil {
		clic.SetID(*s)
	}
	return clic
}

// SetCart sets the "cart" edge to the Cart entity.
func (clic *CartLineItemsCreate) SetCart(c *Cart) *CartLineItemsCreate {
	return clic.SetCartID(c.ID)
}

// Mutation returns the CartLineItemsMutation object of the builder.
func (clic *CartLineItemsCreate) Mutation() *CartLineItemsMutation {
	return clic.mutation
}

// Save creates the CartLineItems in the database.
func (clic *CartLineItemsCreate) Save(ctx context.Context) (*CartLineItems, error) {
	clic.defaults()
	return withHooks(ctx, clic.sqlSave, clic.mutation, clic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (clic *CartLineItemsCreate) SaveX(ctx context.Context) *CartLineItems {
	v, err := clic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clic *CartLineItemsCreate) Exec(ctx context.Context) error {
	_, err := clic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clic *CartLineItemsCreate) ExecX(ctx context.Context) {
	if err := clic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (clic *CartLineItemsCreate) defaults() {
	if _, ok := clic.mutation.Status(); !ok {
		v := cartlineitems.DefaultStatus
		clic.mutation.SetStatus(v)
	}
	if _, ok := clic.mutation.CreatedAt(); !ok {
		v := cartlineitems.DefaultCreatedAt()
		clic.mutation.SetCreatedAt(v)
	}
	if _, ok := clic.mutation.UpdatedAt(); !ok {
		v := cartlineitems.DefaultUpdatedAt()
		clic.mutation.SetUpdatedAt(v)
	}
	if _, ok := clic.mutation.Metadata(); !ok {
		v := cartlineitems.DefaultMetadata
		clic.mutation.SetMetadata(v)
	}
	if _, ok := clic.mutation.Quantity(); !ok {
		v := cartlineitems.DefaultQuantity
		clic.mutation.SetQuantity(v)
	}
	if _, ok := clic.mutation.PerUnitPrice(); !ok {
		v := cartlineitems.DefaultPerUnitPrice
		clic.mutation.SetPerUnitPrice(v)
	}
	if _, ok := clic.mutation.TaxAmount(); !ok {
		v := cartlineitems.DefaultTaxAmount
		clic.mutation.SetTaxAmount(v)
	}
	if _, ok := clic.mutation.DiscountAmount(); !ok {
		v := cartlineitems.DefaultDiscountAmount
		clic.mutation.SetDiscountAmount(v)
	}
	if _, ok := clic.mutation.Subtotal(); !ok {
		v := cartlineitems.DefaultSubtotal
		clic.mutation.SetSubtotal(v)
	}
	if _, ok := clic.mutation.Total(); !ok {
		v := cartlineitems.DefaultTotal
		clic.mutation.SetTotal(v)
	}
	if _, ok := clic.mutation.ID(); !ok {
		v := cartlineitems.DefaultID()
		clic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (clic *CartLineItemsCreate) check() error {
	if _, ok := clic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "CartLineItems.status"`)}
	}
	if _, ok := clic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CartLineItems.created_at"`)}
	}
	if _, ok := clic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CartLineItems.updated_at"`)}
	}
	if _, ok := clic.mutation.CartID(); !ok {
		return &ValidationError{Name: "cart_id", err: errors.New(`ent: missing required field "CartLineItems.cart_id"`)}
	}
	if v, ok := clic.mutation.CartID(); ok {
		if err := cartlineitems.CartIDValidator(v); err != nil {
			return &ValidationError{Name: "cart_id", err: fmt.Errorf(`ent: validator failed for field "CartLineItems.cart_id": %w`, err)}
		}
	}
	if _, ok := clic.mutation.EntityID(); !ok {
		return &ValidationError{Name: "entity_id", err: errors.New(`ent: missing required field "CartLineItems.entity_id"`)}
	}
	if v, ok := clic.mutation.EntityID(); ok {
		if err := cartlineitems.EntityIDValidator(v); err != nil {
			return &ValidationError{Name: "entity_id", err: fmt.Errorf(`ent: validator failed for field "CartLineItems.entity_id": %w`, err)}
		}
	}
	if _, ok := clic.mutation.EntityType(); !ok {
		return &ValidationError{Name: "entity_type", err: errors.New(`ent: missing required field "CartLineItems.entity_type"`)}
	}
	if v, ok := clic.mutation.EntityType(); ok {
		if err := cartlineitems.EntityTypeValidator(v); err != nil {
			return &ValidationError{Name: "entity_type", err: fmt.Errorf(`ent: validator failed for field "CartLineItems.entity_type": %w`, err)}
		}
	}
	if _, ok := clic.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`ent: missing required field "CartLineItems.quantity"`)}
	}
	if _, ok := clic.mutation.PerUnitPrice(); !ok {
		return &ValidationError{Name: "per_unit_price", err: errors.New(`ent: missing required field "CartLineItems.per_unit_price"`)}
	}
	if _, ok := clic.mutation.TaxAmount(); !ok {
		return &ValidationError{Name: "tax_amount", err: errors.New(`ent: missing required field "CartLineItems.tax_amount"`)}
	}
	if _, ok := clic.mutation.DiscountAmount(); !ok {
		return &ValidationError{Name: "discount_amount", err: errors.New(`ent: missing required field "CartLineItems.discount_amount"`)}
	}
	if _, ok := clic.mutation.Subtotal(); !ok {
		return &ValidationError{Name: "subtotal", err: errors.New(`ent: missing required field "CartLineItems.subtotal"`)}
	}
	if _, ok := clic.mutation.Total(); !ok {
		return &ValidationError{Name: "total", err: errors.New(`ent: missing required field "CartLineItems.total"`)}
	}
	if len(clic.mutation.CartIDs()) == 0 {
		return &ValidationError{Name: "cart", err: errors.New(`ent: missing required edge "CartLineItems.cart"`)}
	}
	return nil
}

func (clic *CartLineItemsCreate) sqlSave(ctx context.Context) (*CartLineItems, error) {
	if err := clic.check(); err != nil {
		return nil, err
	}
	_node, _spec := clic.createSpec()
	if err := sqlgraph.CreateNode(ctx, clic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected CartLineItems.ID type: %T", _spec.ID.Value)
		}
	}
	clic.mutation.id = &_node.ID
	clic.mutation.done = true
	return _node, nil
}

func (clic *CartLineItemsCreate) createSpec() (*CartLineItems, *sqlgraph.CreateSpec) {
	var (
		_node = &CartLineItems{config: clic.config}
		_spec = sqlgraph.NewCreateSpec(cartlineitems.Table, sqlgraph.NewFieldSpec(cartlineitems.FieldID, field.TypeString))
	)
	if id, ok := clic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := clic.mutation.Status(); ok {
		_spec.SetField(cartlineitems.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := clic.mutation.CreatedAt(); ok {
		_spec.SetField(cartlineitems.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := clic.mutation.UpdatedAt(); ok {
		_spec.SetField(cartlineitems.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := clic.mutation.CreatedBy(); ok {
		_spec.SetField(cartlineitems.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := clic.mutation.UpdatedBy(); ok {
		_spec.SetField(cartlineitems.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := clic.mutation.Metadata(); ok {
		_spec.SetField(cartlineitems.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := clic.mutation.EntityID(); ok {
		_spec.SetField(cartlineitems.FieldEntityID, field.TypeString, value)
		_node.EntityID = value
	}
	if value, ok := clic.mutation.EntityType(); ok {
		_spec.SetField(cartlineitems.FieldEntityType, field.TypeString, value)
		_node.EntityType = value
	}
	if value, ok := clic.mutation.Quantity(); ok {
		_spec.SetField(cartlineitems.FieldQuantity, field.TypeInt, value)
		_node.Quantity = value
	}
	if value, ok := clic.mutation.PerUnitPrice(); ok {
		_spec.SetField(cartlineitems.FieldPerUnitPrice, field.TypeOther, value)
		_node.PerUnitPrice = value
	}
	if value, ok := clic.mutation.TaxAmount(); ok {
		_spec.SetField(cartlineitems.FieldTaxAmount, field.TypeOther, value)
		_node.TaxAmount = value
	}
	if value, ok := clic.mutation.DiscountAmount(); ok {
		_spec.SetField(cartlineitems.FieldDiscountAmount, field.TypeOther, value)
		_node.DiscountAmount = value
	}
	if value, ok := clic.mutation.Subtotal(); ok {
		_spec.SetField(cartlineitems.FieldSubtotal, field.TypeOther, value)
		_node.Subtotal = value
	}
	if value, ok := clic.mutation.Total(); ok {
		_spec.SetField(cartlineitems.FieldTotal, field.TypeOther, value)
		_node.Total = value
	}
	if nodes := clic.mutation.CartIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartlineitems.CartTable,
			Columns: []string{cartlineitems.CartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cart.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CartID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CartLineItemsCreateBulk is the builder for creating many CartLineItems entities in bulk.
type CartLineItemsCreateBulk struct {
	config
	err      error
	builders []*CartLineItemsCreate
}

// Save creates the CartLineItems entities in the database.
func (clicb *CartLineItemsCreateBulk) Save(ctx context.Context) ([]*CartLineItems, error) {
	if clicb.err != nil {
		return nil, clicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(clicb.builders))
	nodes := make([]*CartLineItems, len(clicb.builders))
	mutators := make([]Mutator, len(clicb.builders))
	for i := range clicb.builders {
		func(i int, root context.Context) {
			builder := clicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CartLineItemsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, clicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, clicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, clicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (clicb *CartLineItemsCreateBulk) SaveX(ctx context.Context) []*CartLineItems {
	v, err := clicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clicb *CartLineItemsCreateBulk) Exec(ctx context.Context) error {
	_, err := clicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clicb *CartLineItemsCreateBulk) ExecX(ctx context.Context) {
	if err := clicb.Exec(ctx); err != nil {
		panic(err)
	}
}
