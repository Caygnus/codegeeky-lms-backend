// Code generated by ent, DO NOT EDIT.

package cartlineitems

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the cartlineitems type in the database.
	Label = "cart_line_items"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldCartID holds the string denoting the cart_id field in the database.
	FieldCartID = "cart_id"
	// FieldEntityID holds the string denoting the entity_id field in the database.
	FieldEntityID = "entity_id"
	// FieldEntityType holds the string denoting the entity_type field in the database.
	FieldEntityType = "entity_type"
	// FieldQuantity holds the string denoting the quantity field in the database.
	FieldQuantity = "quantity"
	// FieldPerUnitPrice holds the string denoting the per_unit_price field in the database.
	FieldPerUnitPrice = "per_unit_price"
	// FieldTaxAmount holds the string denoting the tax_amount field in the database.
	FieldTaxAmount = "tax_amount"
	// FieldDiscountAmount holds the string denoting the discount_amount field in the database.
	FieldDiscountAmount = "discount_amount"
	// FieldSubtotal holds the string denoting the subtotal field in the database.
	FieldSubtotal = "subtotal"
	// FieldTotal holds the string denoting the total field in the database.
	FieldTotal = "total"
	// EdgeCart holds the string denoting the cart edge name in mutations.
	EdgeCart = "cart"
	// Table holds the table name of the cartlineitems in the database.
	Table = "cart_line_items"
	// CartTable is the table that holds the cart relation/edge.
	CartTable = "cart_line_items"
	// CartInverseTable is the table name for the Cart entity.
	// It exists in this package in order to avoid circular dependency with the "cart" package.
	CartInverseTable = "carts"
	// CartColumn is the table column denoting the cart relation/edge.
	CartColumn = "cart_id"
)

// Columns holds all SQL columns for cartlineitems fields.
var Columns = []string{
	FieldID,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldMetadata,
	FieldCartID,
	FieldEntityID,
	FieldEntityType,
	FieldQuantity,
	FieldPerUnitPrice,
	FieldTaxAmount,
	FieldDiscountAmount,
	FieldSubtotal,
	FieldTotal,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultMetadata holds the default value on creation for the "metadata" field.
	DefaultMetadata map[string]string
	// CartIDValidator is a validator for the "cart_id" field. It is called by the builders before save.
	CartIDValidator func(string) error
	// EntityIDValidator is a validator for the "entity_id" field. It is called by the builders before save.
	EntityIDValidator func(string) error
	// EntityTypeValidator is a validator for the "entity_type" field. It is called by the builders before save.
	EntityTypeValidator func(string) error
	// DefaultQuantity holds the default value on creation for the "quantity" field.
	DefaultQuantity int
	// DefaultPerUnitPrice holds the default value on creation for the "per_unit_price" field.
	DefaultPerUnitPrice decimal.Decimal
	// DefaultTaxAmount holds the default value on creation for the "tax_amount" field.
	DefaultTaxAmount decimal.Decimal
	// DefaultDiscountAmount holds the default value on creation for the "discount_amount" field.
	DefaultDiscountAmount decimal.Decimal
	// DefaultSubtotal holds the default value on creation for the "subtotal" field.
	DefaultSubtotal decimal.Decimal
	// DefaultTotal holds the default value on creation for the "total" field.
	DefaultTotal decimal.Decimal
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the CartLineItems queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCartID orders the results by the cart_id field.
func ByCartID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCartID, opts...).ToFunc()
}

// ByEntityID orders the results by the entity_id field.
func ByEntityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntityID, opts...).ToFunc()
}

// ByEntityType orders the results by the entity_type field.
func ByEntityType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntityType, opts...).ToFunc()
}

// ByQuantity orders the results by the quantity field.
func ByQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuantity, opts...).ToFunc()
}

// ByPerUnitPrice orders the results by the per_unit_price field.
func ByPerUnitPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPerUnitPrice, opts...).ToFunc()
}

// ByTaxAmount orders the results by the tax_amount field.
func ByTaxAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaxAmount, opts...).ToFunc()
}

// ByDiscountAmount orders the results by the discount_amount field.
func ByDiscountAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscountAmount, opts...).ToFunc()
}

// BySubtotal orders the results by the subtotal field.
func BySubtotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubtotal, opts...).ToFunc()
}

// ByTotal orders the results by the total field.
func ByTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotal, opts...).ToFunc()
}

// ByCartField orders the results by cart field.
func ByCartField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCartStep(), sql.OrderByField(field, opts...))
	}
}
func newCartStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CartInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CartTable, CartColumn),
	)
}
