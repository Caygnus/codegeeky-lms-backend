// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/omkar273/codegeeky/ent/fileupload"
)

// FileUpload is the model entity for the FileUpload schema.
type FileUpload struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// FileName holds the value of the "file_name" field.
	FileName string `json:"file_name,omitempty"`
	// FileType holds the value of the "file_type" field.
	FileType string `json:"file_type,omitempty"`
	// Extension holds the value of the "extension" field.
	Extension string `json:"extension,omitempty"`
	// MimeType holds the value of the "mime_type" field.
	MimeType string `json:"mime_type,omitempty"`
	// PublicURL holds the value of the "public_url" field.
	PublicURL string `json:"public_url,omitempty"`
	// SecureURL holds the value of the "secure_url" field.
	SecureURL *string `json:"secure_url,omitempty"`
	// Provider holds the value of the "provider" field.
	Provider string `json:"provider,omitempty"`
	// ExternalID holds the value of the "external_id" field.
	ExternalID string `json:"external_id,omitempty"`
	// SizeBytes holds the value of the "size_bytes" field.
	SizeBytes int64 `json:"size_bytes,omitempty"`
	// FileSize holds the value of the "file_size" field.
	FileSize     *string `json:"file_size,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FileUpload) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fileupload.FieldSizeBytes:
			values[i] = new(sql.NullInt64)
		case fileupload.FieldID, fileupload.FieldStatus, fileupload.FieldCreatedBy, fileupload.FieldUpdatedBy, fileupload.FieldFileName, fileupload.FieldFileType, fileupload.FieldExtension, fileupload.FieldMimeType, fileupload.FieldPublicURL, fileupload.FieldSecureURL, fileupload.FieldProvider, fileupload.FieldExternalID, fileupload.FieldFileSize:
			values[i] = new(sql.NullString)
		case fileupload.FieldCreatedAt, fileupload.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FileUpload fields.
func (fu *FileUpload) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fileupload.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				fu.ID = value.String
			}
		case fileupload.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				fu.Status = value.String
			}
		case fileupload.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fu.CreatedAt = value.Time
			}
		case fileupload.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fu.UpdatedAt = value.Time
			}
		case fileupload.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				fu.CreatedBy = value.String
			}
		case fileupload.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				fu.UpdatedBy = value.String
			}
		case fileupload.FieldFileName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_name", values[i])
			} else if value.Valid {
				fu.FileName = value.String
			}
		case fileupload.FieldFileType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_type", values[i])
			} else if value.Valid {
				fu.FileType = value.String
			}
		case fileupload.FieldExtension:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field extension", values[i])
			} else if value.Valid {
				fu.Extension = value.String
			}
		case fileupload.FieldMimeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mime_type", values[i])
			} else if value.Valid {
				fu.MimeType = value.String
			}
		case fileupload.FieldPublicURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field public_url", values[i])
			} else if value.Valid {
				fu.PublicURL = value.String
			}
		case fileupload.FieldSecureURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field secure_url", values[i])
			} else if value.Valid {
				fu.SecureURL = new(string)
				*fu.SecureURL = value.String
			}
		case fileupload.FieldProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider", values[i])
			} else if value.Valid {
				fu.Provider = value.String
			}
		case fileupload.FieldExternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_id", values[i])
			} else if value.Valid {
				fu.ExternalID = value.String
			}
		case fileupload.FieldSizeBytes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size_bytes", values[i])
			} else if value.Valid {
				fu.SizeBytes = value.Int64
			}
		case fileupload.FieldFileSize:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_size", values[i])
			} else if value.Valid {
				fu.FileSize = new(string)
				*fu.FileSize = value.String
			}
		default:
			fu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FileUpload.
// This includes values selected through modifiers, order, etc.
func (fu *FileUpload) Value(name string) (ent.Value, error) {
	return fu.selectValues.Get(name)
}

// Update returns a builder for updating this FileUpload.
// Note that you need to call FileUpload.Unwrap() before calling this method if this FileUpload
// was returned from a transaction, and the transaction was committed or rolled back.
func (fu *FileUpload) Update() *FileUploadUpdateOne {
	return NewFileUploadClient(fu.config).UpdateOne(fu)
}

// Unwrap unwraps the FileUpload entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fu *FileUpload) Unwrap() *FileUpload {
	_tx, ok := fu.config.driver.(*txDriver)
	if !ok {
		panic("ent: FileUpload is not a transactional entity")
	}
	fu.config.driver = _tx.drv
	return fu
}

// String implements the fmt.Stringer.
func (fu *FileUpload) String() string {
	var builder strings.Builder
	builder.WriteString("FileUpload(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fu.ID))
	builder.WriteString("status=")
	builder.WriteString(fu.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fu.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fu.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fu.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fu.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("file_name=")
	builder.WriteString(fu.FileName)
	builder.WriteString(", ")
	builder.WriteString("file_type=")
	builder.WriteString(fu.FileType)
	builder.WriteString(", ")
	builder.WriteString("extension=")
	builder.WriteString(fu.Extension)
	builder.WriteString(", ")
	builder.WriteString("mime_type=")
	builder.WriteString(fu.MimeType)
	builder.WriteString(", ")
	builder.WriteString("public_url=")
	builder.WriteString(fu.PublicURL)
	builder.WriteString(", ")
	if v := fu.SecureURL; v != nil {
		builder.WriteString("secure_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("provider=")
	builder.WriteString(fu.Provider)
	builder.WriteString(", ")
	builder.WriteString("external_id=")
	builder.WriteString(fu.ExternalID)
	builder.WriteString(", ")
	builder.WriteString("size_bytes=")
	builder.WriteString(fmt.Sprintf("%v", fu.SizeBytes))
	builder.WriteString(", ")
	if v := fu.FileSize; v != nil {
		builder.WriteString("file_size=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// FileUploads is a parsable slice of FileUpload.
type FileUploads []*FileUpload
