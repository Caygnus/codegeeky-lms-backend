// Code generated by ent, DO NOT EDIT.

package discount

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/omkar273/codegeeky/internal/types"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the discount type in the database.
	Label = "discount"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldDiscountType holds the string denoting the discount_type field in the database.
	FieldDiscountType = "discount_type"
	// FieldDiscountValue holds the string denoting the discount_value field in the database.
	FieldDiscountValue = "discount_value"
	// FieldValidFrom holds the string denoting the valid_from field in the database.
	FieldValidFrom = "valid_from"
	// FieldValidUntil holds the string denoting the valid_until field in the database.
	FieldValidUntil = "valid_until"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldMaxUses holds the string denoting the max_uses field in the database.
	FieldMaxUses = "max_uses"
	// FieldMinOrderValue holds the string denoting the min_order_value field in the database.
	FieldMinOrderValue = "min_order_value"
	// FieldIsCombinable holds the string denoting the is_combinable field in the database.
	FieldIsCombinable = "is_combinable"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// Table holds the table name of the discount in the database.
	Table = "discounts"
)

// Columns holds all SQL columns for discount fields.
var Columns = []string{
	FieldID,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldCode,
	FieldDescription,
	FieldDiscountType,
	FieldDiscountValue,
	FieldValidFrom,
	FieldValidUntil,
	FieldIsActive,
	FieldMaxUses,
	FieldMinOrderValue,
	FieldIsCombinable,
	FieldMetadata,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// DefaultDiscountType holds the default value on creation for the "discount_type" field.
	DefaultDiscountType types.DiscountType
	// DefaultDiscountValue holds the default value on creation for the "discount_value" field.
	DefaultDiscountValue decimal.Decimal
	// DefaultValidFrom holds the default value on creation for the "valid_from" field.
	DefaultValidFrom func() time.Time
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultIsCombinable holds the default value on creation for the "is_combinable" field.
	DefaultIsCombinable bool
	// DefaultMetadata holds the default value on creation for the "metadata" field.
	DefaultMetadata map[string]string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the Discount queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByDiscountType orders the results by the discount_type field.
func ByDiscountType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscountType, opts...).ToFunc()
}

// ByDiscountValue orders the results by the discount_value field.
func ByDiscountValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscountValue, opts...).ToFunc()
}

// ByValidFrom orders the results by the valid_from field.
func ByValidFrom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValidFrom, opts...).ToFunc()
}

// ByValidUntil orders the results by the valid_until field.
func ByValidUntil(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValidUntil, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByMaxUses orders the results by the max_uses field.
func ByMaxUses(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxUses, opts...).ToFunc()
}

// ByMinOrderValue orders the results by the min_order_value field.
func ByMinOrderValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinOrderValue, opts...).ToFunc()
}

// ByIsCombinable orders the results by the is_combinable field.
func ByIsCombinable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsCombinable, opts...).ToFunc()
}
