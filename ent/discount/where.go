// Code generated by ent, DO NOT EDIT.

package discount

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/omkar273/codegeeky/ent/predicate"
	"github.com/omkar273/codegeeky/internal/types"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Discount {
	return predicate.Discount(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Discount {
	return predicate.Discount(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Discount {
	return predicate.Discount(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Discount {
	return predicate.Discount(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Discount {
	return predicate.Discount(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Discount {
	return predicate.Discount(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Discount {
	return predicate.Discount(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Discount {
	return predicate.Discount(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Discount {
	return predicate.Discount(sql.FieldContainsFold(FieldID, id))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldUpdatedBy, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldCode, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldDescription, v))
}

// DiscountType applies equality check predicate on the "discount_type" field. It's identical to DiscountTypeEQ.
func DiscountType(v types.DiscountType) predicate.Discount {
	vc := string(v)
	return predicate.Discount(sql.FieldEQ(FieldDiscountType, vc))
}

// DiscountValue applies equality check predicate on the "discount_value" field. It's identical to DiscountValueEQ.
func DiscountValue(v decimal.Decimal) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldDiscountValue, v))
}

// ValidFrom applies equality check predicate on the "valid_from" field. It's identical to ValidFromEQ.
func ValidFrom(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldValidFrom, v))
}

// ValidUntil applies equality check predicate on the "valid_until" field. It's identical to ValidUntilEQ.
func ValidUntil(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldValidUntil, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldIsActive, v))
}

// MaxUses applies equality check predicate on the "max_uses" field. It's identical to MaxUsesEQ.
func MaxUses(v int) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldMaxUses, v))
}

// MinOrderValue applies equality check predicate on the "min_order_value" field. It's identical to MinOrderValueEQ.
func MinOrderValue(v decimal.Decimal) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldMinOrderValue, v))
}

// IsCombinable applies equality check predicate on the "is_combinable" field. It's identical to IsCombinableEQ.
func IsCombinable(v bool) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldIsCombinable, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Discount {
	return predicate.Discount(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Discount {
	return predicate.Discount(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Discount {
	return predicate.Discount(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Discount {
	return predicate.Discount(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Discount {
	return predicate.Discount(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Discount {
	return predicate.Discount(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Discount {
	return predicate.Discount(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Discount {
	return predicate.Discount(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Discount {
	return predicate.Discount(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Discount {
	return predicate.Discount(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Discount {
	return predicate.Discount(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Discount {
	return predicate.Discount(sql.FieldContainsFold(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.Discount {
	return predicate.Discount(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.Discount {
	return predicate.Discount(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.Discount {
	return predicate.Discount(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.Discount {
	return predicate.Discount(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.Discount {
	return predicate.Discount(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.Discount {
	return predicate.Discount(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.Discount {
	return predicate.Discount(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.Discount {
	return predicate.Discount(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.Discount {
	return predicate.Discount(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.Discount {
	return predicate.Discount(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Discount {
	return predicate.Discount(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Discount {
	return predicate.Discount(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.Discount {
	return predicate.Discount(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.Discount {
	return predicate.Discount(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.Discount {
	return predicate.Discount(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.Discount {
	return predicate.Discount(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.Discount {
	return predicate.Discount(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.Discount {
	return predicate.Discount(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.Discount {
	return predicate.Discount(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.Discount {
	return predicate.Discount(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.Discount {
	return predicate.Discount(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.Discount {
	return predicate.Discount(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.Discount {
	return predicate.Discount(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.Discount {
	return predicate.Discount(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.Discount {
	return predicate.Discount(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.Discount {
	return predicate.Discount(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.Discount {
	return predicate.Discount(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.Discount {
	return predicate.Discount(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Discount {
	return predicate.Discount(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Discount {
	return predicate.Discount(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Discount {
	return predicate.Discount(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Discount {
	return predicate.Discount(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Discount {
	return predicate.Discount(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Discount {
	return predicate.Discount(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Discount {
	return predicate.Discount(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Discount {
	return predicate.Discount(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Discount {
	return predicate.Discount(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Discount {
	return predicate.Discount(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Discount {
	return predicate.Discount(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Discount {
	return predicate.Discount(sql.FieldContainsFold(FieldCode, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Discount {
	return predicate.Discount(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Discount {
	return predicate.Discount(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Discount {
	return predicate.Discount(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Discount {
	return predicate.Discount(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Discount {
	return predicate.Discount(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Discount {
	return predicate.Discount(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Discount {
	return predicate.Discount(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Discount {
	return predicate.Discount(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Discount {
	return predicate.Discount(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Discount {
	return predicate.Discount(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Discount {
	return predicate.Discount(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Discount {
	return predicate.Discount(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Discount {
	return predicate.Discount(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Discount {
	return predicate.Discount(sql.FieldContainsFold(FieldDescription, v))
}

// DiscountTypeEQ applies the EQ predicate on the "discount_type" field.
func DiscountTypeEQ(v types.DiscountType) predicate.Discount {
	vc := string(v)
	return predicate.Discount(sql.FieldEQ(FieldDiscountType, vc))
}

// DiscountTypeNEQ applies the NEQ predicate on the "discount_type" field.
func DiscountTypeNEQ(v types.DiscountType) predicate.Discount {
	vc := string(v)
	return predicate.Discount(sql.FieldNEQ(FieldDiscountType, vc))
}

// DiscountTypeIn applies the In predicate on the "discount_type" field.
func DiscountTypeIn(vs ...types.DiscountType) predicate.Discount {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Discount(sql.FieldIn(FieldDiscountType, v...))
}

// DiscountTypeNotIn applies the NotIn predicate on the "discount_type" field.
func DiscountTypeNotIn(vs ...types.DiscountType) predicate.Discount {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Discount(sql.FieldNotIn(FieldDiscountType, v...))
}

// DiscountTypeGT applies the GT predicate on the "discount_type" field.
func DiscountTypeGT(v types.DiscountType) predicate.Discount {
	vc := string(v)
	return predicate.Discount(sql.FieldGT(FieldDiscountType, vc))
}

// DiscountTypeGTE applies the GTE predicate on the "discount_type" field.
func DiscountTypeGTE(v types.DiscountType) predicate.Discount {
	vc := string(v)
	return predicate.Discount(sql.FieldGTE(FieldDiscountType, vc))
}

// DiscountTypeLT applies the LT predicate on the "discount_type" field.
func DiscountTypeLT(v types.DiscountType) predicate.Discount {
	vc := string(v)
	return predicate.Discount(sql.FieldLT(FieldDiscountType, vc))
}

// DiscountTypeLTE applies the LTE predicate on the "discount_type" field.
func DiscountTypeLTE(v types.DiscountType) predicate.Discount {
	vc := string(v)
	return predicate.Discount(sql.FieldLTE(FieldDiscountType, vc))
}

// DiscountTypeContains applies the Contains predicate on the "discount_type" field.
func DiscountTypeContains(v types.DiscountType) predicate.Discount {
	vc := string(v)
	return predicate.Discount(sql.FieldContains(FieldDiscountType, vc))
}

// DiscountTypeHasPrefix applies the HasPrefix predicate on the "discount_type" field.
func DiscountTypeHasPrefix(v types.DiscountType) predicate.Discount {
	vc := string(v)
	return predicate.Discount(sql.FieldHasPrefix(FieldDiscountType, vc))
}

// DiscountTypeHasSuffix applies the HasSuffix predicate on the "discount_type" field.
func DiscountTypeHasSuffix(v types.DiscountType) predicate.Discount {
	vc := string(v)
	return predicate.Discount(sql.FieldHasSuffix(FieldDiscountType, vc))
}

// DiscountTypeEqualFold applies the EqualFold predicate on the "discount_type" field.
func DiscountTypeEqualFold(v types.DiscountType) predicate.Discount {
	vc := string(v)
	return predicate.Discount(sql.FieldEqualFold(FieldDiscountType, vc))
}

// DiscountTypeContainsFold applies the ContainsFold predicate on the "discount_type" field.
func DiscountTypeContainsFold(v types.DiscountType) predicate.Discount {
	vc := string(v)
	return predicate.Discount(sql.FieldContainsFold(FieldDiscountType, vc))
}

// DiscountValueEQ applies the EQ predicate on the "discount_value" field.
func DiscountValueEQ(v decimal.Decimal) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldDiscountValue, v))
}

// DiscountValueNEQ applies the NEQ predicate on the "discount_value" field.
func DiscountValueNEQ(v decimal.Decimal) predicate.Discount {
	return predicate.Discount(sql.FieldNEQ(FieldDiscountValue, v))
}

// DiscountValueIn applies the In predicate on the "discount_value" field.
func DiscountValueIn(vs ...decimal.Decimal) predicate.Discount {
	return predicate.Discount(sql.FieldIn(FieldDiscountValue, vs...))
}

// DiscountValueNotIn applies the NotIn predicate on the "discount_value" field.
func DiscountValueNotIn(vs ...decimal.Decimal) predicate.Discount {
	return predicate.Discount(sql.FieldNotIn(FieldDiscountValue, vs...))
}

// DiscountValueGT applies the GT predicate on the "discount_value" field.
func DiscountValueGT(v decimal.Decimal) predicate.Discount {
	return predicate.Discount(sql.FieldGT(FieldDiscountValue, v))
}

// DiscountValueGTE applies the GTE predicate on the "discount_value" field.
func DiscountValueGTE(v decimal.Decimal) predicate.Discount {
	return predicate.Discount(sql.FieldGTE(FieldDiscountValue, v))
}

// DiscountValueLT applies the LT predicate on the "discount_value" field.
func DiscountValueLT(v decimal.Decimal) predicate.Discount {
	return predicate.Discount(sql.FieldLT(FieldDiscountValue, v))
}

// DiscountValueLTE applies the LTE predicate on the "discount_value" field.
func DiscountValueLTE(v decimal.Decimal) predicate.Discount {
	return predicate.Discount(sql.FieldLTE(FieldDiscountValue, v))
}

// ValidFromEQ applies the EQ predicate on the "valid_from" field.
func ValidFromEQ(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldValidFrom, v))
}

// ValidFromNEQ applies the NEQ predicate on the "valid_from" field.
func ValidFromNEQ(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldNEQ(FieldValidFrom, v))
}

// ValidFromIn applies the In predicate on the "valid_from" field.
func ValidFromIn(vs ...time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldIn(FieldValidFrom, vs...))
}

// ValidFromNotIn applies the NotIn predicate on the "valid_from" field.
func ValidFromNotIn(vs ...time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldNotIn(FieldValidFrom, vs...))
}

// ValidFromGT applies the GT predicate on the "valid_from" field.
func ValidFromGT(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldGT(FieldValidFrom, v))
}

// ValidFromGTE applies the GTE predicate on the "valid_from" field.
func ValidFromGTE(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldGTE(FieldValidFrom, v))
}

// ValidFromLT applies the LT predicate on the "valid_from" field.
func ValidFromLT(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldLT(FieldValidFrom, v))
}

// ValidFromLTE applies the LTE predicate on the "valid_from" field.
func ValidFromLTE(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldLTE(FieldValidFrom, v))
}

// ValidUntilEQ applies the EQ predicate on the "valid_until" field.
func ValidUntilEQ(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldValidUntil, v))
}

// ValidUntilNEQ applies the NEQ predicate on the "valid_until" field.
func ValidUntilNEQ(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldNEQ(FieldValidUntil, v))
}

// ValidUntilIn applies the In predicate on the "valid_until" field.
func ValidUntilIn(vs ...time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldIn(FieldValidUntil, vs...))
}

// ValidUntilNotIn applies the NotIn predicate on the "valid_until" field.
func ValidUntilNotIn(vs ...time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldNotIn(FieldValidUntil, vs...))
}

// ValidUntilGT applies the GT predicate on the "valid_until" field.
func ValidUntilGT(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldGT(FieldValidUntil, v))
}

// ValidUntilGTE applies the GTE predicate on the "valid_until" field.
func ValidUntilGTE(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldGTE(FieldValidUntil, v))
}

// ValidUntilLT applies the LT predicate on the "valid_until" field.
func ValidUntilLT(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldLT(FieldValidUntil, v))
}

// ValidUntilLTE applies the LTE predicate on the "valid_until" field.
func ValidUntilLTE(v time.Time) predicate.Discount {
	return predicate.Discount(sql.FieldLTE(FieldValidUntil, v))
}

// ValidUntilIsNil applies the IsNil predicate on the "valid_until" field.
func ValidUntilIsNil() predicate.Discount {
	return predicate.Discount(sql.FieldIsNull(FieldValidUntil))
}

// ValidUntilNotNil applies the NotNil predicate on the "valid_until" field.
func ValidUntilNotNil() predicate.Discount {
	return predicate.Discount(sql.FieldNotNull(FieldValidUntil))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.Discount {
	return predicate.Discount(sql.FieldNEQ(FieldIsActive, v))
}

// MaxUsesEQ applies the EQ predicate on the "max_uses" field.
func MaxUsesEQ(v int) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldMaxUses, v))
}

// MaxUsesNEQ applies the NEQ predicate on the "max_uses" field.
func MaxUsesNEQ(v int) predicate.Discount {
	return predicate.Discount(sql.FieldNEQ(FieldMaxUses, v))
}

// MaxUsesIn applies the In predicate on the "max_uses" field.
func MaxUsesIn(vs ...int) predicate.Discount {
	return predicate.Discount(sql.FieldIn(FieldMaxUses, vs...))
}

// MaxUsesNotIn applies the NotIn predicate on the "max_uses" field.
func MaxUsesNotIn(vs ...int) predicate.Discount {
	return predicate.Discount(sql.FieldNotIn(FieldMaxUses, vs...))
}

// MaxUsesGT applies the GT predicate on the "max_uses" field.
func MaxUsesGT(v int) predicate.Discount {
	return predicate.Discount(sql.FieldGT(FieldMaxUses, v))
}

// MaxUsesGTE applies the GTE predicate on the "max_uses" field.
func MaxUsesGTE(v int) predicate.Discount {
	return predicate.Discount(sql.FieldGTE(FieldMaxUses, v))
}

// MaxUsesLT applies the LT predicate on the "max_uses" field.
func MaxUsesLT(v int) predicate.Discount {
	return predicate.Discount(sql.FieldLT(FieldMaxUses, v))
}

// MaxUsesLTE applies the LTE predicate on the "max_uses" field.
func MaxUsesLTE(v int) predicate.Discount {
	return predicate.Discount(sql.FieldLTE(FieldMaxUses, v))
}

// MaxUsesIsNil applies the IsNil predicate on the "max_uses" field.
func MaxUsesIsNil() predicate.Discount {
	return predicate.Discount(sql.FieldIsNull(FieldMaxUses))
}

// MaxUsesNotNil applies the NotNil predicate on the "max_uses" field.
func MaxUsesNotNil() predicate.Discount {
	return predicate.Discount(sql.FieldNotNull(FieldMaxUses))
}

// MinOrderValueEQ applies the EQ predicate on the "min_order_value" field.
func MinOrderValueEQ(v decimal.Decimal) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldMinOrderValue, v))
}

// MinOrderValueNEQ applies the NEQ predicate on the "min_order_value" field.
func MinOrderValueNEQ(v decimal.Decimal) predicate.Discount {
	return predicate.Discount(sql.FieldNEQ(FieldMinOrderValue, v))
}

// MinOrderValueIn applies the In predicate on the "min_order_value" field.
func MinOrderValueIn(vs ...decimal.Decimal) predicate.Discount {
	return predicate.Discount(sql.FieldIn(FieldMinOrderValue, vs...))
}

// MinOrderValueNotIn applies the NotIn predicate on the "min_order_value" field.
func MinOrderValueNotIn(vs ...decimal.Decimal) predicate.Discount {
	return predicate.Discount(sql.FieldNotIn(FieldMinOrderValue, vs...))
}

// MinOrderValueGT applies the GT predicate on the "min_order_value" field.
func MinOrderValueGT(v decimal.Decimal) predicate.Discount {
	return predicate.Discount(sql.FieldGT(FieldMinOrderValue, v))
}

// MinOrderValueGTE applies the GTE predicate on the "min_order_value" field.
func MinOrderValueGTE(v decimal.Decimal) predicate.Discount {
	return predicate.Discount(sql.FieldGTE(FieldMinOrderValue, v))
}

// MinOrderValueLT applies the LT predicate on the "min_order_value" field.
func MinOrderValueLT(v decimal.Decimal) predicate.Discount {
	return predicate.Discount(sql.FieldLT(FieldMinOrderValue, v))
}

// MinOrderValueLTE applies the LTE predicate on the "min_order_value" field.
func MinOrderValueLTE(v decimal.Decimal) predicate.Discount {
	return predicate.Discount(sql.FieldLTE(FieldMinOrderValue, v))
}

// MinOrderValueIsNil applies the IsNil predicate on the "min_order_value" field.
func MinOrderValueIsNil() predicate.Discount {
	return predicate.Discount(sql.FieldIsNull(FieldMinOrderValue))
}

// MinOrderValueNotNil applies the NotNil predicate on the "min_order_value" field.
func MinOrderValueNotNil() predicate.Discount {
	return predicate.Discount(sql.FieldNotNull(FieldMinOrderValue))
}

// IsCombinableEQ applies the EQ predicate on the "is_combinable" field.
func IsCombinableEQ(v bool) predicate.Discount {
	return predicate.Discount(sql.FieldEQ(FieldIsCombinable, v))
}

// IsCombinableNEQ applies the NEQ predicate on the "is_combinable" field.
func IsCombinableNEQ(v bool) predicate.Discount {
	return predicate.Discount(sql.FieldNEQ(FieldIsCombinable, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.Discount {
	return predicate.Discount(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.Discount {
	return predicate.Discount(sql.FieldNotNull(FieldMetadata))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Discount) predicate.Discount {
	return predicate.Discount(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Discount) predicate.Discount {
	return predicate.Discount(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Discount) predicate.Discount {
	return predicate.Discount(sql.NotPredicates(p))
}
