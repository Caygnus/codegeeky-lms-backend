// Code generated by ent, DO NOT EDIT.

package fileupload

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/omkar273/codegeeky/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContainsFold(FieldID, id))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldUpdatedBy, v))
}

// FileName applies equality check predicate on the "file_name" field. It's identical to FileNameEQ.
func FileName(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldFileName, v))
}

// FileType applies equality check predicate on the "file_type" field. It's identical to FileTypeEQ.
func FileType(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldFileType, v))
}

// Extension applies equality check predicate on the "extension" field. It's identical to ExtensionEQ.
func Extension(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldExtension, v))
}

// MimeType applies equality check predicate on the "mime_type" field. It's identical to MimeTypeEQ.
func MimeType(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldMimeType, v))
}

// PublicURL applies equality check predicate on the "public_url" field. It's identical to PublicURLEQ.
func PublicURL(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldPublicURL, v))
}

// SecureURL applies equality check predicate on the "secure_url" field. It's identical to SecureURLEQ.
func SecureURL(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldSecureURL, v))
}

// Provider applies equality check predicate on the "provider" field. It's identical to ProviderEQ.
func Provider(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldProvider, v))
}

// ExternalID applies equality check predicate on the "external_id" field. It's identical to ExternalIDEQ.
func ExternalID(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldExternalID, v))
}

// SizeBytes applies equality check predicate on the "size_bytes" field. It's identical to SizeBytesEQ.
func SizeBytes(v int64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldSizeBytes, v))
}

// FileSize applies equality check predicate on the "file_size" field. It's identical to FileSizeEQ.
func FileSize(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldFileSize, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContainsFold(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// FileNameEQ applies the EQ predicate on the "file_name" field.
func FileNameEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldFileName, v))
}

// FileNameNEQ applies the NEQ predicate on the "file_name" field.
func FileNameNEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNEQ(FieldFileName, v))
}

// FileNameIn applies the In predicate on the "file_name" field.
func FileNameIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIn(FieldFileName, vs...))
}

// FileNameNotIn applies the NotIn predicate on the "file_name" field.
func FileNameNotIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotIn(FieldFileName, vs...))
}

// FileNameGT applies the GT predicate on the "file_name" field.
func FileNameGT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGT(FieldFileName, v))
}

// FileNameGTE applies the GTE predicate on the "file_name" field.
func FileNameGTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGTE(FieldFileName, v))
}

// FileNameLT applies the LT predicate on the "file_name" field.
func FileNameLT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLT(FieldFileName, v))
}

// FileNameLTE applies the LTE predicate on the "file_name" field.
func FileNameLTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLTE(FieldFileName, v))
}

// FileNameContains applies the Contains predicate on the "file_name" field.
func FileNameContains(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContains(FieldFileName, v))
}

// FileNameHasPrefix applies the HasPrefix predicate on the "file_name" field.
func FileNameHasPrefix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasPrefix(FieldFileName, v))
}

// FileNameHasSuffix applies the HasSuffix predicate on the "file_name" field.
func FileNameHasSuffix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasSuffix(FieldFileName, v))
}

// FileNameEqualFold applies the EqualFold predicate on the "file_name" field.
func FileNameEqualFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEqualFold(FieldFileName, v))
}

// FileNameContainsFold applies the ContainsFold predicate on the "file_name" field.
func FileNameContainsFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContainsFold(FieldFileName, v))
}

// FileTypeEQ applies the EQ predicate on the "file_type" field.
func FileTypeEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldFileType, v))
}

// FileTypeNEQ applies the NEQ predicate on the "file_type" field.
func FileTypeNEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNEQ(FieldFileType, v))
}

// FileTypeIn applies the In predicate on the "file_type" field.
func FileTypeIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIn(FieldFileType, vs...))
}

// FileTypeNotIn applies the NotIn predicate on the "file_type" field.
func FileTypeNotIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotIn(FieldFileType, vs...))
}

// FileTypeGT applies the GT predicate on the "file_type" field.
func FileTypeGT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGT(FieldFileType, v))
}

// FileTypeGTE applies the GTE predicate on the "file_type" field.
func FileTypeGTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGTE(FieldFileType, v))
}

// FileTypeLT applies the LT predicate on the "file_type" field.
func FileTypeLT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLT(FieldFileType, v))
}

// FileTypeLTE applies the LTE predicate on the "file_type" field.
func FileTypeLTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLTE(FieldFileType, v))
}

// FileTypeContains applies the Contains predicate on the "file_type" field.
func FileTypeContains(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContains(FieldFileType, v))
}

// FileTypeHasPrefix applies the HasPrefix predicate on the "file_type" field.
func FileTypeHasPrefix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasPrefix(FieldFileType, v))
}

// FileTypeHasSuffix applies the HasSuffix predicate on the "file_type" field.
func FileTypeHasSuffix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasSuffix(FieldFileType, v))
}

// FileTypeEqualFold applies the EqualFold predicate on the "file_type" field.
func FileTypeEqualFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEqualFold(FieldFileType, v))
}

// FileTypeContainsFold applies the ContainsFold predicate on the "file_type" field.
func FileTypeContainsFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContainsFold(FieldFileType, v))
}

// ExtensionEQ applies the EQ predicate on the "extension" field.
func ExtensionEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldExtension, v))
}

// ExtensionNEQ applies the NEQ predicate on the "extension" field.
func ExtensionNEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNEQ(FieldExtension, v))
}

// ExtensionIn applies the In predicate on the "extension" field.
func ExtensionIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIn(FieldExtension, vs...))
}

// ExtensionNotIn applies the NotIn predicate on the "extension" field.
func ExtensionNotIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotIn(FieldExtension, vs...))
}

// ExtensionGT applies the GT predicate on the "extension" field.
func ExtensionGT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGT(FieldExtension, v))
}

// ExtensionGTE applies the GTE predicate on the "extension" field.
func ExtensionGTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGTE(FieldExtension, v))
}

// ExtensionLT applies the LT predicate on the "extension" field.
func ExtensionLT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLT(FieldExtension, v))
}

// ExtensionLTE applies the LTE predicate on the "extension" field.
func ExtensionLTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLTE(FieldExtension, v))
}

// ExtensionContains applies the Contains predicate on the "extension" field.
func ExtensionContains(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContains(FieldExtension, v))
}

// ExtensionHasPrefix applies the HasPrefix predicate on the "extension" field.
func ExtensionHasPrefix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasPrefix(FieldExtension, v))
}

// ExtensionHasSuffix applies the HasSuffix predicate on the "extension" field.
func ExtensionHasSuffix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasSuffix(FieldExtension, v))
}

// ExtensionEqualFold applies the EqualFold predicate on the "extension" field.
func ExtensionEqualFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEqualFold(FieldExtension, v))
}

// ExtensionContainsFold applies the ContainsFold predicate on the "extension" field.
func ExtensionContainsFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContainsFold(FieldExtension, v))
}

// MimeTypeEQ applies the EQ predicate on the "mime_type" field.
func MimeTypeEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldMimeType, v))
}

// MimeTypeNEQ applies the NEQ predicate on the "mime_type" field.
func MimeTypeNEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNEQ(FieldMimeType, v))
}

// MimeTypeIn applies the In predicate on the "mime_type" field.
func MimeTypeIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIn(FieldMimeType, vs...))
}

// MimeTypeNotIn applies the NotIn predicate on the "mime_type" field.
func MimeTypeNotIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotIn(FieldMimeType, vs...))
}

// MimeTypeGT applies the GT predicate on the "mime_type" field.
func MimeTypeGT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGT(FieldMimeType, v))
}

// MimeTypeGTE applies the GTE predicate on the "mime_type" field.
func MimeTypeGTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGTE(FieldMimeType, v))
}

// MimeTypeLT applies the LT predicate on the "mime_type" field.
func MimeTypeLT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLT(FieldMimeType, v))
}

// MimeTypeLTE applies the LTE predicate on the "mime_type" field.
func MimeTypeLTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLTE(FieldMimeType, v))
}

// MimeTypeContains applies the Contains predicate on the "mime_type" field.
func MimeTypeContains(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContains(FieldMimeType, v))
}

// MimeTypeHasPrefix applies the HasPrefix predicate on the "mime_type" field.
func MimeTypeHasPrefix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasPrefix(FieldMimeType, v))
}

// MimeTypeHasSuffix applies the HasSuffix predicate on the "mime_type" field.
func MimeTypeHasSuffix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasSuffix(FieldMimeType, v))
}

// MimeTypeEqualFold applies the EqualFold predicate on the "mime_type" field.
func MimeTypeEqualFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEqualFold(FieldMimeType, v))
}

// MimeTypeContainsFold applies the ContainsFold predicate on the "mime_type" field.
func MimeTypeContainsFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContainsFold(FieldMimeType, v))
}

// PublicURLEQ applies the EQ predicate on the "public_url" field.
func PublicURLEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldPublicURL, v))
}

// PublicURLNEQ applies the NEQ predicate on the "public_url" field.
func PublicURLNEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNEQ(FieldPublicURL, v))
}

// PublicURLIn applies the In predicate on the "public_url" field.
func PublicURLIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIn(FieldPublicURL, vs...))
}

// PublicURLNotIn applies the NotIn predicate on the "public_url" field.
func PublicURLNotIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotIn(FieldPublicURL, vs...))
}

// PublicURLGT applies the GT predicate on the "public_url" field.
func PublicURLGT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGT(FieldPublicURL, v))
}

// PublicURLGTE applies the GTE predicate on the "public_url" field.
func PublicURLGTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGTE(FieldPublicURL, v))
}

// PublicURLLT applies the LT predicate on the "public_url" field.
func PublicURLLT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLT(FieldPublicURL, v))
}

// PublicURLLTE applies the LTE predicate on the "public_url" field.
func PublicURLLTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLTE(FieldPublicURL, v))
}

// PublicURLContains applies the Contains predicate on the "public_url" field.
func PublicURLContains(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContains(FieldPublicURL, v))
}

// PublicURLHasPrefix applies the HasPrefix predicate on the "public_url" field.
func PublicURLHasPrefix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasPrefix(FieldPublicURL, v))
}

// PublicURLHasSuffix applies the HasSuffix predicate on the "public_url" field.
func PublicURLHasSuffix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasSuffix(FieldPublicURL, v))
}

// PublicURLEqualFold applies the EqualFold predicate on the "public_url" field.
func PublicURLEqualFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEqualFold(FieldPublicURL, v))
}

// PublicURLContainsFold applies the ContainsFold predicate on the "public_url" field.
func PublicURLContainsFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContainsFold(FieldPublicURL, v))
}

// SecureURLEQ applies the EQ predicate on the "secure_url" field.
func SecureURLEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldSecureURL, v))
}

// SecureURLNEQ applies the NEQ predicate on the "secure_url" field.
func SecureURLNEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNEQ(FieldSecureURL, v))
}

// SecureURLIn applies the In predicate on the "secure_url" field.
func SecureURLIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIn(FieldSecureURL, vs...))
}

// SecureURLNotIn applies the NotIn predicate on the "secure_url" field.
func SecureURLNotIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotIn(FieldSecureURL, vs...))
}

// SecureURLGT applies the GT predicate on the "secure_url" field.
func SecureURLGT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGT(FieldSecureURL, v))
}

// SecureURLGTE applies the GTE predicate on the "secure_url" field.
func SecureURLGTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGTE(FieldSecureURL, v))
}

// SecureURLLT applies the LT predicate on the "secure_url" field.
func SecureURLLT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLT(FieldSecureURL, v))
}

// SecureURLLTE applies the LTE predicate on the "secure_url" field.
func SecureURLLTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLTE(FieldSecureURL, v))
}

// SecureURLContains applies the Contains predicate on the "secure_url" field.
func SecureURLContains(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContains(FieldSecureURL, v))
}

// SecureURLHasPrefix applies the HasPrefix predicate on the "secure_url" field.
func SecureURLHasPrefix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasPrefix(FieldSecureURL, v))
}

// SecureURLHasSuffix applies the HasSuffix predicate on the "secure_url" field.
func SecureURLHasSuffix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasSuffix(FieldSecureURL, v))
}

// SecureURLIsNil applies the IsNil predicate on the "secure_url" field.
func SecureURLIsNil() predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIsNull(FieldSecureURL))
}

// SecureURLNotNil applies the NotNil predicate on the "secure_url" field.
func SecureURLNotNil() predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotNull(FieldSecureURL))
}

// SecureURLEqualFold applies the EqualFold predicate on the "secure_url" field.
func SecureURLEqualFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEqualFold(FieldSecureURL, v))
}

// SecureURLContainsFold applies the ContainsFold predicate on the "secure_url" field.
func SecureURLContainsFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContainsFold(FieldSecureURL, v))
}

// ProviderEQ applies the EQ predicate on the "provider" field.
func ProviderEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldProvider, v))
}

// ProviderNEQ applies the NEQ predicate on the "provider" field.
func ProviderNEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNEQ(FieldProvider, v))
}

// ProviderIn applies the In predicate on the "provider" field.
func ProviderIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIn(FieldProvider, vs...))
}

// ProviderNotIn applies the NotIn predicate on the "provider" field.
func ProviderNotIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotIn(FieldProvider, vs...))
}

// ProviderGT applies the GT predicate on the "provider" field.
func ProviderGT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGT(FieldProvider, v))
}

// ProviderGTE applies the GTE predicate on the "provider" field.
func ProviderGTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGTE(FieldProvider, v))
}

// ProviderLT applies the LT predicate on the "provider" field.
func ProviderLT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLT(FieldProvider, v))
}

// ProviderLTE applies the LTE predicate on the "provider" field.
func ProviderLTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLTE(FieldProvider, v))
}

// ProviderContains applies the Contains predicate on the "provider" field.
func ProviderContains(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContains(FieldProvider, v))
}

// ProviderHasPrefix applies the HasPrefix predicate on the "provider" field.
func ProviderHasPrefix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasPrefix(FieldProvider, v))
}

// ProviderHasSuffix applies the HasSuffix predicate on the "provider" field.
func ProviderHasSuffix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasSuffix(FieldProvider, v))
}

// ProviderEqualFold applies the EqualFold predicate on the "provider" field.
func ProviderEqualFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEqualFold(FieldProvider, v))
}

// ProviderContainsFold applies the ContainsFold predicate on the "provider" field.
func ProviderContainsFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContainsFold(FieldProvider, v))
}

// ExternalIDEQ applies the EQ predicate on the "external_id" field.
func ExternalIDEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldExternalID, v))
}

// ExternalIDNEQ applies the NEQ predicate on the "external_id" field.
func ExternalIDNEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNEQ(FieldExternalID, v))
}

// ExternalIDIn applies the In predicate on the "external_id" field.
func ExternalIDIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIn(FieldExternalID, vs...))
}

// ExternalIDNotIn applies the NotIn predicate on the "external_id" field.
func ExternalIDNotIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotIn(FieldExternalID, vs...))
}

// ExternalIDGT applies the GT predicate on the "external_id" field.
func ExternalIDGT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGT(FieldExternalID, v))
}

// ExternalIDGTE applies the GTE predicate on the "external_id" field.
func ExternalIDGTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGTE(FieldExternalID, v))
}

// ExternalIDLT applies the LT predicate on the "external_id" field.
func ExternalIDLT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLT(FieldExternalID, v))
}

// ExternalIDLTE applies the LTE predicate on the "external_id" field.
func ExternalIDLTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLTE(FieldExternalID, v))
}

// ExternalIDContains applies the Contains predicate on the "external_id" field.
func ExternalIDContains(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContains(FieldExternalID, v))
}

// ExternalIDHasPrefix applies the HasPrefix predicate on the "external_id" field.
func ExternalIDHasPrefix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasPrefix(FieldExternalID, v))
}

// ExternalIDHasSuffix applies the HasSuffix predicate on the "external_id" field.
func ExternalIDHasSuffix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasSuffix(FieldExternalID, v))
}

// ExternalIDEqualFold applies the EqualFold predicate on the "external_id" field.
func ExternalIDEqualFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEqualFold(FieldExternalID, v))
}

// ExternalIDContainsFold applies the ContainsFold predicate on the "external_id" field.
func ExternalIDContainsFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContainsFold(FieldExternalID, v))
}

// SizeBytesEQ applies the EQ predicate on the "size_bytes" field.
func SizeBytesEQ(v int64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldSizeBytes, v))
}

// SizeBytesNEQ applies the NEQ predicate on the "size_bytes" field.
func SizeBytesNEQ(v int64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNEQ(FieldSizeBytes, v))
}

// SizeBytesIn applies the In predicate on the "size_bytes" field.
func SizeBytesIn(vs ...int64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIn(FieldSizeBytes, vs...))
}

// SizeBytesNotIn applies the NotIn predicate on the "size_bytes" field.
func SizeBytesNotIn(vs ...int64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotIn(FieldSizeBytes, vs...))
}

// SizeBytesGT applies the GT predicate on the "size_bytes" field.
func SizeBytesGT(v int64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGT(FieldSizeBytes, v))
}

// SizeBytesGTE applies the GTE predicate on the "size_bytes" field.
func SizeBytesGTE(v int64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGTE(FieldSizeBytes, v))
}

// SizeBytesLT applies the LT predicate on the "size_bytes" field.
func SizeBytesLT(v int64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLT(FieldSizeBytes, v))
}

// SizeBytesLTE applies the LTE predicate on the "size_bytes" field.
func SizeBytesLTE(v int64) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLTE(FieldSizeBytes, v))
}

// FileSizeEQ applies the EQ predicate on the "file_size" field.
func FileSizeEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEQ(FieldFileSize, v))
}

// FileSizeNEQ applies the NEQ predicate on the "file_size" field.
func FileSizeNEQ(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNEQ(FieldFileSize, v))
}

// FileSizeIn applies the In predicate on the "file_size" field.
func FileSizeIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIn(FieldFileSize, vs...))
}

// FileSizeNotIn applies the NotIn predicate on the "file_size" field.
func FileSizeNotIn(vs ...string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotIn(FieldFileSize, vs...))
}

// FileSizeGT applies the GT predicate on the "file_size" field.
func FileSizeGT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGT(FieldFileSize, v))
}

// FileSizeGTE applies the GTE predicate on the "file_size" field.
func FileSizeGTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldGTE(FieldFileSize, v))
}

// FileSizeLT applies the LT predicate on the "file_size" field.
func FileSizeLT(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLT(FieldFileSize, v))
}

// FileSizeLTE applies the LTE predicate on the "file_size" field.
func FileSizeLTE(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldLTE(FieldFileSize, v))
}

// FileSizeContains applies the Contains predicate on the "file_size" field.
func FileSizeContains(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContains(FieldFileSize, v))
}

// FileSizeHasPrefix applies the HasPrefix predicate on the "file_size" field.
func FileSizeHasPrefix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasPrefix(FieldFileSize, v))
}

// FileSizeHasSuffix applies the HasSuffix predicate on the "file_size" field.
func FileSizeHasSuffix(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldHasSuffix(FieldFileSize, v))
}

// FileSizeIsNil applies the IsNil predicate on the "file_size" field.
func FileSizeIsNil() predicate.FileUpload {
	return predicate.FileUpload(sql.FieldIsNull(FieldFileSize))
}

// FileSizeNotNil applies the NotNil predicate on the "file_size" field.
func FileSizeNotNil() predicate.FileUpload {
	return predicate.FileUpload(sql.FieldNotNull(FieldFileSize))
}

// FileSizeEqualFold applies the EqualFold predicate on the "file_size" field.
func FileSizeEqualFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldEqualFold(FieldFileSize, v))
}

// FileSizeContainsFold applies the ContainsFold predicate on the "file_size" field.
func FileSizeContainsFold(v string) predicate.FileUpload {
	return predicate.FileUpload(sql.FieldContainsFold(FieldFileSize, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FileUpload) predicate.FileUpload {
	return predicate.FileUpload(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FileUpload) predicate.FileUpload {
	return predicate.FileUpload(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FileUpload) predicate.FileUpload {
	return predicate.FileUpload(sql.NotPredicates(p))
}
