// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/omkar273/codegeeky/ent/cartlineitems"
	"github.com/omkar273/codegeeky/ent/predicate"
	"github.com/shopspring/decimal"
)

// CartLineItemsUpdate is the builder for updating CartLineItems entities.
type CartLineItemsUpdate struct {
	config
	hooks    []Hook
	mutation *CartLineItemsMutation
}

// Where appends a list predicates to the CartLineItemsUpdate builder.
func (cliu *CartLineItemsUpdate) Where(ps ...predicate.CartLineItems) *CartLineItemsUpdate {
	cliu.mutation.Where(ps...)
	return cliu
}

// SetStatus sets the "status" field.
func (cliu *CartLineItemsUpdate) SetStatus(s string) *CartLineItemsUpdate {
	cliu.mutation.SetStatus(s)
	return cliu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cliu *CartLineItemsUpdate) SetNillableStatus(s *string) *CartLineItemsUpdate {
	if s != nil {
		cliu.SetStatus(*s)
	}
	return cliu
}

// SetUpdatedAt sets the "updated_at" field.
func (cliu *CartLineItemsUpdate) SetUpdatedAt(t time.Time) *CartLineItemsUpdate {
	cliu.mutation.SetUpdatedAt(t)
	return cliu
}

// SetUpdatedBy sets the "updated_by" field.
func (cliu *CartLineItemsUpdate) SetUpdatedBy(s string) *CartLineItemsUpdate {
	cliu.mutation.SetUpdatedBy(s)
	return cliu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cliu *CartLineItemsUpdate) SetNillableUpdatedBy(s *string) *CartLineItemsUpdate {
	if s != nil {
		cliu.SetUpdatedBy(*s)
	}
	return cliu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cliu *CartLineItemsUpdate) ClearUpdatedBy() *CartLineItemsUpdate {
	cliu.mutation.ClearUpdatedBy()
	return cliu
}

// SetMetadata sets the "metadata" field.
func (cliu *CartLineItemsUpdate) SetMetadata(m map[string]string) *CartLineItemsUpdate {
	cliu.mutation.SetMetadata(m)
	return cliu
}

// ClearMetadata clears the value of the "metadata" field.
func (cliu *CartLineItemsUpdate) ClearMetadata() *CartLineItemsUpdate {
	cliu.mutation.ClearMetadata()
	return cliu
}

// SetQuantity sets the "quantity" field.
func (cliu *CartLineItemsUpdate) SetQuantity(i int) *CartLineItemsUpdate {
	cliu.mutation.ResetQuantity()
	cliu.mutation.SetQuantity(i)
	return cliu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (cliu *CartLineItemsUpdate) SetNillableQuantity(i *int) *CartLineItemsUpdate {
	if i != nil {
		cliu.SetQuantity(*i)
	}
	return cliu
}

// AddQuantity adds i to the "quantity" field.
func (cliu *CartLineItemsUpdate) AddQuantity(i int) *CartLineItemsUpdate {
	cliu.mutation.AddQuantity(i)
	return cliu
}

// SetPerUnitPrice sets the "per_unit_price" field.
func (cliu *CartLineItemsUpdate) SetPerUnitPrice(d decimal.Decimal) *CartLineItemsUpdate {
	cliu.mutation.SetPerUnitPrice(d)
	return cliu
}

// SetNillablePerUnitPrice sets the "per_unit_price" field if the given value is not nil.
func (cliu *CartLineItemsUpdate) SetNillablePerUnitPrice(d *decimal.Decimal) *CartLineItemsUpdate {
	if d != nil {
		cliu.SetPerUnitPrice(*d)
	}
	return cliu
}

// SetTaxAmount sets the "tax_amount" field.
func (cliu *CartLineItemsUpdate) SetTaxAmount(d decimal.Decimal) *CartLineItemsUpdate {
	cliu.mutation.SetTaxAmount(d)
	return cliu
}

// SetNillableTaxAmount sets the "tax_amount" field if the given value is not nil.
func (cliu *CartLineItemsUpdate) SetNillableTaxAmount(d *decimal.Decimal) *CartLineItemsUpdate {
	if d != nil {
		cliu.SetTaxAmount(*d)
	}
	return cliu
}

// SetDiscountAmount sets the "discount_amount" field.
func (cliu *CartLineItemsUpdate) SetDiscountAmount(d decimal.Decimal) *CartLineItemsUpdate {
	cliu.mutation.SetDiscountAmount(d)
	return cliu
}

// SetNillableDiscountAmount sets the "discount_amount" field if the given value is not nil.
func (cliu *CartLineItemsUpdate) SetNillableDiscountAmount(d *decimal.Decimal) *CartLineItemsUpdate {
	if d != nil {
		cliu.SetDiscountAmount(*d)
	}
	return cliu
}

// SetSubtotal sets the "subtotal" field.
func (cliu *CartLineItemsUpdate) SetSubtotal(d decimal.Decimal) *CartLineItemsUpdate {
	cliu.mutation.SetSubtotal(d)
	return cliu
}

// SetNillableSubtotal sets the "subtotal" field if the given value is not nil.
func (cliu *CartLineItemsUpdate) SetNillableSubtotal(d *decimal.Decimal) *CartLineItemsUpdate {
	if d != nil {
		cliu.SetSubtotal(*d)
	}
	return cliu
}

// SetTotal sets the "total" field.
func (cliu *CartLineItemsUpdate) SetTotal(d decimal.Decimal) *CartLineItemsUpdate {
	cliu.mutation.SetTotal(d)
	return cliu
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (cliu *CartLineItemsUpdate) SetNillableTotal(d *decimal.Decimal) *CartLineItemsUpdate {
	if d != nil {
		cliu.SetTotal(*d)
	}
	return cliu
}

// Mutation returns the CartLineItemsMutation object of the builder.
func (cliu *CartLineItemsUpdate) Mutation() *CartLineItemsMutation {
	return cliu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cliu *CartLineItemsUpdate) Save(ctx context.Context) (int, error) {
	cliu.defaults()
	return withHooks(ctx, cliu.sqlSave, cliu.mutation, cliu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cliu *CartLineItemsUpdate) SaveX(ctx context.Context) int {
	affected, err := cliu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cliu *CartLineItemsUpdate) Exec(ctx context.Context) error {
	_, err := cliu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cliu *CartLineItemsUpdate) ExecX(ctx context.Context) {
	if err := cliu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cliu *CartLineItemsUpdate) defaults() {
	if _, ok := cliu.mutation.UpdatedAt(); !ok {
		v := cartlineitems.UpdateDefaultUpdatedAt()
		cliu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cliu *CartLineItemsUpdate) check() error {
	if cliu.mutation.CartCleared() && len(cliu.mutation.CartIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CartLineItems.cart"`)
	}
	return nil
}

func (cliu *CartLineItemsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cliu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(cartlineitems.Table, cartlineitems.Columns, sqlgraph.NewFieldSpec(cartlineitems.FieldID, field.TypeString))
	if ps := cliu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cliu.mutation.Status(); ok {
		_spec.SetField(cartlineitems.FieldStatus, field.TypeString, value)
	}
	if value, ok := cliu.mutation.UpdatedAt(); ok {
		_spec.SetField(cartlineitems.FieldUpdatedAt, field.TypeTime, value)
	}
	if cliu.mutation.CreatedByCleared() {
		_spec.ClearField(cartlineitems.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cliu.mutation.UpdatedBy(); ok {
		_spec.SetField(cartlineitems.FieldUpdatedBy, field.TypeString, value)
	}
	if cliu.mutation.UpdatedByCleared() {
		_spec.ClearField(cartlineitems.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := cliu.mutation.Metadata(); ok {
		_spec.SetField(cartlineitems.FieldMetadata, field.TypeJSON, value)
	}
	if cliu.mutation.MetadataCleared() {
		_spec.ClearField(cartlineitems.FieldMetadata, field.TypeJSON)
	}
	if value, ok := cliu.mutation.Quantity(); ok {
		_spec.SetField(cartlineitems.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := cliu.mutation.AddedQuantity(); ok {
		_spec.AddField(cartlineitems.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := cliu.mutation.PerUnitPrice(); ok {
		_spec.SetField(cartlineitems.FieldPerUnitPrice, field.TypeOther, value)
	}
	if value, ok := cliu.mutation.TaxAmount(); ok {
		_spec.SetField(cartlineitems.FieldTaxAmount, field.TypeOther, value)
	}
	if value, ok := cliu.mutation.DiscountAmount(); ok {
		_spec.SetField(cartlineitems.FieldDiscountAmount, field.TypeOther, value)
	}
	if value, ok := cliu.mutation.Subtotal(); ok {
		_spec.SetField(cartlineitems.FieldSubtotal, field.TypeOther, value)
	}
	if value, ok := cliu.mutation.Total(); ok {
		_spec.SetField(cartlineitems.FieldTotal, field.TypeOther, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cliu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cartlineitems.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cliu.mutation.done = true
	return n, nil
}

// CartLineItemsUpdateOne is the builder for updating a single CartLineItems entity.
type CartLineItemsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CartLineItemsMutation
}

// SetStatus sets the "status" field.
func (cliuo *CartLineItemsUpdateOne) SetStatus(s string) *CartLineItemsUpdateOne {
	cliuo.mutation.SetStatus(s)
	return cliuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cliuo *CartLineItemsUpdateOne) SetNillableStatus(s *string) *CartLineItemsUpdateOne {
	if s != nil {
		cliuo.SetStatus(*s)
	}
	return cliuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cliuo *CartLineItemsUpdateOne) SetUpdatedAt(t time.Time) *CartLineItemsUpdateOne {
	cliuo.mutation.SetUpdatedAt(t)
	return cliuo
}

// SetUpdatedBy sets the "updated_by" field.
func (cliuo *CartLineItemsUpdateOne) SetUpdatedBy(s string) *CartLineItemsUpdateOne {
	cliuo.mutation.SetUpdatedBy(s)
	return cliuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cliuo *CartLineItemsUpdateOne) SetNillableUpdatedBy(s *string) *CartLineItemsUpdateOne {
	if s != nil {
		cliuo.SetUpdatedBy(*s)
	}
	return cliuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cliuo *CartLineItemsUpdateOne) ClearUpdatedBy() *CartLineItemsUpdateOne {
	cliuo.mutation.ClearUpdatedBy()
	return cliuo
}

// SetMetadata sets the "metadata" field.
func (cliuo *CartLineItemsUpdateOne) SetMetadata(m map[string]string) *CartLineItemsUpdateOne {
	cliuo.mutation.SetMetadata(m)
	return cliuo
}

// ClearMetadata clears the value of the "metadata" field.
func (cliuo *CartLineItemsUpdateOne) ClearMetadata() *CartLineItemsUpdateOne {
	cliuo.mutation.ClearMetadata()
	return cliuo
}

// SetQuantity sets the "quantity" field.
func (cliuo *CartLineItemsUpdateOne) SetQuantity(i int) *CartLineItemsUpdateOne {
	cliuo.mutation.ResetQuantity()
	cliuo.mutation.SetQuantity(i)
	return cliuo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (cliuo *CartLineItemsUpdateOne) SetNillableQuantity(i *int) *CartLineItemsUpdateOne {
	if i != nil {
		cliuo.SetQuantity(*i)
	}
	return cliuo
}

// AddQuantity adds i to the "quantity" field.
func (cliuo *CartLineItemsUpdateOne) AddQuantity(i int) *CartLineItemsUpdateOne {
	cliuo.mutation.AddQuantity(i)
	return cliuo
}

// SetPerUnitPrice sets the "per_unit_price" field.
func (cliuo *CartLineItemsUpdateOne) SetPerUnitPrice(d decimal.Decimal) *CartLineItemsUpdateOne {
	cliuo.mutation.SetPerUnitPrice(d)
	return cliuo
}

// SetNillablePerUnitPrice sets the "per_unit_price" field if the given value is not nil.
func (cliuo *CartLineItemsUpdateOne) SetNillablePerUnitPrice(d *decimal.Decimal) *CartLineItemsUpdateOne {
	if d != nil {
		cliuo.SetPerUnitPrice(*d)
	}
	return cliuo
}

// SetTaxAmount sets the "tax_amount" field.
func (cliuo *CartLineItemsUpdateOne) SetTaxAmount(d decimal.Decimal) *CartLineItemsUpdateOne {
	cliuo.mutation.SetTaxAmount(d)
	return cliuo
}

// SetNillableTaxAmount sets the "tax_amount" field if the given value is not nil.
func (cliuo *CartLineItemsUpdateOne) SetNillableTaxAmount(d *decimal.Decimal) *CartLineItemsUpdateOne {
	if d != nil {
		cliuo.SetTaxAmount(*d)
	}
	return cliuo
}

// SetDiscountAmount sets the "discount_amount" field.
func (cliuo *CartLineItemsUpdateOne) SetDiscountAmount(d decimal.Decimal) *CartLineItemsUpdateOne {
	cliuo.mutation.SetDiscountAmount(d)
	return cliuo
}

// SetNillableDiscountAmount sets the "discount_amount" field if the given value is not nil.
func (cliuo *CartLineItemsUpdateOne) SetNillableDiscountAmount(d *decimal.Decimal) *CartLineItemsUpdateOne {
	if d != nil {
		cliuo.SetDiscountAmount(*d)
	}
	return cliuo
}

// SetSubtotal sets the "subtotal" field.
func (cliuo *CartLineItemsUpdateOne) SetSubtotal(d decimal.Decimal) *CartLineItemsUpdateOne {
	cliuo.mutation.SetSubtotal(d)
	return cliuo
}

// SetNillableSubtotal sets the "subtotal" field if the given value is not nil.
func (cliuo *CartLineItemsUpdateOne) SetNillableSubtotal(d *decimal.Decimal) *CartLineItemsUpdateOne {
	if d != nil {
		cliuo.SetSubtotal(*d)
	}
	return cliuo
}

// SetTotal sets the "total" field.
func (cliuo *CartLineItemsUpdateOne) SetTotal(d decimal.Decimal) *CartLineItemsUpdateOne {
	cliuo.mutation.SetTotal(d)
	return cliuo
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (cliuo *CartLineItemsUpdateOne) SetNillableTotal(d *decimal.Decimal) *CartLineItemsUpdateOne {
	if d != nil {
		cliuo.SetTotal(*d)
	}
	return cliuo
}

// Mutation returns the CartLineItemsMutation object of the builder.
func (cliuo *CartLineItemsUpdateOne) Mutation() *CartLineItemsMutation {
	return cliuo.mutation
}

// Where appends a list predicates to the CartLineItemsUpdate builder.
func (cliuo *CartLineItemsUpdateOne) Where(ps ...predicate.CartLineItems) *CartLineItemsUpdateOne {
	cliuo.mutation.Where(ps...)
	return cliuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cliuo *CartLineItemsUpdateOne) Select(field string, fields ...string) *CartLineItemsUpdateOne {
	cliuo.fields = append([]string{field}, fields...)
	return cliuo
}

// Save executes the query and returns the updated CartLineItems entity.
func (cliuo *CartLineItemsUpdateOne) Save(ctx context.Context) (*CartLineItems, error) {
	cliuo.defaults()
	return withHooks(ctx, cliuo.sqlSave, cliuo.mutation, cliuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cliuo *CartLineItemsUpdateOne) SaveX(ctx context.Context) *CartLineItems {
	node, err := cliuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cliuo *CartLineItemsUpdateOne) Exec(ctx context.Context) error {
	_, err := cliuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cliuo *CartLineItemsUpdateOne) ExecX(ctx context.Context) {
	if err := cliuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cliuo *CartLineItemsUpdateOne) defaults() {
	if _, ok := cliuo.mutation.UpdatedAt(); !ok {
		v := cartlineitems.UpdateDefaultUpdatedAt()
		cliuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cliuo *CartLineItemsUpdateOne) check() error {
	if cliuo.mutation.CartCleared() && len(cliuo.mutation.CartIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CartLineItems.cart"`)
	}
	return nil
}

func (cliuo *CartLineItemsUpdateOne) sqlSave(ctx context.Context) (_node *CartLineItems, err error) {
	if err := cliuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(cartlineitems.Table, cartlineitems.Columns, sqlgraph.NewFieldSpec(cartlineitems.FieldID, field.TypeString))
	id, ok := cliuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CartLineItems.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cliuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cartlineitems.FieldID)
		for _, f := range fields {
			if !cartlineitems.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cartlineitems.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cliuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cliuo.mutation.Status(); ok {
		_spec.SetField(cartlineitems.FieldStatus, field.TypeString, value)
	}
	if value, ok := cliuo.mutation.UpdatedAt(); ok {
		_spec.SetField(cartlineitems.FieldUpdatedAt, field.TypeTime, value)
	}
	if cliuo.mutation.CreatedByCleared() {
		_spec.ClearField(cartlineitems.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cliuo.mutation.UpdatedBy(); ok {
		_spec.SetField(cartlineitems.FieldUpdatedBy, field.TypeString, value)
	}
	if cliuo.mutation.UpdatedByCleared() {
		_spec.ClearField(cartlineitems.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := cliuo.mutation.Metadata(); ok {
		_spec.SetField(cartlineitems.FieldMetadata, field.TypeJSON, value)
	}
	if cliuo.mutation.MetadataCleared() {
		_spec.ClearField(cartlineitems.FieldMetadata, field.TypeJSON)
	}
	if value, ok := cliuo.mutation.Quantity(); ok {
		_spec.SetField(cartlineitems.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := cliuo.mutation.AddedQuantity(); ok {
		_spec.AddField(cartlineitems.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := cliuo.mutation.PerUnitPrice(); ok {
		_spec.SetField(cartlineitems.FieldPerUnitPrice, field.TypeOther, value)
	}
	if value, ok := cliuo.mutation.TaxAmount(); ok {
		_spec.SetField(cartlineitems.FieldTaxAmount, field.TypeOther, value)
	}
	if value, ok := cliuo.mutation.DiscountAmount(); ok {
		_spec.SetField(cartlineitems.FieldDiscountAmount, field.TypeOther, value)
	}
	if value, ok := cliuo.mutation.Subtotal(); ok {
		_spec.SetField(cartlineitems.FieldSubtotal, field.TypeOther, value)
	}
	if value, ok := cliuo.mutation.Total(); ok {
		_spec.SetField(cartlineitems.FieldTotal, field.TypeOther, value)
	}
	_node = &CartLineItems{config: cliuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cliuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cartlineitems.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cliuo.mutation.done = true
	return _node, nil
}
