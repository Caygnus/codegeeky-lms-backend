// Code generated by ent, DO NOT EDIT.

package internshipenrollment

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/omkar273/codegeeky/internal/types"
)

const (
	// Label holds the string label denoting the internshipenrollment type in the database.
	Label = "internship_enrollment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldInternshipID holds the string denoting the internship_id field in the database.
	FieldInternshipID = "internship_id"
	// FieldInternshipBatchID holds the string denoting the internship_batch_id field in the database.
	FieldInternshipBatchID = "internship_batch_id"
	// FieldEnrollmentStatus holds the string denoting the enrollment_status field in the database.
	FieldEnrollmentStatus = "enrollment_status"
	// FieldPaymentStatus holds the string denoting the payment_status field in the database.
	FieldPaymentStatus = "payment_status"
	// FieldEnrolledAt holds the string denoting the enrolled_at field in the database.
	FieldEnrolledAt = "enrolled_at"
	// FieldPaymentID holds the string denoting the payment_id field in the database.
	FieldPaymentID = "payment_id"
	// FieldRefundedAt holds the string denoting the refunded_at field in the database.
	FieldRefundedAt = "refunded_at"
	// FieldCancellationReason holds the string denoting the cancellation_reason field in the database.
	FieldCancellationReason = "cancellation_reason"
	// FieldRefundReason holds the string denoting the refund_reason field in the database.
	FieldRefundReason = "refund_reason"
	// FieldIdempotencyKey holds the string denoting the idempotency_key field in the database.
	FieldIdempotencyKey = "idempotency_key"
	// Table holds the table name of the internshipenrollment in the database.
	Table = "internship_enrollments"
)

// Columns holds all SQL columns for internshipenrollment fields.
var Columns = []string{
	FieldID,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldMetadata,
	FieldUserID,
	FieldInternshipID,
	FieldInternshipBatchID,
	FieldEnrollmentStatus,
	FieldPaymentStatus,
	FieldEnrolledAt,
	FieldPaymentID,
	FieldRefundedAt,
	FieldCancellationReason,
	FieldRefundReason,
	FieldIdempotencyKey,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultMetadata holds the default value on creation for the "metadata" field.
	DefaultMetadata map[string]string
	// UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	UserIDValidator func(string) error
	// InternshipIDValidator is a validator for the "internship_id" field. It is called by the builders before save.
	InternshipIDValidator func(string) error
	// InternshipBatchIDValidator is a validator for the "internship_batch_id" field. It is called by the builders before save.
	InternshipBatchIDValidator func(string) error
	// DefaultEnrollmentStatus holds the default value on creation for the "enrollment_status" field.
	DefaultEnrollmentStatus types.InternshipEnrollmentStatus
	// EnrollmentStatusValidator is a validator for the "enrollment_status" field. It is called by the builders before save.
	EnrollmentStatusValidator func(string) error
	// DefaultPaymentStatus holds the default value on creation for the "payment_status" field.
	DefaultPaymentStatus types.PaymentStatus
	// PaymentStatusValidator is a validator for the "payment_status" field. It is called by the builders before save.
	PaymentStatusValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the InternshipEnrollment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByInternshipID orders the results by the internship_id field.
func ByInternshipID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternshipID, opts...).ToFunc()
}

// ByInternshipBatchID orders the results by the internship_batch_id field.
func ByInternshipBatchID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternshipBatchID, opts...).ToFunc()
}

// ByEnrollmentStatus orders the results by the enrollment_status field.
func ByEnrollmentStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnrollmentStatus, opts...).ToFunc()
}

// ByPaymentStatus orders the results by the payment_status field.
func ByPaymentStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentStatus, opts...).ToFunc()
}

// ByEnrolledAt orders the results by the enrolled_at field.
func ByEnrolledAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnrolledAt, opts...).ToFunc()
}

// ByPaymentID orders the results by the payment_id field.
func ByPaymentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentID, opts...).ToFunc()
}

// ByRefundedAt orders the results by the refunded_at field.
func ByRefundedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefundedAt, opts...).ToFunc()
}

// ByCancellationReason orders the results by the cancellation_reason field.
func ByCancellationReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCancellationReason, opts...).ToFunc()
}

// ByRefundReason orders the results by the refund_reason field.
func ByRefundReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefundReason, opts...).ToFunc()
}

// ByIdempotencyKey orders the results by the idempotency_key field.
func ByIdempotencyKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdempotencyKey, opts...).ToFunc()
}
