// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CategoriesColumns holds the columns for the "categories" table.
	CategoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "status", Type: field.TypeString, Default: "published", SchemaType: map[string]string{"postgres": "varchar(20)"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "lookup_key", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "description", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "text"}},
		{Name: "internship_id", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "varchar(255)"}},
	}
	// CategoriesTable holds the schema information for the "categories" table.
	CategoriesTable = &schema.Table{
		Name:       "categories",
		Columns:    CategoriesColumns,
		PrimaryKey: []*schema.Column{CategoriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "categories_internships_categories",
				Columns:    []*schema.Column{CategoriesColumns[10]},
				RefColumns: []*schema.Column{InternshipsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "category_name",
				Unique:  true,
				Columns: []*schema.Column{CategoriesColumns[7]},
			},
		},
	}
	// DiscountsColumns holds the columns for the "discounts" table.
	DiscountsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "status", Type: field.TypeString, Default: "published", SchemaType: map[string]string{"postgres": "varchar(20)"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "code", Type: field.TypeString, Unique: true, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "description", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "discount_type", Type: field.TypeString, Default: "flat", SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "discount_value", Type: field.TypeOther, SchemaType: map[string]string{"postgres": "decimal(10,2)"}},
		{Name: "valid_from", Type: field.TypeTime},
		{Name: "valid_until", Type: field.TypeTime, Nullable: true},
		{Name: "is_active", Type: field.TypeBool, Default: true},
		{Name: "max_uses", Type: field.TypeInt, Nullable: true},
		{Name: "min_order_value", Type: field.TypeOther, Nullable: true, SchemaType: map[string]string{"postgres": "decimal(10,2)"}},
		{Name: "is_combinable", Type: field.TypeBool, Default: false},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
	}
	// DiscountsTable holds the schema information for the "discounts" table.
	DiscountsTable = &schema.Table{
		Name:       "discounts",
		Columns:    DiscountsColumns,
		PrimaryKey: []*schema.Column{DiscountsColumns[0]},
	}
	// FileUploadsColumns holds the columns for the "file_uploads" table.
	FileUploadsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "status", Type: field.TypeString, Default: "published", SchemaType: map[string]string{"postgres": "varchar(20)"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "file_name", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "file_type", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "extension", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(50)"}},
		{Name: "mime_type", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "public_url", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(512)"}},
		{Name: "secure_url", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "varchar(512)"}},
		{Name: "provider", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "external_id", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "size_bytes", Type: field.TypeInt64},
		{Name: "file_size", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "varchar(50)"}},
	}
	// FileUploadsTable holds the schema information for the "file_uploads" table.
	FileUploadsTable = &schema.Table{
		Name:       "file_uploads",
		Columns:    FileUploadsColumns,
		PrimaryKey: []*schema.Column{FileUploadsColumns[0]},
	}
	// InternshipsColumns holds the columns for the "internships" table.
	InternshipsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "status", Type: field.TypeString, Default: "published", SchemaType: map[string]string{"postgres": "varchar(20)"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "title", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "lookup_key", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "description", Type: field.TypeString, Size: 2147483647, SchemaType: map[string]string{"postgres": "text"}},
		{Name: "skills", Type: field.TypeJSON, Nullable: true},
		{Name: "level", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "mode", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "duration_in_weeks", Type: field.TypeInt, Nullable: true},
		{Name: "learning_outcomes", Type: field.TypeJSON, Nullable: true},
		{Name: "prerequisites", Type: field.TypeJSON, Nullable: true},
		{Name: "benefits", Type: field.TypeJSON, Nullable: true},
		{Name: "currency", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "price", Type: field.TypeOther, SchemaType: map[string]string{"postgres": "decimal(10,2)"}},
		{Name: "flat_discount", Type: field.TypeOther, Nullable: true, SchemaType: map[string]string{"postgres": "decimal(10,2)"}},
		{Name: "percentage_discount", Type: field.TypeOther, Nullable: true, SchemaType: map[string]string{"postgres": "decimal(10,2)"}},
		{Name: "subtotal", Type: field.TypeOther, SchemaType: map[string]string{"postgres": "decimal(10,2)"}},
		{Name: "total", Type: field.TypeOther, SchemaType: map[string]string{"postgres": "decimal(10,2)"}},
		{Name: "category_id", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "varchar(255)"}},
	}
	// InternshipsTable holds the schema information for the "internships" table.
	InternshipsTable = &schema.Table{
		Name:       "internships",
		Columns:    InternshipsColumns,
		PrimaryKey: []*schema.Column{InternshipsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "internships_categories_internships",
				Columns:    []*schema.Column{InternshipsColumns[22]},
				RefColumns: []*schema.Column{CategoriesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// InternshipBatchesColumns holds the columns for the "internship_batches" table.
	InternshipBatchesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "status", Type: field.TypeString, Default: "published", SchemaType: map[string]string{"postgres": "varchar(20)"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "internship_id", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "name", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "description", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "start_date", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"postgres": "timestamp"}},
		{Name: "end_date", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"postgres": "timestamp"}},
		{Name: "batch_status", Type: field.TypeString, Default: "upcoming", SchemaType: map[string]string{"postgres": "varchar(255)"}},
	}
	// InternshipBatchesTable holds the schema information for the "internship_batches" table.
	InternshipBatchesTable = &schema.Table{
		Name:       "internship_batches",
		Columns:    InternshipBatchesColumns,
		PrimaryKey: []*schema.Column{InternshipBatchesColumns[0]},
	}
	// InternshipEnrollmentsColumns holds the columns for the "internship_enrollments" table.
	InternshipEnrollmentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "status", Type: field.TypeString, Default: "published", SchemaType: map[string]string{"postgres": "varchar(20)"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "user_id", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "internship_id", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "internship_batch_id", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "enrollment_status", Type: field.TypeString, Default: "pending", SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "payment_status", Type: field.TypeString, Default: "pending", SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "enrolled_at", Type: field.TypeTime, Nullable: true},
		{Name: "payment_id", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "refunded_at", Type: field.TypeTime, Nullable: true},
		{Name: "cancellation_reason", Type: field.TypeString, Nullable: true},
		{Name: "refund_reason", Type: field.TypeString, Nullable: true},
		{Name: "idempotency_key", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "varchar(255)"}},
	}
	// InternshipEnrollmentsTable holds the schema information for the "internship_enrollments" table.
	InternshipEnrollmentsTable = &schema.Table{
		Name:       "internship_enrollments",
		Columns:    InternshipEnrollmentsColumns,
		PrimaryKey: []*schema.Column{InternshipEnrollmentsColumns[0]},
	}
	// PaymentsColumns holds the columns for the "payments" table.
	PaymentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, SchemaType: map[string]string{"postgres": "varchar(50)"}},
		{Name: "status", Type: field.TypeString, Default: "published", SchemaType: map[string]string{"postgres": "varchar(20)"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "idempotency_key", Type: field.TypeString, Unique: true, SchemaType: map[string]string{"postgres": "varchar(50)"}},
		{Name: "destination_type", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(50)"}},
		{Name: "destination_id", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(50)"}},
		{Name: "payment_method_type", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "varchar(50)"}},
		{Name: "payment_method_id", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "varchar(50)"}},
		{Name: "payment_gateway_provider", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(50)"}},
		{Name: "gateway_payment_id", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "amount", Type: field.TypeOther, SchemaType: map[string]string{"postgres": "numeric(20,8)"}},
		{Name: "currency", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(10)"}},
		{Name: "payment_status", Type: field.TypeString, Default: "pending", SchemaType: map[string]string{"postgres": "varchar(50)"}},
		{Name: "track_attempts", Type: field.TypeBool, Default: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"postgres": "jsonb"}},
		{Name: "succeeded_at", Type: field.TypeTime, Nullable: true},
		{Name: "failed_at", Type: field.TypeTime, Nullable: true},
		{Name: "refunded_at", Type: field.TypeTime, Nullable: true},
		{Name: "error_message", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "text"}},
	}
	// PaymentsTable holds the schema information for the "payments" table.
	PaymentsTable = &schema.Table{
		Name:       "payments",
		Columns:    PaymentsColumns,
		PrimaryKey: []*schema.Column{PaymentsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "idx_destination_status",
				Unique:  false,
				Columns: []*schema.Column{PaymentsColumns[7], PaymentsColumns[8], PaymentsColumns[15], PaymentsColumns[1]},
			},
			{
				Name:    "idx_tenant_payment_method_status",
				Unique:  false,
				Columns: []*schema.Column{PaymentsColumns[9], PaymentsColumns[10], PaymentsColumns[15], PaymentsColumns[1]},
			},
			{
				Name:    "idx_gateway_payment",
				Unique:  false,
				Columns: []*schema.Column{PaymentsColumns[11], PaymentsColumns[12]},
				Annotation: &entsql.IndexAnnotation{
					Where: "payment_gateway_provider IS NOT NULL AND gateway_payment_id IS NOT NULL",
				},
			},
		},
	}
	// PaymentAttemptsColumns holds the columns for the "payment_attempts" table.
	PaymentAttemptsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, SchemaType: map[string]string{"postgres": "varchar(50)"}},
		{Name: "status", Type: field.TypeString, Default: "published", SchemaType: map[string]string{"postgres": "varchar(20)"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "payment_status", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(20)"}},
		{Name: "attempt_number", Type: field.TypeInt, Default: 1, SchemaType: map[string]string{"postgres": "integer"}},
		{Name: "gateway_attempt_id", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "error_message", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "text"}},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true, SchemaType: map[string]string{"postgres": "jsonb"}},
		{Name: "payment_id", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(50)"}},
	}
	// PaymentAttemptsTable holds the schema information for the "payment_attempts" table.
	PaymentAttemptsTable = &schema.Table{
		Name:       "payment_attempts",
		Columns:    PaymentAttemptsColumns,
		PrimaryKey: []*schema.Column{PaymentAttemptsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "payment_attempts_payments_attempts",
				Columns:    []*schema.Column{PaymentAttemptsColumns[11]},
				RefColumns: []*schema.Column{PaymentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "idx_payment_attempt_number_unique",
				Unique:  true,
				Columns: []*schema.Column{PaymentAttemptsColumns[11], PaymentAttemptsColumns[7]},
			},
			{
				Name:    "idx_payment_attempt_status",
				Unique:  false,
				Columns: []*schema.Column{PaymentAttemptsColumns[11], PaymentAttemptsColumns[1]},
			},
			{
				Name:    "idx_gateway_attempt",
				Unique:  false,
				Columns: []*schema.Column{PaymentAttemptsColumns[8]},
				Annotation: &entsql.IndexAnnotation{
					Where: "gateway_attempt_id IS NOT NULL",
				},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "status", Type: field.TypeString, Default: "published", SchemaType: map[string]string{"postgres": "varchar(20)"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "created_by", Type: field.TypeString, Nullable: true},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "full_name", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "email", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "phone_number", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(255)"}},
		{Name: "role", Type: field.TypeString, SchemaType: map[string]string{"postgres": "varchar(255)"}},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "user_email_phone_number",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[7], UsersColumns[8]},
			},
			{
				Name:    "user_email",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[7]},
			},
			{
				Name:    "user_phone_number",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[8]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CategoriesTable,
		DiscountsTable,
		FileUploadsTable,
		InternshipsTable,
		InternshipBatchesTable,
		InternshipEnrollmentsTable,
		PaymentsTable,
		PaymentAttemptsTable,
		UsersTable,
	}
)

func init() {
	CategoriesTable.ForeignKeys[0].RefTable = InternshipsTable
	InternshipsTable.ForeignKeys[0].RefTable = CategoriesTable
	PaymentAttemptsTable.ForeignKeys[0].RefTable = PaymentsTable
}
