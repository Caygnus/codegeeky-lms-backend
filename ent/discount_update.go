// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/omkar273/codegeeky/ent/discount"
	"github.com/omkar273/codegeeky/ent/predicate"
	"github.com/shopspring/decimal"
)

// DiscountUpdate is the builder for updating Discount entities.
type DiscountUpdate struct {
	config
	hooks    []Hook
	mutation *DiscountMutation
}

// Where appends a list predicates to the DiscountUpdate builder.
func (du *DiscountUpdate) Where(ps ...predicate.Discount) *DiscountUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetStatus sets the "status" field.
func (du *DiscountUpdate) SetStatus(s string) *DiscountUpdate {
	du.mutation.SetStatus(s)
	return du
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (du *DiscountUpdate) SetNillableStatus(s *string) *DiscountUpdate {
	if s != nil {
		du.SetStatus(*s)
	}
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DiscountUpdate) SetUpdatedAt(t time.Time) *DiscountUpdate {
	du.mutation.SetUpdatedAt(t)
	return du
}

// SetUpdatedBy sets the "updated_by" field.
func (du *DiscountUpdate) SetUpdatedBy(s string) *DiscountUpdate {
	du.mutation.SetUpdatedBy(s)
	return du
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (du *DiscountUpdate) SetNillableUpdatedBy(s *string) *DiscountUpdate {
	if s != nil {
		du.SetUpdatedBy(*s)
	}
	return du
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (du *DiscountUpdate) ClearUpdatedBy() *DiscountUpdate {
	du.mutation.ClearUpdatedBy()
	return du
}

// SetDescription sets the "description" field.
func (du *DiscountUpdate) SetDescription(s string) *DiscountUpdate {
	du.mutation.SetDescription(s)
	return du
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (du *DiscountUpdate) SetNillableDescription(s *string) *DiscountUpdate {
	if s != nil {
		du.SetDescription(*s)
	}
	return du
}

// ClearDescription clears the value of the "description" field.
func (du *DiscountUpdate) ClearDescription() *DiscountUpdate {
	du.mutation.ClearDescription()
	return du
}

// SetValidFrom sets the "valid_from" field.
func (du *DiscountUpdate) SetValidFrom(t time.Time) *DiscountUpdate {
	du.mutation.SetValidFrom(t)
	return du
}

// SetNillableValidFrom sets the "valid_from" field if the given value is not nil.
func (du *DiscountUpdate) SetNillableValidFrom(t *time.Time) *DiscountUpdate {
	if t != nil {
		du.SetValidFrom(*t)
	}
	return du
}

// SetValidUntil sets the "valid_until" field.
func (du *DiscountUpdate) SetValidUntil(t time.Time) *DiscountUpdate {
	du.mutation.SetValidUntil(t)
	return du
}

// SetNillableValidUntil sets the "valid_until" field if the given value is not nil.
func (du *DiscountUpdate) SetNillableValidUntil(t *time.Time) *DiscountUpdate {
	if t != nil {
		du.SetValidUntil(*t)
	}
	return du
}

// ClearValidUntil clears the value of the "valid_until" field.
func (du *DiscountUpdate) ClearValidUntil() *DiscountUpdate {
	du.mutation.ClearValidUntil()
	return du
}

// SetIsActive sets the "is_active" field.
func (du *DiscountUpdate) SetIsActive(b bool) *DiscountUpdate {
	du.mutation.SetIsActive(b)
	return du
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (du *DiscountUpdate) SetNillableIsActive(b *bool) *DiscountUpdate {
	if b != nil {
		du.SetIsActive(*b)
	}
	return du
}

// SetMaxUses sets the "max_uses" field.
func (du *DiscountUpdate) SetMaxUses(i int) *DiscountUpdate {
	du.mutation.ResetMaxUses()
	du.mutation.SetMaxUses(i)
	return du
}

// SetNillableMaxUses sets the "max_uses" field if the given value is not nil.
func (du *DiscountUpdate) SetNillableMaxUses(i *int) *DiscountUpdate {
	if i != nil {
		du.SetMaxUses(*i)
	}
	return du
}

// AddMaxUses adds i to the "max_uses" field.
func (du *DiscountUpdate) AddMaxUses(i int) *DiscountUpdate {
	du.mutation.AddMaxUses(i)
	return du
}

// ClearMaxUses clears the value of the "max_uses" field.
func (du *DiscountUpdate) ClearMaxUses() *DiscountUpdate {
	du.mutation.ClearMaxUses()
	return du
}

// SetMinOrderValue sets the "min_order_value" field.
func (du *DiscountUpdate) SetMinOrderValue(d decimal.Decimal) *DiscountUpdate {
	du.mutation.SetMinOrderValue(d)
	return du
}

// SetNillableMinOrderValue sets the "min_order_value" field if the given value is not nil.
func (du *DiscountUpdate) SetNillableMinOrderValue(d *decimal.Decimal) *DiscountUpdate {
	if d != nil {
		du.SetMinOrderValue(*d)
	}
	return du
}

// ClearMinOrderValue clears the value of the "min_order_value" field.
func (du *DiscountUpdate) ClearMinOrderValue() *DiscountUpdate {
	du.mutation.ClearMinOrderValue()
	return du
}

// SetMetadata sets the "metadata" field.
func (du *DiscountUpdate) SetMetadata(m map[string]string) *DiscountUpdate {
	du.mutation.SetMetadata(m)
	return du
}

// ClearMetadata clears the value of the "metadata" field.
func (du *DiscountUpdate) ClearMetadata() *DiscountUpdate {
	du.mutation.ClearMetadata()
	return du
}

// Mutation returns the DiscountMutation object of the builder.
func (du *DiscountUpdate) Mutation() *DiscountMutation {
	return du.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DiscountUpdate) Save(ctx context.Context) (int, error) {
	du.defaults()
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DiscountUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DiscountUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DiscountUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DiscountUpdate) defaults() {
	if _, ok := du.mutation.UpdatedAt(); !ok {
		v := discount.UpdateDefaultUpdatedAt()
		du.mutation.SetUpdatedAt(v)
	}
}

func (du *DiscountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(discount.Table, discount.Columns, sqlgraph.NewFieldSpec(discount.FieldID, field.TypeString))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Status(); ok {
		_spec.SetField(discount.FieldStatus, field.TypeString, value)
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.SetField(discount.FieldUpdatedAt, field.TypeTime, value)
	}
	if du.mutation.CreatedByCleared() {
		_spec.ClearField(discount.FieldCreatedBy, field.TypeString)
	}
	if value, ok := du.mutation.UpdatedBy(); ok {
		_spec.SetField(discount.FieldUpdatedBy, field.TypeString, value)
	}
	if du.mutation.UpdatedByCleared() {
		_spec.ClearField(discount.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := du.mutation.Description(); ok {
		_spec.SetField(discount.FieldDescription, field.TypeString, value)
	}
	if du.mutation.DescriptionCleared() {
		_spec.ClearField(discount.FieldDescription, field.TypeString)
	}
	if value, ok := du.mutation.ValidFrom(); ok {
		_spec.SetField(discount.FieldValidFrom, field.TypeTime, value)
	}
	if value, ok := du.mutation.ValidUntil(); ok {
		_spec.SetField(discount.FieldValidUntil, field.TypeTime, value)
	}
	if du.mutation.ValidUntilCleared() {
		_spec.ClearField(discount.FieldValidUntil, field.TypeTime)
	}
	if value, ok := du.mutation.IsActive(); ok {
		_spec.SetField(discount.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := du.mutation.MaxUses(); ok {
		_spec.SetField(discount.FieldMaxUses, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedMaxUses(); ok {
		_spec.AddField(discount.FieldMaxUses, field.TypeInt, value)
	}
	if du.mutation.MaxUsesCleared() {
		_spec.ClearField(discount.FieldMaxUses, field.TypeInt)
	}
	if value, ok := du.mutation.MinOrderValue(); ok {
		_spec.SetField(discount.FieldMinOrderValue, field.TypeOther, value)
	}
	if du.mutation.MinOrderValueCleared() {
		_spec.ClearField(discount.FieldMinOrderValue, field.TypeOther)
	}
	if value, ok := du.mutation.Metadata(); ok {
		_spec.SetField(discount.FieldMetadata, field.TypeJSON, value)
	}
	if du.mutation.MetadataCleared() {
		_spec.ClearField(discount.FieldMetadata, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DiscountUpdateOne is the builder for updating a single Discount entity.
type DiscountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DiscountMutation
}

// SetStatus sets the "status" field.
func (duo *DiscountUpdateOne) SetStatus(s string) *DiscountUpdateOne {
	duo.mutation.SetStatus(s)
	return duo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (duo *DiscountUpdateOne) SetNillableStatus(s *string) *DiscountUpdateOne {
	if s != nil {
		duo.SetStatus(*s)
	}
	return duo
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DiscountUpdateOne) SetUpdatedAt(t time.Time) *DiscountUpdateOne {
	duo.mutation.SetUpdatedAt(t)
	return duo
}

// SetUpdatedBy sets the "updated_by" field.
func (duo *DiscountUpdateOne) SetUpdatedBy(s string) *DiscountUpdateOne {
	duo.mutation.SetUpdatedBy(s)
	return duo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (duo *DiscountUpdateOne) SetNillableUpdatedBy(s *string) *DiscountUpdateOne {
	if s != nil {
		duo.SetUpdatedBy(*s)
	}
	return duo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (duo *DiscountUpdateOne) ClearUpdatedBy() *DiscountUpdateOne {
	duo.mutation.ClearUpdatedBy()
	return duo
}

// SetDescription sets the "description" field.
func (duo *DiscountUpdateOne) SetDescription(s string) *DiscountUpdateOne {
	duo.mutation.SetDescription(s)
	return duo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (duo *DiscountUpdateOne) SetNillableDescription(s *string) *DiscountUpdateOne {
	if s != nil {
		duo.SetDescription(*s)
	}
	return duo
}

// ClearDescription clears the value of the "description" field.
func (duo *DiscountUpdateOne) ClearDescription() *DiscountUpdateOne {
	duo.mutation.ClearDescription()
	return duo
}

// SetValidFrom sets the "valid_from" field.
func (duo *DiscountUpdateOne) SetValidFrom(t time.Time) *DiscountUpdateOne {
	duo.mutation.SetValidFrom(t)
	return duo
}

// SetNillableValidFrom sets the "valid_from" field if the given value is not nil.
func (duo *DiscountUpdateOne) SetNillableValidFrom(t *time.Time) *DiscountUpdateOne {
	if t != nil {
		duo.SetValidFrom(*t)
	}
	return duo
}

// SetValidUntil sets the "valid_until" field.
func (duo *DiscountUpdateOne) SetValidUntil(t time.Time) *DiscountUpdateOne {
	duo.mutation.SetValidUntil(t)
	return duo
}

// SetNillableValidUntil sets the "valid_until" field if the given value is not nil.
func (duo *DiscountUpdateOne) SetNillableValidUntil(t *time.Time) *DiscountUpdateOne {
	if t != nil {
		duo.SetValidUntil(*t)
	}
	return duo
}

// ClearValidUntil clears the value of the "valid_until" field.
func (duo *DiscountUpdateOne) ClearValidUntil() *DiscountUpdateOne {
	duo.mutation.ClearValidUntil()
	return duo
}

// SetIsActive sets the "is_active" field.
func (duo *DiscountUpdateOne) SetIsActive(b bool) *DiscountUpdateOne {
	duo.mutation.SetIsActive(b)
	return duo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (duo *DiscountUpdateOne) SetNillableIsActive(b *bool) *DiscountUpdateOne {
	if b != nil {
		duo.SetIsActive(*b)
	}
	return duo
}

// SetMaxUses sets the "max_uses" field.
func (duo *DiscountUpdateOne) SetMaxUses(i int) *DiscountUpdateOne {
	duo.mutation.ResetMaxUses()
	duo.mutation.SetMaxUses(i)
	return duo
}

// SetNillableMaxUses sets the "max_uses" field if the given value is not nil.
func (duo *DiscountUpdateOne) SetNillableMaxUses(i *int) *DiscountUpdateOne {
	if i != nil {
		duo.SetMaxUses(*i)
	}
	return duo
}

// AddMaxUses adds i to the "max_uses" field.
func (duo *DiscountUpdateOne) AddMaxUses(i int) *DiscountUpdateOne {
	duo.mutation.AddMaxUses(i)
	return duo
}

// ClearMaxUses clears the value of the "max_uses" field.
func (duo *DiscountUpdateOne) ClearMaxUses() *DiscountUpdateOne {
	duo.mutation.ClearMaxUses()
	return duo
}

// SetMinOrderValue sets the "min_order_value" field.
func (duo *DiscountUpdateOne) SetMinOrderValue(d decimal.Decimal) *DiscountUpdateOne {
	duo.mutation.SetMinOrderValue(d)
	return duo
}

// SetNillableMinOrderValue sets the "min_order_value" field if the given value is not nil.
func (duo *DiscountUpdateOne) SetNillableMinOrderValue(d *decimal.Decimal) *DiscountUpdateOne {
	if d != nil {
		duo.SetMinOrderValue(*d)
	}
	return duo
}

// ClearMinOrderValue clears the value of the "min_order_value" field.
func (duo *DiscountUpdateOne) ClearMinOrderValue() *DiscountUpdateOne {
	duo.mutation.ClearMinOrderValue()
	return duo
}

// SetMetadata sets the "metadata" field.
func (duo *DiscountUpdateOne) SetMetadata(m map[string]string) *DiscountUpdateOne {
	duo.mutation.SetMetadata(m)
	return duo
}

// ClearMetadata clears the value of the "metadata" field.
func (duo *DiscountUpdateOne) ClearMetadata() *DiscountUpdateOne {
	duo.mutation.ClearMetadata()
	return duo
}

// Mutation returns the DiscountMutation object of the builder.
func (duo *DiscountUpdateOne) Mutation() *DiscountMutation {
	return duo.mutation
}

// Where appends a list predicates to the DiscountUpdate builder.
func (duo *DiscountUpdateOne) Where(ps ...predicate.Discount) *DiscountUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DiscountUpdateOne) Select(field string, fields ...string) *DiscountUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Discount entity.
func (duo *DiscountUpdateOne) Save(ctx context.Context) (*Discount, error) {
	duo.defaults()
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DiscountUpdateOne) SaveX(ctx context.Context) *Discount {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DiscountUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DiscountUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DiscountUpdateOne) defaults() {
	if _, ok := duo.mutation.UpdatedAt(); !ok {
		v := discount.UpdateDefaultUpdatedAt()
		duo.mutation.SetUpdatedAt(v)
	}
}

func (duo *DiscountUpdateOne) sqlSave(ctx context.Context) (_node *Discount, err error) {
	_spec := sqlgraph.NewUpdateSpec(discount.Table, discount.Columns, sqlgraph.NewFieldSpec(discount.FieldID, field.TypeString))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Discount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, discount.FieldID)
		for _, f := range fields {
			if !discount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != discount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Status(); ok {
		_spec.SetField(discount.FieldStatus, field.TypeString, value)
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.SetField(discount.FieldUpdatedAt, field.TypeTime, value)
	}
	if duo.mutation.CreatedByCleared() {
		_spec.ClearField(discount.FieldCreatedBy, field.TypeString)
	}
	if value, ok := duo.mutation.UpdatedBy(); ok {
		_spec.SetField(discount.FieldUpdatedBy, field.TypeString, value)
	}
	if duo.mutation.UpdatedByCleared() {
		_spec.ClearField(discount.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := duo.mutation.Description(); ok {
		_spec.SetField(discount.FieldDescription, field.TypeString, value)
	}
	if duo.mutation.DescriptionCleared() {
		_spec.ClearField(discount.FieldDescription, field.TypeString)
	}
	if value, ok := duo.mutation.ValidFrom(); ok {
		_spec.SetField(discount.FieldValidFrom, field.TypeTime, value)
	}
	if value, ok := duo.mutation.ValidUntil(); ok {
		_spec.SetField(discount.FieldValidUntil, field.TypeTime, value)
	}
	if duo.mutation.ValidUntilCleared() {
		_spec.ClearField(discount.FieldValidUntil, field.TypeTime)
	}
	if value, ok := duo.mutation.IsActive(); ok {
		_spec.SetField(discount.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := duo.mutation.MaxUses(); ok {
		_spec.SetField(discount.FieldMaxUses, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedMaxUses(); ok {
		_spec.AddField(discount.FieldMaxUses, field.TypeInt, value)
	}
	if duo.mutation.MaxUsesCleared() {
		_spec.ClearField(discount.FieldMaxUses, field.TypeInt)
	}
	if value, ok := duo.mutation.MinOrderValue(); ok {
		_spec.SetField(discount.FieldMinOrderValue, field.TypeOther, value)
	}
	if duo.mutation.MinOrderValueCleared() {
		_spec.ClearField(discount.FieldMinOrderValue, field.TypeOther)
	}
	if value, ok := duo.mutation.Metadata(); ok {
		_spec.SetField(discount.FieldMetadata, field.TypeJSON, value)
	}
	if duo.mutation.MetadataCleared() {
		_spec.ClearField(discount.FieldMetadata, field.TypeJSON)
	}
	_node = &Discount{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
